<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端CORS和XMLHttpRequest全方位详解</title>
      <link href="/2018/02/07/%E5%89%8D%E7%AB%AFCORS%E5%92%8CXMLHttpRequest%E5%85%A8%E6%96%B9%E4%BD%8D%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/02/07/%E5%89%8D%E7%AB%AFCORS%E5%92%8CXMLHttpRequest%E5%85%A8%E6%96%B9%E4%BD%8D%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CORS的详解"><a href="#1-CORS的详解" class="headerlink" title="1 CORS的详解"></a>1 CORS的详解</h1><hr><h2 id="1-1-CORS的基本套路"><a href="#1-1-CORS的基本套路" class="headerlink" title="1.1 CORS的基本套路"></a>1.1 CORS的基本套路</h2><p>上一篇文章，我详细讲解了<code>JSONP</code>的实现和原理，但是毕竟它是一个很古老的东西，就是所谓的落伍了，现在浏览器已经有更好的套路来支持跨域请求了。俗话说得好，<code>上帝为你关上一扇门的时候，必然会为你开启一扇窗</code>,我们日常使用的浏览器也是这个套路，浏览器开启的窗户就是<code>CORS</code>,这个东西呢，可以说是前端独有的，我在做iOS的时候，是没有听说过这个东西的。也就是说这是一个专门针对浏览器的标准并且现在的浏览器都实现了这个标准。<code>CORS</code>就是<code>cross-origin sharing standard</code>,翻译成中文就是<code>跨域资源共享标准</code>。</p><p>跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的HTTP请求方法（特别是GET以外的HTTP请求，或者搭配某些MIME类型的POST请求），浏览器必须首先使用OPTIONS方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的HTTP请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括Cookies和HTTP认证相关数据）。下面将会针对每种情况做处理。</p><p>后面我会通过<code>http://localhost:8081(客户端地址)</code>和<code>http://127.0.0.1:5389(服务端地址)</code>来模拟演示整个CORS请求。客户端我是通过<code>Vue框架，并且自己实现XMLHttpRequest</code>来实现。服务端我是通过<code>Node的Express框架来实现</code>。具体代码地址，请看文章最后面。</p><h3 id="1-1-1-简单的请求访问控制"><a href="#1-1-1-简单的请求访问控制" class="headerlink" title="1.1.1 简单的请求访问控制"></a>1.1.1 简单的请求访问控制</h3><p>某些请求不会触发CORS预检请求(具体后面会说，其实就是不会发起options请求)。本文称这样的请求为“简单请求”，请注意，该术语并不属于Fetch（其中定义了CORS）规范。若请求满足所有下述条件，则该请求可视为“简单请求”：</p><ul><li>使用下列方法之一：<ul><li>GET</li><li>HEAD</li><li>POST</li></ul></li><li>Fetch规范定义了对CORS安全的首部字段集合，不得人为设置该集合之外的其他首部字段。该集合为：<ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type （需要注意额外的限制）</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ul></li><li>Content-Type的值仅限于下列三者之一：<ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li></ul><p>如果我们不做任何配置，那么由于跨域原因，浏览器将会对我们请求做报错处理(<code>注意：并不是服务器请求错误，是请求成功了并且返回了，但是浏览器做了报错处理</code>)。具体请求抓包如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求报文</span></span><br><span class="line">GET /?xx=<span class="number">1</span>&amp;yy=<span class="number">2</span> HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5389</span></span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Origin: http:<span class="comment">//localhost:8081</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (iPhone; CPU iPhone OS <span class="number">10</span>_3 like Mac OS X) AppleWebKit/<span class="number">602.1</span><span class="number">.50</span> (KHTML, like Gecko) CriOS/<span class="number">56.0</span><span class="number">.2924</span><span class="number">.75</span> Mobile/<span class="number">14E5239</span>e Safari/<span class="number">602.1</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Referer: http://localhost:8081/</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//返回报文</span></span><br><span class="line"><span class="comment">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="comment">X-Powered-By: Express</span></span><br><span class="line"><span class="comment">Content-Type: application/json; charset=utf-8</span></span><br><span class="line"><span class="comment">Content-Length: 86</span></span><br><span class="line"><span class="comment">ETag: W/"56-Zk2w81kjYiGkrYmIocyhxiyDmXY"</span></span><br><span class="line"><span class="comment">Date: Wed, 07 Feb 2018 11:33:20 GMT</span></span><br><span class="line"><span class="comment">Proxy-Connection: Keep-alive</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;"name":"隔壁老黄","password":"123456","requestParams":"&#123;\"xx\":\"1\",\"yy\":\"2\"&#125;"&#125;</span></span><br></pre></td></tr></table></figure><p>从上面的报文来看，我们的请求没有任何问题。但是浏览器却给我报了一个错误，就是因为跨域的原因。</p><p><img src="/assets/postImages/2018020701.png" alt="img"></p><p>出现这个的原因是我的服务器没有对跨域支持。我只需要在服务器添加对简单跨域的支持就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=============服务端代码如下============</span></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//==============添加对简单跨域的支持======================</span></span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER'</span>);</span><br><span class="line">    <span class="comment">// res.header('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS');</span></span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">        res.send(<span class="number">200</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//get请求</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">//console.log(req.query);</span></span><br><span class="line">    res.json(&#123;</span><br><span class="line">        name: <span class="string">"隔壁老黄"</span>,</span><br><span class="line">        password: <span class="string">"123456"</span>,</span><br><span class="line">        <span class="string">"requestParams"</span>:<span class="built_in">JSON</span>.stringify(req.query)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//=============返回的报文如下============================</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Headers: Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER</span><br><span class="line">Content-Type: application/json; charset=utf<span class="number">-8</span></span><br><span class="line">Content-Length: <span class="number">86</span></span><br><span class="line">ETag: W/<span class="string">"56-Zk2w81kjYiGkrYmIocyhxiyDmXY"</span></span><br><span class="line"><span class="built_in">Date</span>: Wed, <span class="number">07</span> Feb <span class="number">2018</span> <span class="number">11</span>:<span class="number">42</span>:<span class="number">30</span> GMT</span><br><span class="line"><span class="built_in">Proxy</span>-Connection: Keep-alive</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"隔壁老黄"</span>,<span class="string">"password"</span>:<span class="string">"123456"</span>,<span class="string">"requestParams"</span>:<span class="string">"&#123;\"xx\":\"1\",\"yy\":\"2\"&#125;"</span>&#125;</span><br></pre></td></tr></table></figure><p>从上面的返回报文我们可以发现。返回的响应头多了<code>Access-Control-Allow-Origin</code>和<code>Access-Control-Allow-Headers</code>其中。他们的意义如下：</p><ul><li><code>Access-Control-Allow-Origin</code>根据请求头中的<code>Origin</code>和<code>Access-Control-Allow-Origin</code>就能完成最简单的访问控制。本例中，服务端返回的 Access-Control-Allow-Origin: * 表明，该资源可以被任意外域访问。如果服务端仅允许来自 <a href="http://foo.example" target="_blank" rel="noopener">http://foo.example</a> 的访问，则<code>Access-Control-Allow-Origin: http://foo.example</code>。</li><li><code>Access-Control-Allow-Headers</code>表示允许用户自己指定的请求头。其中<code>X-PINGOTHER</code>是我添加的自定义请求头。如果网络请求有这个请求域，但是服务端没有对这个请求域包含，同样也违反CORS导致失败。</li><li><code>Access-Control-Allow-Methods</code>表示服务器允许的跨域请求方法列表。意味着在列表里面的方法都是支持的。</li><li><code>if (req.method == &#39;OPTIONS&#39;) {</code>这句话的意思是如果是<code>OPTIONS</code>请求，也就是跨域请求的预检。则返回<code>200</code>(http状态码，表示请求成功)表示服务端允许当前的跨域请求。如果是非简单跨域(后面会解释)浏览器自己调用的，我们并不需要手动调用。</li></ul><h3 id="1-1-2-非简单的请求访问控制"><a href="#1-1-2-非简单的请求访问控制" class="headerlink" title="1.1.2 非简单的请求访问控制"></a>1.1.2 非简单的请求访问控制</h3><p>当请求满足下述任一条件时，即应首先发送预检请求,比如说<code>POST</code>请求会首先发起一个<code>OPTIONS(预检)</code>请求：</p><ul><li>使用了下面任一HTTP方法：<ul><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li><li>PATCH</li></ul></li><li>人为设置了对CORS安全的首部字段集合之外的其他首部字段。该集合为：<ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ul></li><li>Content-Type 的值不属于下列之一:<ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/plain</li></ul></li></ul><p>下面我会做一个非简单的跨域请求访问控制，我会制定自定义的请求头域和<code>content-type</code>来触发预检CORS。具体客户端代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="keyword">if</span> (httpRequest) &#123;</span><br><span class="line">        httpRequest.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(httpRequest.responseText);</span><br><span class="line">                    <span class="keyword">let</span> response = <span class="built_in">JSON</span>.parse(httpRequest.responseText);</span><br><span class="line">                    resolve(&#123;<span class="attr">err</span>:<span class="literal">null</span>,<span class="attr">data</span>:response&#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    reject(&#123;<span class="attr">err</span>:&#123;<span class="attr">message</span>:<span class="string">"请求出错"</span>&#125;,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        httpRequest.open(<span class="string">'POST'</span>,url,<span class="literal">true</span>);</span><br><span class="line">        httpRequest.setRequestHeader(<span class="string">'X-PINGOTHER'</span>, <span class="string">'pingpong'</span>);</span><br><span class="line">        httpRequest.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/xml'</span>);</span><br><span class="line">        <span class="keyword">let</span> body = <span class="string">'&lt;?xml version="1.0"?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;'</span>;</span><br><span class="line">        httpRequest.send(body);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(&#123;<span class="attr">err</span>:&#123;<span class="attr">message</span>:<span class="string">"没有AJAX环境"</span>&#125;,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">httpRequest.send(body);</span><br></pre></td></tr></table></figure><p>整个网络请求的过程如下图,首先有一个<code>OPTIONS</code>请求，返回<code>200</code>以后，然后再发送我们自己需要的<code>POST</code>请求：</p><p><img src="/assets/postImages/2018020702.png" alt="img"></p><p>两个网络请求的报文如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//================OPSTIONS请求报文=================</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5389</span></span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Origin: http:<span class="comment">//localhost:8081</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (iPhone; CPU iPhone OS <span class="number">10</span>_3 like Mac OS X) AppleWebKit/<span class="number">602.1</span><span class="number">.50</span> (KHTML, like Gecko) CriOS/<span class="number">56.0</span><span class="number">.2924</span><span class="number">.75</span> Mobile/<span class="number">14E5239</span>e Safari/<span class="number">602.1</span></span><br><span class="line">Access-Control-Request-Headers: content-type,x-pingother</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7</span></span><br><span class="line"><span class="comment">//================OPSTIONS响应报文=================</span></span><br><span class="line"><span class="comment">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="comment">X-Powered-By: Express</span></span><br><span class="line"><span class="comment">Access-Control-Allow-Origin: *</span></span><br><span class="line"><span class="comment">Access-Control-Allow-Headers: Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER</span></span><br><span class="line"><span class="comment">Content-Type: text/plain; charset=utf-8</span></span><br><span class="line"><span class="comment">Content-Length: 2</span></span><br><span class="line"><span class="comment">ETag: W/"2-nOO9QiTIwXgNtWtBJezz8kv3SLc"</span></span><br><span class="line"><span class="comment">Date: Wed, 07 Feb 2018 12:23:42 GMT</span></span><br><span class="line"><span class="comment">Proxy-Connection: Keep-alive</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">OK</span></span><br><span class="line"><span class="comment">//===============POST请求报文=================</span></span><br><span class="line"><span class="comment">POST / HTTP/1.1</span></span><br><span class="line"><span class="comment">Host: 127.0.0.1:5389</span></span><br><span class="line"><span class="comment">Content-Length: 55</span></span><br><span class="line"><span class="comment">Pragma: no-cache</span></span><br><span class="line"><span class="comment">Cache-Control: no-cache</span></span><br><span class="line"><span class="comment">X-PINGOTHER: pingpong</span></span><br><span class="line"><span class="comment">Origin: http://localhost:8081</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.75 Mobile/14E5239e Safari/602.1</span></span><br><span class="line"><span class="comment">Content-Type: application/xml</span></span><br><span class="line"><span class="comment">Accept: */</span>*</span><br><span class="line">Referer: http:<span class="comment">//localhost:8081/</span></span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>,zh-TW;q=<span class="number">0.8</span>,en;q=<span class="number">0.7</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;<span class="xml"><span class="tag">&lt;<span class="name">person</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>Arun<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span></span><br><span class="line"><span class="comment">//================POST响应报文=================</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Headers: Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER</span><br><span class="line">Content-Type: application/json; charset=utf<span class="number">-8</span></span><br><span class="line">Content-Length: <span class="number">40</span></span><br><span class="line">ETag: W/<span class="string">"28-gEkkRvjiOndybUpThNV94uAc6yA"</span></span><br><span class="line"><span class="built_in">Date</span>: Wed, <span class="number">07</span> Feb <span class="number">2018</span> <span class="number">12</span>:<span class="number">23</span>:<span class="number">42</span> GMT</span><br><span class="line"><span class="built_in">Proxy</span>-Connection: Keep-alive</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"隔壁老黄"</span>,<span class="string">"password"</span>:<span class="string">"123456"</span>&#125;</span><br></pre></td></tr></table></figure><p>上面四个报文的解释如下：</p><ul><li><code>OPTIONS请求报文</code>中的<code>Access-Control-Request-Method</code>表示客户端发起的跨域请求是<code>POST</code>,<code>Origin</code>表示客户端的地址,<code>Access-Control-Request-Headers</code>表示客户端请求用户手动修改过的请求头域。</li><li><code>OPTIONS响应报文</code>中的<code>Access-Control-Allow-Origin:*</code>表示允许所有客户端做跨域访问。<code>Access-Control-Allow-Headers</code>表示支持用户自定义的请求头域的集合。如果客户端自己处理的请求头域超过了这个范围<code>我这里的content-type,x-pingother</code>，则违反了CORS规则导致请求失败。</li><li><code>POST请求报文</code>没事好解释的，关注<code>Origin</code>,<code>X-PINGOTHER</code>,<code>Content-Type</code>这三个关键域的值就可以了。</li><li><code>POST响应报文</code>的响应头和<code>OPTIONS响应报文</code>一样的，不一样的就是响应体。后者返回我们真正需要的数据。</li></ul><h3 id="1-1-3-cookie和Access-Control-Allow-Credentials"><a href="#1-1-3-cookie和Access-Control-Allow-Credentials" class="headerlink" title="1.1.3 cookie和Access-Control-Allow-Credentials"></a>1.1.3 cookie和Access-Control-Allow-Credentials</h3><p>还有一点是必须要强调额，就是cookie。我们通常使用它来记录一些认证信息，但是由于跨域的原因，<code>CORS</code>对于cookie的使用就更加严格了。而且好像我们并不能获取到cookie(至少我想了各种办法也没有找到通过XMLHttpRequest获取跨域cookie的原因)。貌似是从协议上就禁止了。那如果我们需要在跨域服务器上使用cookie的话，需要做那些配置呢？这就需要借助<code>Access-Control-Allow-Credentials</code>。下面我就通过一个真实案列来讲解跨域的cookie。下面是一个带cookie的跨域网络请求报文：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=================OPTIONS请求报文=========================</span></span><br><span class="line">OPTIONS / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5389</span></span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Origin: http:<span class="comment">//localhost:8081</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (iPhone; CPU iPhone OS <span class="number">10</span>_3 like Mac OS X) AppleWebKit/<span class="number">602.1</span><span class="number">.50</span> (KHTML, like Gecko) CriOS/<span class="number">56.0</span><span class="number">.2924</span><span class="number">.75</span> Mobile/<span class="number">14E5239</span>e Safari/<span class="number">602.1</span></span><br><span class="line">Access-Control-Request-Headers: content-type,x-pingother</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7</span></span><br><span class="line"><span class="comment">//=================OPTIONS响应报文=========================</span></span><br><span class="line"><span class="comment">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="comment">X-Powered-By: Express</span></span><br><span class="line"><span class="comment">Access-Control-Allow-Origin: http://localhost:8081</span></span><br><span class="line"><span class="comment">Access-Control-Allow-Headers: Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER</span></span><br><span class="line"><span class="comment">Access-Control-Allow-Methods: PUT, POST, GET, DELETE, OPTIONS</span></span><br><span class="line"><span class="comment">Access-Control-Expose-Headers: token</span></span><br><span class="line"><span class="comment">Access-Control-Allow-Credentials: true</span></span><br><span class="line"><span class="comment">Access-Control-Max-Age: 3600</span></span><br><span class="line"><span class="comment">Content-Type: text/plain; charset=utf-8</span></span><br><span class="line"><span class="comment">Content-Length: 2</span></span><br><span class="line"><span class="comment">ETag: W/"2-nOO9QiTIwXgNtWtBJezz8kv3SLc"</span></span><br><span class="line"><span class="comment">Date: Thu, 08 Feb 2018 06:42:55 GMT</span></span><br><span class="line"><span class="comment">Proxy-Connection: Keep-alive</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">OK</span></span><br><span class="line"><span class="comment">//=================POST请求报文=========================</span></span><br><span class="line"><span class="comment">POST / HTTP/1.1</span></span><br><span class="line"><span class="comment">Host: 127.0.0.1:5389</span></span><br><span class="line"><span class="comment">Content-Length: 55</span></span><br><span class="line"><span class="comment">Pragma: no-cache</span></span><br><span class="line"><span class="comment">Cache-Control: no-cache</span></span><br><span class="line"><span class="comment">X-PINGOTHER: pingpong</span></span><br><span class="line"><span class="comment">Origin: http://localhost:8081</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.75 Mobile/14E5239e Safari/602.1</span></span><br><span class="line"><span class="comment">Content-Type: application/xml</span></span><br><span class="line"><span class="comment">Accept: */</span>*</span><br><span class="line">Referer: http:<span class="comment">//localhost:8081/</span></span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>,zh-TW;q=<span class="number">0.8</span>,en;q=<span class="number">0.7</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;<span class="xml"><span class="tag">&lt;<span class="name">person</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>Arun<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span></span><br><span class="line"><span class="comment">//=================POST响应报文=========================</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Access-Control-Allow-Origin: http:<span class="comment">//localhost:8081</span></span><br><span class="line">Access-Control-Allow-Headers: Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER</span><br><span class="line">Access-Control-Allow-Methods: PUT, POST, GET, DELETE, OPTIONS</span><br><span class="line">Access-Control-Expose-Headers: token</span><br><span class="line">Access-Control-Allow-Credentials: <span class="literal">true</span></span><br><span class="line">Access-Control-Max-Age: <span class="number">3600</span></span><br><span class="line"><span class="built_in">Set</span>-Cookie: Thu Feb <span class="number">08</span> <span class="number">2018</span> <span class="number">14</span>:<span class="number">42</span>:<span class="number">55</span> GMT+<span class="number">0800</span> (CST)=%E9%BB%<span class="number">84</span>%E6%<span class="number">88</span>%<span class="number">90</span>%E9%<span class="number">83</span>%BD; Path=<span class="regexp">/</span></span><br><span class="line"><span class="regexp">token: Thu Feb 08 2018 14:42:55 GMT+0800 (CST)</span></span><br><span class="line"><span class="regexp">Content-Type: application/</span>json; charset=utf<span class="number">-8</span></span><br><span class="line">Content-Length: <span class="number">40</span></span><br><span class="line">ETag: W/<span class="string">"28-gEkkRvjiOndybUpThNV94uAc6yA"</span></span><br><span class="line"><span class="built_in">Date</span>: Thu, <span class="number">08</span> Feb <span class="number">2018</span> <span class="number">06</span>:<span class="number">42</span>:<span class="number">55</span> GMT</span><br><span class="line"><span class="built_in">Proxy</span>-Connection: Keep-alive</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"隔壁老黄"</span>,<span class="string">"password"</span>:<span class="string">"123456"</span>&#125;</span><br></pre></td></tr></table></figure><p>从上面的的带cookie信息的非简单跨域请求，我们发现和前面不带cookie的请求有几个区别：</p><ul><li><code>POST请求报文</code>没啥好说的，只需要关注<code>Origin</code>就可以了。</li><li><code>POST响应报文</code>中最关键的1 <code>Access-Control-Allow-Credentials: true</code>，只有他为true的时候，表示服务器允许客户端的请求带cookie，否则不允许带cookie。2 <code>Access-Control-Allow-Origin: http://localhost:8081</code>的值不能是<code>*</code>了，必须是特定的客户端域名一个或者多个。只有在满足这两个条件的情况下，才支持跨域cookie的携带。</li><li><code>POST响应报文</code>的响应报文中，就包含了<code>Set-Cookie</code>和<code>Access-Control-Allow-Credentials</code>这两个域。</li><li>如果网络请求要携带cookie信息。对于客户端需要在创建<code>XMLHttpRequest</code>对象的时候，通过<code>httpRequest.withCredentials = true;</code>来配置。对于服务端，需要在响应头中通过<code>res.header(&#39;Access-Control-Allow-Credentials&#39;,true);</code>来配置。只有客户端和服务端都配置好以后，才能使用跨域cookie。</li></ul><p>由于<code>CORS</code>标准的限制，在客户端很多响应域都是不能获取到的。比如cookie我们就不能通过<code>getResponseHeader</code>或者<code>getAllResponseHeaders</code>获取，只能获取到协议允许我们获取到的与。我这里试了一下，通过<code>getAllResponseHeaders</code>只能获取如下几个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">content-type: application/json; charset=utf<span class="number">-8</span></span><br><span class="line">token: Thu Feb <span class="number">08</span> <span class="number">2018</span> <span class="number">14</span>:<span class="number">55</span>:<span class="number">24</span> GMT+<span class="number">0800</span> (CST)</span><br></pre></td></tr></table></figure><p>其中<code>content-type</code>是系统带的域,是协议允许获取的。<code>token</code>就是我自己定义，如果我想要获取到这个域。就需要服务端在响应头里面通过<code>Access-Control-Expose-Headers: token</code>来控制。比如我这里表示只允许获取到自定义的<code>token</code>域。由于我们并不能获取到cookie，所以可以通过自定义的域来存放认证信息。</p><p>下面我将贴出我所有客户端和服务端的最关键的代码：</p><ul><li>客户端(自己实现的XMLHpptRequest对象)：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建XMLHttpRequest对象的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAjax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> httpRequest;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHTTPRequest) &#123;</span><br><span class="line">        httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</span><br><span class="line">        httpRequest = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> httpRequest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建get请求。返回一个promise对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>请求地址 url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>请求参数，可以使字符串或者对象 params </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>配置，这里暂时没有实现 config </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url,params,config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="keyword">if</span> (httpRequest) &#123;</span><br><span class="line">                <span class="keyword">let</span> query;</span><br><span class="line">                <span class="comment">//拼接get请求的query部分</span></span><br><span class="line">                <span class="keyword">if</span> (params <span class="keyword">instanceof</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">                    query = <span class="string">"?"</span> + params;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(params <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">                    query = <span class="string">"?"</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(params)) &#123;</span><br><span class="line">                        query = query + key + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(value) + <span class="string">"&amp;"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    query= query.substring(<span class="number">0</span>,query.length - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//处理网络返回</span></span><br><span class="line">                httpRequest.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//网络请求完成</span></span><br><span class="line">                    <span class="keyword">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</span><br><span class="line">                        <span class="comment">//请求成功</span></span><br><span class="line">                        <span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="comment">// console.log(httpRequest.responseText);</span></span><br><span class="line">                            <span class="keyword">let</span> response = <span class="built_in">JSON</span>.parse(httpRequest.responseText);</span><br><span class="line">                            resolve(&#123;<span class="attr">err</span>:<span class="literal">null</span>,<span class="attr">data</span>:response&#125;);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            reject(&#123;<span class="attr">err</span>:&#123;<span class="attr">message</span>:<span class="string">"请求出错"</span>&#125;,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//把query添加到url后面</span></span><br><span class="line">                <span class="keyword">if</span> (query) &#123;</span><br><span class="line">                    url = url + query;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="comment">//发送请求</span></span><br><span class="line">                httpRequest.open(<span class="string">'GET'</span>,url,<span class="literal">true</span>);</span><br><span class="line">                httpRequest.send();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(&#123;<span class="attr">err</span>:&#123;<span class="attr">message</span>:<span class="string">"没有AJAX环境"</span>&#125;,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(&#123;<span class="attr">err</span>:error,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义XMLHttpRequest的POST请求，返回一个Promise对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>请求的地址 url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>没用 params </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>没用 config </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url,params,config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="comment">//让请求支持cookie信息的携带</span></span><br><span class="line">            httpRequest.withCredentials = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (httpRequest) &#123;</span><br><span class="line">                httpRequest.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//获取响应域</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"========cookie======="</span>,httpRequest.getAllResponseHeaders(),httpRequest.getResponseHeader(<span class="string">"token"</span>));</span><br><span class="line">                    <span class="keyword">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(httpRequest.responseText);</span><br><span class="line">                            <span class="keyword">let</span> response = <span class="built_in">JSON</span>.parse(httpRequest.responseText);</span><br><span class="line">                            resolve(&#123;<span class="attr">err</span>:<span class="literal">null</span>,<span class="attr">data</span>:response&#125;);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            reject(&#123;<span class="attr">err</span>:&#123;<span class="attr">message</span>:<span class="string">"请求出错"</span>&#125;,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//post请求</span></span><br><span class="line">                httpRequest.open(<span class="string">'POST'</span>,url,<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//添加自定义的请求头域</span></span><br><span class="line">                httpRequest.setRequestHeader(<span class="string">'X-PINGOTHER'</span>, <span class="string">'pingpong'</span>);</span><br><span class="line">                <span class="comment">//设置body的类型为xml</span></span><br><span class="line">                httpRequest.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/xml'</span>);</span><br><span class="line">                <span class="comment">//post请求的请求体</span></span><br><span class="line">                <span class="keyword">let</span> body = <span class="string">'&lt;?xml version="1.0"?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;'</span>;</span><br><span class="line">                <span class="comment">//发送请求</span></span><br><span class="line">                httpRequest.send(body);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(&#123;<span class="attr">err</span>:&#123;<span class="attr">message</span>:<span class="string">"没有AJAX环境"</span>&#125;,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(&#123;<span class="attr">err</span>:error,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">get</span>,post</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户端(如何使用)：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">get</span>,post&#125; from '../XMLHttpRequest/request.js';</span><br><span class="line"></span><br><span class="line">//<span class="keyword">get</span>请求的发送</span><br><span class="line">async getRequest() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;err,data&#125; = <span class="keyword">await</span> <span class="keyword">get</span>('http://127.0.0.1:5389', &#123;<span class="string">"xx"</span>: <span class="number">1</span>,<span class="string">"yy"</span>: <span class="number">2</span>&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"出错了"</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(err, data);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//post请求的发送</span></span><br><span class="line"><span class="keyword">async</span> postRequest() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;err,data&#125; = <span class="keyword">await</span> post(<span class="string">'http://127.0.0.1:5389'</span>, &#123;<span class="string">"xx"</span>: <span class="number">1</span>,<span class="string">"yy"</span>: <span class="number">2</span>&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"出错了"</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(err, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>服务端的实现代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对所有的网络请求做跨域处理</span></span><br><span class="line">    app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//允许跨域的客户端域名</span></span><br><span class="line">        res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://localhost:8081'</span>);</span><br><span class="line">        <span class="comment">//允许客户端携带的请求头域，包括自定义的请求头域，否则会失败。</span></span><br><span class="line">        res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER'</span>);</span><br><span class="line">        <span class="comment">//允许客户端发起的请求体方法。</span></span><br><span class="line">        res.header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT, POST, GET, DELETE, OPTIONS'</span>);</span><br><span class="line">        <span class="comment">//允许客户端访问的响应头域</span></span><br><span class="line">        res.header(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'token'</span>);</span><br><span class="line">        <span class="comment">//允许携带cookie信息</span></span><br><span class="line">        res.header(<span class="string">'Access-Control-Allow-Credentials'</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//CORS认证的有效期</span></span><br><span class="line">        res.header(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">        <span class="keyword">if</span> (req.method == <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">            res.send(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//get请求</span></span><br><span class="line">    app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            name: <span class="string">"隔壁老黄"</span>,</span><br><span class="line">            password: <span class="string">"123456"</span>,</span><br><span class="line">            <span class="string">"requestParams"</span>:<span class="built_in">JSON</span>.stringify(req.query)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//post请求</span></span><br><span class="line">    app.post(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        <span class="comment">//设置cookie，只有客户端和服务端都配置好以后才能成功</span></span><br><span class="line">        res.cookie((<span class="keyword">new</span> <span class="built_in">Date</span>()), <span class="string">"隔壁老黄"</span>);</span><br><span class="line">        <span class="comment">//设置自定义的响应头域，可以存放认证信息或者响应给客户端的信息。</span></span><br><span class="line">        res.header(<span class="string">"token"</span>,(<span class="keyword">new</span> <span class="built_in">Date</span>()));</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            name: <span class="string">"隔壁老黄"</span>,</span><br><span class="line">            password: <span class="string">"123456"</span>,</span><br><span class="line">            <span class="string">"requestParams"</span>:<span class="built_in">JSON</span>.stringify(req.body)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>第一部分到此结束。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CORS,XMLHttpRequest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端JSONP的原理与实现以及XSS,CSRF的相亲相爱</title>
      <link href="/2017/12/27/%E5%89%8D%E7%AB%AFJSONP%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8AXSS,CSRF%E7%9A%84%E7%9B%B8%E4%BA%B2%E7%9B%B8%E7%88%B1/"/>
      <url>/2017/12/27/%E5%89%8D%E7%AB%AFJSONP%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8AXSS,CSRF%E7%9A%84%E7%9B%B8%E4%BA%B2%E7%9B%B8%E7%88%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JSONP的原理与实现"><a href="#1-JSONP的原理与实现" class="headerlink" title="1 JSONP的原理与实现"></a>1 JSONP的原理与实现</h1><hr><h2 id="1-1-同源策略"><a href="#1-1-同源策略" class="headerlink" title="1.1 同源策略"></a>1.1 同源策略</h2><p>前端跨域是每个前端人绕不过的坎，也是必须了解的一个知识点。我记得第一次遇到前端跨域这个坑的时候，真是无语到极点，对于一个移动端出身的人来说，觉得这个玩意无可理喻。但是后来慢慢了解，觉得前端的同源策略是非常有必要的。同源策略就是浏览器默认让<code>www.baidu.com</code>不能加载来自<code>www.google.com</code>的数据。对于现在来说，所有数据都是同源的可能性基本上很小，比如我们公司静态资源<code>www.image.com</code>和前端资源<code>www.htmlcss.com</code>的CDN路径都不一样，前端获取后台数据<code>www.apidata.com</code>又是另一个地址。如何解决这个坑呢？我们公司通过两种方式来避开。具体就是通过设置<code>Access-Control-Allow-Origin</code>来做<code>POST</code>请求，用<code>JSONP</code>来实现<code>GET</code>请求,因为<code>JSONP</code>只能实现<code>GET</code>请求。</p><h3 id="1-1-1-通过Access-Control-Allow-Origin支持跨域"><a href="#1-1-1-通过Access-Control-Allow-Origin支持跨域" class="headerlink" title="1.1.1 通过Access-Control-Allow-Origin支持跨域"></a>1.1.1 通过Access-Control-Allow-Origin支持跨域</h3><p>有些人肯定就纳闷了，我就喜欢跨域，我就不关注安全，难道就没有办法了吗？当然是否定的。你需要做的，只是让服务器在返回的header里面加上<code>Access-Control-Allow-Origin</code>这个域就可以了。这样浏览器在接收到服务器返回的数据，就不会因为违反同源策略限制你拿到数据了。下面就用抓包来具体看一下：</p><p>当我打开<a href="https://pages.ctrip.com/ztrip/market/goldshare/?shareKey=aUuRkqYuXwjCmAS5Vef0btZmexmKwG5z&amp;channel=ZXA_anzhi&amp;partner=zhixing" target="_blank" rel="noopener">这里点开h5链接</a>这个链接的时候。会去<code>https//m.ctrip.com</code>通过<code>POST</code>请求数据，这里就用到了跨域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">:method: POST</span><br><span class="line">:authority: m.ctrip.com</span><br><span class="line">:scheme: https</span><br><span class="line">:path: <span class="regexp">/restapi/</span>xyz</span><br><span class="line">content-length: <span class="number">290</span></span><br><span class="line">pragma: no-cache</span><br><span class="line">cache-control: no-cache</span><br><span class="line">accept: application/json</span><br><span class="line">origin: https:<span class="comment">//pages.ctrip.com</span></span><br><span class="line">user-agent: Mozilla/<span class="number">5.0</span> (Linux; Android <span class="number">6.0</span>; Nexus <span class="number">5</span> Build/MRA58N) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">63.0</span><span class="number">.3239</span><span class="number">.84</span> Mobile Safari/<span class="number">537.36</span></span><br><span class="line">content-type: application/json;charset=UTF<span class="number">-8</span></span><br><span class="line">referer: https:<span class="comment">//pages.ctrip.com/ztrip</span></span><br><span class="line">accept-encoding: gzip, deflate, br</span><br><span class="line">accept-language: zh-CN,zh;q=<span class="number">0.9</span>,zh-TW;q=<span class="number">0.8</span>,en;q=<span class="number">0.7</span></span><br><span class="line"></span><br><span class="line">&#123;请求体，post请求的参数&#125;</span><br></pre></td></tr></table></figure><p>服务器返回的响应头如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">:status: <span class="number">200</span></span><br><span class="line">server: Tengine/<span class="number">2.1</span><span class="number">.2</span></span><br><span class="line">date: Thu, <span class="number">28</span> Dec <span class="number">2017</span> <span class="number">11</span>:<span class="number">01</span>:<span class="number">29</span> GMT</span><br><span class="line">content-type: application/json;charset=utf<span class="number">-8</span></span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">access-control-expose-headers: RootMessageId</span><br><span class="line">cache-control: private</span><br><span class="line">vary: Accept-Encoding</span><br><span class="line">clogging_trace_id: <span class="number">8196881814119217567</span></span><br><span class="line">rootmessageid: <span class="number">921812</span><span class="number">-0</span>a0e0de1<span class="number">-420683</span><span class="number">-219524</span></span><br><span class="line">x-powered-by: CTrip/SOA2<span class="number">.0</span> Win32NT/.NET</span><br><span class="line">soa20-response-status: Success</span><br><span class="line">x-aspnet-version: <span class="number">4.0</span><span class="number">.30319</span></span><br><span class="line">x-powered-by: ASP.NET</span><br><span class="line">x-gate: ctrip-gate</span><br><span class="line">x-gate-instance: unknown</span><br><span class="line">x-originating-url: http:<span class="comment">//m.ctrip.com/xyz</span></span><br><span class="line">x-gate-remote-call-cost: <span class="number">9</span></span><br><span class="line">content-encoding: gzip</span><br><span class="line">slb-http-protocol-version: HTTP/<span class="number">2.0</span></span><br><span class="line">access-control-expose-headers: slb-http-protocol-version</span><br><span class="line"></span><br><span class="line">&#123;服务器返回的有用数据&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，这里有<code>access-control-allow-origin</code>这个响应域就解决了问题。这个方法是最简单的，而且前端<code>POST</code>请求最常见的方法(不确定还有其他好的解决方案)。这种方式最好就是通过他获取服务数据，不要加载js脚本。小心被别人注入攻击。</p><h3 id="1-1-2-JSONP的基本原理"><a href="#1-1-2-JSONP的基本原理" class="headerlink" title="1.1.2 JSONP的基本原理"></a>1.1.2 JSONP的基本原理</h3><p>讲<code>JSONP</code>之前，我先亮出一段常见的代码。下面这个方法主要就是动态的创建一个<code>script</code>标签，然后设置src属性。并且添加到<code>document</code>的第一个<code>script</code>标签之前。也就是说动态去加载一个<code>javscript</code>脚本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadJs</span>(<span class="params">src, attrs = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> ref = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'script'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">//创建一个scrpt标签</span></span><br><span class="line">        <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">        <span class="comment">//设置script标签的资源路径</span></span><br><span class="line">        script.src = src</span><br><span class="line">        script.async = <span class="literal">true</span></span><br><span class="line">        <span class="comment">//设置属性</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> attrs) &#123;</span><br><span class="line">            script.setAttribute(key, attrs[key])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//script标签加入document中</span></span><br><span class="line">        ref.parentNode.insertBefore(script, ref)</span><br><span class="line">        script.onload = resolve</span><br><span class="line">        script.onerror = reject</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最有意思的是<code>script</code>标签的<code>src</code>不受跨域限制。也就是说<code>wwww.baidu.com</code>的文件可以通过上面这个方法无限制的加载<code>www.google.com</code>的js文件。这个就是<code>JSONP</code>的实现的最基本原理。每一个<code>JSONP</code>请求就是动态的创建<code>script</code>元素，然后通过src属性去加载数据，而且一般是通过callback这个回调方法来返回服务器数据，然后再把<code>script</code>标签移除。如此周而复始的循环，想想都累啊。下面看一个JSON的标准格式,服务器会获取到<code>callback</code>这个回调方法。然后通过<code>方法调用</code>的方式把数据返回来，也就是执行<code>callbackFun</code>方法。<code>serverdata</code>就是服务器给客户端的数据。至于<code>callback</code>这个名字，可以自己定义，有客户端和服务器商量决定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callbackFun</span>(<span class="params">serverdata</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(serverdata)</span><br><span class="line">&#125;</span><br><span class="line">&lt;script src=<span class="string">"http://wwww.baidu.com/jsonp.js?callback=callbackFun"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-JSONP的实现"><a href="#1-2-JSONP的实现" class="headerlink" title="1.2 JSONP的实现"></a>1.2 JSONP的实现</h2><p>下面我会对<code>JSONP</code>做一个最基本的实现。使用<code>Vue</code>和<code>node.js</code>分别实现客户端和服务端,<a href="https://github.com/huang303513/NodejsVuePractice">代码地址</a>。</p><p>首先我们先看客户端的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取header的第一个子元素</span></span><br><span class="line"><span class="keyword">let</span> container = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeid</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> possible = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        text += possible.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * possible.length));</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsonp请求的实现。返回一个promise对象对应请求成功和请求失败。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*请求的url&#125;</span> </span>url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*请求的参数&#125;</span> </span>options </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonpRequest</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">                reject(&#123;</span><br><span class="line">                    err: <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"url不能为空"</span>),</span><br><span class="line">                    result: <span class="literal">null</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">document</span> || !global) &#123;</span><br><span class="line">                reject(&#123;</span><br><span class="line">                    err: <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"系统环境有问题"</span>),</span><br><span class="line">                    result: <span class="literal">null</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建一个script元素</span></span><br><span class="line">            <span class="keyword">let</span> scriptNode = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">            <span class="comment">//请求参数</span></span><br><span class="line">            <span class="keyword">let</span> data = options || &#123;&#125;;</span><br><span class="line">            <span class="comment">//回调函数的具体值，服务器和客户端就根据这个方法名来确定请求与返回数据之间的对应。</span></span><br><span class="line">            <span class="keyword">let</span> fnName = <span class="string">"jsonp"</span> + makeid();</span><br><span class="line">            <span class="comment">// 把callback加入请求参数中</span></span><br><span class="line">            data[<span class="string">"callback"</span>] = fnName;</span><br><span class="line">            <span class="comment">// 拼接url</span></span><br><span class="line">            <span class="keyword">var</span> params = [];</span><br><span class="line">            <span class="comment">//参数的拼接与处理</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(data)) &#123;</span><br><span class="line">                params.push(<span class="built_in">encodeURIComponent</span>(key) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(data[key]));</span><br><span class="line">            &#125;</span><br><span class="line">            url = (url.indexOf(<span class="string">"?"</span>)) &gt; <span class="number">0</span> ? (url + <span class="string">"&amp;"</span>) : (url + <span class="string">"?"</span>);</span><br><span class="line">            url += params.join(<span class="string">"&amp;"</span>);</span><br><span class="line">            <span class="comment">//把处理好的url赋值给script元素的src属性。</span></span><br><span class="line">            scriptNode.src = url;</span><br><span class="line">            <span class="comment">// 把回调函数暴露为全局方法。script加载回来以后，会执行fnName对应的这个方法。</span></span><br><span class="line">            global[fnName] = <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>) </span>&#123;</span><br><span class="line">                    resolve(&#123;</span><br><span class="line">                        err: <span class="literal">null</span>,</span><br><span class="line">                        result: ret</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="comment">//请求完成。删除script元素</span></span><br><span class="line">                    container.removeChild(scriptNode);</span><br><span class="line">                    <span class="comment">//全局对象中删除已经请求完成的回调方法</span></span><br><span class="line">                    <span class="keyword">delete</span> global[fnName];</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// script元素遇到错误</span></span><br><span class="line">            scriptNode.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                reject(&#123;</span><br><span class="line">                    err: err,</span><br><span class="line">                    result: <span class="literal">null</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//删除script元素和全局回调方法</span></span><br><span class="line">                container.removeChild(scriptNode);</span><br><span class="line">                global[fnName] &amp;&amp; <span class="keyword">delete</span> global[fnName];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//指定元素类型</span></span><br><span class="line">            scriptNode.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">            <span class="comment">//把script元素添加到header元素中。到这里script元素就会自动加载src。也就是我们的请求发出去了。</span></span><br><span class="line">            container.appendChild(scriptNode)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="comment">//异常处理捕获</span></span><br><span class="line">            reject(&#123;</span><br><span class="line">                err: error,</span><br><span class="line">                result: <span class="literal">null</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> jsonpRequest;</span><br></pre></td></tr></table></figure><p>这段代码主要做了如下几件事：</p><ul><li>创建一个<code>script</code>标签元素，并且添加到<code>header</code>元素里面。</li><li>拼接<code>script</code>元素的<code>src</code>属性，其中必然好汉callback这个参数，服务端根据这个参数的值回调。</li><li>回调以后需要手动把<code>script</code>标签元素移除，并且删除全局的回调函数名。</li></ul><p>客户端的使用如下,是不是感觉简洁明了，比ES5的回调爽多了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jsonpRequest <span class="keyword">from</span> <span class="string">"../lib/jsonpRequest.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> sendJSONPRequest() &#123;</span><br><span class="line">    <span class="comment">//参数</span></span><br><span class="line">    <span class="keyword">let</span> params = &#123;</span><br><span class="line">        name: <span class="string">"老黄"</span>,</span><br><span class="line">        site: <span class="string">"www.huangchengdu.com"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.showLoading();</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">let</span> &#123;</span><br><span class="line">        err,</span><br><span class="line">        result</span><br><span class="line">    &#125; = <span class="keyword">await</span> jsonpRequest(</span><br><span class="line">        <span class="string">"https://www.huangchengdu.com/jsonp/jsonpRequest"</span>,</span><br><span class="line">        params</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//处理返回的数据</span></span><br><span class="line">    <span class="keyword">this</span>.hiddenLoading();</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        alert(err.message || <span class="string">"请求出错了"</span>);</span><br><span class="line">        <span class="keyword">this</span>.serverData.err = <span class="built_in">JSON</span>.stringify(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.serverData = result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端的实现如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> router = express.Router();</span><br><span class="line"><span class="comment">//JSONP请求</span></span><br><span class="line">router.get(<span class="string">'/jsonpRequest'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//console.log("=====================" + JSON.stringify(req.query));</span></span><br><span class="line">    <span class="comment">//获取name和site参数的值</span></span><br><span class="line">    <span class="keyword">let</span> name = req.query.name;</span><br><span class="line">    <span class="keyword">let</span> site = req.query.site;</span><br><span class="line">    <span class="comment">//拼接回调值</span></span><br><span class="line">    <span class="keyword">let</span> serverres = &#123;</span><br><span class="line">    serverReceive:&#123;</span><br><span class="line">    name:name,</span><br><span class="line">    site:site</span><br><span class="line">    &#125;,</span><br><span class="line">    serverSend:<span class="string">"hello,"</span> + name + <span class="string">".your site is https://"</span> + site</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回值。其实就是callback....()种种类型javascript字符串</span></span><br><span class="line">    res.end(req.query.callback + <span class="string">"("</span> + <span class="built_in">JSON</span>.stringify(serverres) + <span class="string">")"</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>服务端代码说明如下：</p><ul><li><code>res.end</code>是<code>express</code>表示对http请求返回。具体返回的数据类似于<code>callback随机数(服务端数据)</code>这种类型。</li><li>客户端在收到<code>callback随机数(服务端数据)</code>这个数据以后，会自动按照javascript脚本解析执行。具体就是一个全局方法调用，方法名是<code>callback随机数</code>,参数是<code>服务端数据</code>。这样就实现了服务端数据的回调。</li><li>客户端在global对象下面注册了<code>callback随机数</code>这个方法。具体代码是上面<code>global[fnName] = function(ret) {</code>这一行。</li><li><code>callback随机数</code>是服务端和客户端商量，具体可以自己决定，真实的时候类似于<code>callbacksuijishu</code>这种类型。</li></ul><h3 id="1-2-1-JSONP请求报文"><a href="#1-2-1-JSONP请求报文" class="headerlink" title="1.2.1 JSONP请求报文"></a>1.2.1 JSONP请求报文</h3><p><code>JSONP</code>本质上就是一个普通的<code>GET</code>请求。无非就是这个请求是通过<code>script</code>标签来发送的。而且请求参数里面必定会有一个<code>callback</code>参数。<br>下面我们具体抓包看一下我们的请求报文：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /jsonp/jsonpRequest?name=%E8%<span class="number">80</span>%<span class="number">81</span>%E9%BB%<span class="number">84</span>&amp;site=www.huangchengdu.com&amp;callback=jsonpiFuL4 HTTP/<span class="number">1.1</span></span><br><span class="line">Host: www.huangchengdu.com</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Connection: keep-alive</span></span><br><span class="line"><span class="comment">Cookie: session=s%3Anot8KTW5FiTLY0VNgrrKksXY96AE2kWT.hrQeyL%2BVjt8ICJjfFqoFdV8JV3lx0IsDntx%2B%2Bc%2FEM98</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/604.4.7 (KHTML, like Gecko) Version/11.0.2 Safari/604.4.7</span></span><br><span class="line"><span class="comment">Accept-Language: zh-cn</span></span><br><span class="line"><span class="comment">Referer: http://localhost:8081/</span></span><br><span class="line"><span class="comment">Accept-Encoding: br, gzip, deflate</span></span><br></pre></td></tr></table></figure><p>返回报文：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Server: nginx/<span class="number">1.6</span><span class="number">.2</span></span><br><span class="line"><span class="built_in">Date</span>: Fri, <span class="number">29</span> Dec <span class="number">2017</span> <span class="number">03</span>:<span class="number">26</span>:<span class="number">31</span> GMT</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: Keep-alive</span><br><span class="line"></span><br><span class="line">jsonpiFuL4(&#123;<span class="string">"serverReceive"</span>:&#123;<span class="string">"name"</span>:<span class="string">"èé»"</span>,<span class="string">"site"</span>:<span class="string">"www.huangchengdu.com"</span>&#125;,<span class="string">"serverSend"</span>:<span class="string">"hello,èé».your site is https://www.huangchengdu.com"</span>&#125;)</span><br></pre></td></tr></table></figure><p>从上面的报文我们可以返现。请求的<code>callback</code>参数的值和返回的响应体的名称是一样的。响应提就是一个普通的函数。服务器返回的数据作为函数的参数。</p><h1 id="2-XSS攻击"><a href="#2-XSS攻击" class="headerlink" title="2 XSS攻击"></a>2 XSS攻击</h1><p><code>XSS</code>的全称是<code>Cross-site scripting</code>,翻译过来就是<code>跨站脚本</code>。<code>script</code>可以跨域加载脚本这个特性，合理利用比如<code>JSONP</code>。如果不合理利用，比如某个坏人通过某种方式，让你的浏览器去加载恶意的<code>javascrpt</code>脚本，必然就会导致敏感信息被盗或者财务损失。最常见的就是<code>XSS</code>攻击，其实就是注入恶意脚本。真是凡事都有利有弊，就看如何使用了。常用的XSS攻击手段和目的有如下几种：</p><ul><li>盗用cookie，获取敏感信息。</li><li>利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。</li><li>利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、- 发私信等操作。</li><li>利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</li><li>在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDoS攻击的效果。</li></ul><p>如果某一个字符串里面有<code>var a = 1;&lt;script&gt;alert(&#39;我是你大爷&#39;)&lt;/script&gt;;var b = 2;</code>这种类型的字符串。而且我们刚好要通过<code>script</code>标签加载。那么他就会弹出一个<code>我是你大爷</code>。避免的方式就是把存在这种可能性的地方都处理过，如果包含类似<code>&lt;script&gt;</code>这种字符的脚本就处理掉或者干脆返回错误。目前最常见的预防操作有如下几种：</p><ul><li>将重要的cookie标记为http only,这样的话Javascript 中的document.cookie语句就不能获取到cookie了。</li><li>只允许用户输入我们期望的数据。例如:年龄的textbox中，只允许用户输入数字。 而数字之外的字符都过滤掉。</li><li>对数据进行Html Encode处理。</li><li>过滤或移除特殊的Html标签，例如:”script,iframe,for等”。</li><li>过滤JavaScript事件的标签。例如”onclick=”,”onfocus”等等。</li></ul><h1 id="3-CSRF攻击"><a href="#3-CSRF攻击" class="headerlink" title="3 CSRF攻击"></a>3 CSRF攻击</h1><p>这玩意我了解不多，也无法做出模拟操作。跨站请求伪造（英语：Cross-site request forgery），也被称为one-click attack或者session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。[1] 跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p><p>我的理解就是，比如你刚去淘宝买了东西，并且浏览器有你的<code>session</code>护着<code>cookie</code>之类的信息。然后你马上又进入一个不该去的网站，并且点击了里面的一个淘宝链接，然后在你不知情的情况下做一些违法操作。这样阿里后台是不知道的，因为你刚刚通过合法手段买了东西，从而达到在你不知情的情况下，而且淘宝也信任你的情况下，畏畏缩缩偷偷摸摸的干坏事。</p><h2 id="3-1-SCRF预防"><a href="#3-1-SCRF预防" class="headerlink" title="3.1 SCRF预防"></a>3.1 SCRF预防</h2><p>检查Referer字段,通过这个字段来判断用户是从那个地址跳转到当前地址的。HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。以上文银行操作为例，Referer字段地址通常应该是转账按钮所在的网页地址，应该也位于www.examplebank.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于www.examplebank.com之下，这时候服务器就能识别出恶意的访问。这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的Referer字段。虽然http协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其Referer字段的可能。</p><p>添加校验token,这个就最常见了，现在那个前端网站还不加一个验证码啊。不管你如何千变万化，你验证码中是用户数据的吧，而且现在好像越来越流行手机号码验证了。CSRF的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在cookie中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再执行CSRF攻击。这种数据通常是表单中的一个数据项。服务器将其生成并附加在表单中，其内容是一个伪乱数。当客户端通过表单提交请求时，这个伪乱数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪乱数，而通过CSRF传来的欺骗性攻击中，攻击者无从事先得知这个伪乱数的值，服务器端就会因为校验token的值为空或者错误，拒绝这个可疑请求。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSONP,XSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
