<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一次CocoaPod库的封装总结</title>
      <link href="/2018/10/22/%E4%B8%80%E6%AC%A1CocoaPod%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85%E6%80%BB%E7%BB%93/"/>
      <url>/2018/10/22/%E4%B8%80%E6%AC%A1CocoaPod%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>通过CocoaPods来管理项目的依赖关系可以说是iOS开发的基本入门技能了。使用CocoaPods管理有如下几个好处：</p><ul><li>避免了同一个第三库在不同项目之间的复制粘贴，第三方库升级以后，只需要更新Podfile即可。</li><li>项目结构更清晰、可以更直观的查看项目依赖的第三方库。</li><li>可以灵活的指定第三库的版本、分支。方便项目管理。</li><li>对于移动端的组件化开发的基础，一个公司组件化的成功与失败很大程度上决定于组件的依赖和拆分管理。</li></ul><p>既然CocoaPods有这么多好处，我们有必要自己实践一个CocoaPods库的完整封装流程。这篇博客主要分为如下三部：</p><ul><li>CocoaPods库的基本流程</li><li>私有CocoaPods库的建立和上传</li><li>CocoaPods库的复杂封装</li></ul><p>我将通过封装<code>LibAdHub</code>这个功能库并且集成进入<code>NumberTileGame</code>这个<code>ReactNative</code>Demo来验证整个流程</p><h2 id="CocoaPods库的基本流程"><a href="#CocoaPods库的基本流程" class="headerlink" title="CocoaPods库的基本流程"></a>CocoaPods库的基本流程</h2><ul><li>1 通过<code>pod lib create LibAdHub</code>创建一个CocoaPods库，在创建过程中有一系列的交互过程</li></ul><p><img src="/assets/postImages/2018102201.png" alt="img"></p><p>主要就是平台、语言、Demo配置等选择。这个命令运行以后，就会生成一个CocoaPods项目。生成的项目如下图</p><p><img src="/assets/postImages/2018102202.png" alt="img"></p><p>其中最重要的就是CocoaPods项目的名字是<code>LibAdHub</code>，地址是<code>git@gitlab.com:huang303513/libadhub.git</code>。这里只需要给为你需要的地址和名字就可以了。最后我们还需要修改Demo的Podfile</p><ul><li>2 修改Demo的Podfile</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#use_frameworks!&#x2F;&#x2F;注释</span><br><span class="line"></span><br><span class="line"># 添加source和platform</span><br><span class="line">source &#39;https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;Specs.git&#39;</span><br><span class="line">platform :ios,&#39;8.0&#39;</span><br><span class="line"></span><br><span class="line">target &#39;LibAdHub_Example&#39; do</span><br><span class="line">  pod &#39;LibAdHub&#39;, :path &#x3D;&gt; &#39;..&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">  target &#39;LibAdHub_Tests&#39; do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line"></span><br><span class="line">#    pod &#39;FBSnapshotTestCase&#39; &#x2F;&#x2F;注释</span><br><span class="line">  end</span><br></pre></td></tr></table></figure><p>这里主要是注释掉<code>#use_frameworks!</code>,因为这个标记表示生成静态库。同时需要注释掉<code>pod &#39;FBSnapshotTestCase&#39;</code>否则会报错。然后我们进入<code>Example</code>目录通过<code>pod install</code>安装。安装成功以后通过命令<code>pod lib lint</code>来查看是否有错，如果有有警告之类可以尝试消除。进入Demo通过<code>#import &lt;LibAdHub/TestPod.h&gt;</code>引入然后运行，如果没错，则表示CocoaPods库配置成功。然后上传到git仓库<code>git@gitlab.com:huang303513/libadhub.git</code>。在其他地方就可以引入了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#39;LibAdHub&#39;, :git &#x3D;&gt; &#39;git@gitlab.com:huang303513&#x2F;libadhub.git&#39;</span><br></pre></td></tr></table></figure><h2 id="私有CocoaPods仓库的建立和上传"><a href="#私有CocoaPods仓库的建立和上传" class="headerlink" title="私有CocoaPods仓库的建立和上传"></a>私有CocoaPods仓库的建立和上传</h2><p>通过上面的步骤以后，我们并不能对<code>LibAdHub</code>指定对应版本，这样如果不同地方依赖不同版本的<code>LibAdHub</code>以后，就会导致问题。我们接下来会新建一个私有CocoaPods库并且把我们的私有库上传。</p><ul><li><p>1 打Tag上传</p><ul><li><p>通过<code>pod lib lint --allow-warnings</code>来验证文件</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">akdeMacBook-Pro:LibAdHub huangchengdu$ pod lib lint --allow-warnings</span><br><span class="line"></span><br><span class="line">-&gt; LibAdHub (0.1.0)</span><br><span class="line">- WARN  | source: Git SSH URLs will NOT work for people behind firewalls configured to only allow HTTP, therefore HTTPS is preferred.</span><br><span class="line">- NOTE  | xcodebuild:  note: Using new build system</span><br><span class="line">- NOTE  | [iOS] xcodebuild:  note: Planning build</span><br><span class="line">- NOTE  | [iOS] xcodebuild:  note: Constructing build description</span><br><span class="line">- NOTE  | [iOS] xcodebuild:  warning: Skipping code signing because the target does not have an Info.plist file. (in target &#39;App&#39;)</span><br><span class="line"></span><br><span class="line">LibAdHub passed validation.</span><br></pre></td></tr></table></figure></code></pre></li><li><p>把<code>LibAdHub.spec</code>文件中的版本号修改：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">s.name             &#x3D; &#39;LibAdHub&#39;</span><br><span class="line">s.version          &#x3D; &#39;1.0.0&#39;</span><br><span class="line">s.summary          &#x3D; &#39;这是一个实验的Pod库，我要用它做实验&#39;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>添加Tag并且push</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">akdeMacBook-Pro:LibAdHub huangchengdu$ git tag -m &quot;first release&quot; &quot;1.0.0&quot;</span><br><span class="line">akdeMacBook-Pro:LibAdHub huangchengdu$ git push --tags</span><br><span class="line">Counting objects: 1, done.</span><br><span class="line">Writing objects: 100% (1&#x2F;1), 156 bytes | 156.00 KiB&#x2F;s, done.</span><br><span class="line">Total 1 (delta 0), reused 0 (delta 0)</span><br><span class="line">To gitlab.com:huang303513&#x2F;libadhub.git</span><br><span class="line">* [new tag]         1.0.0 -&gt; 1.0.0</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>2、 私有CocoaPods仓库建立和上传</p><ul><li>在gitlab下新建一个仓库<code>git@gitlab.com:huang303513/wshspecs.git</code>。</li><li>执行<code>pod repo add wshSpecs git@gitlab.com:huang303513/wshspecs.git</code>。这样就会在本地<code>/Users/huangchengdu/.cocoapods/repos</code>下建立一个<code>wshSpecs</code>的私有Pod仓库。</li><li>执行<code>pod repo push wshSpecs LibAdHub.podspec</code>把LibAdHub放到私有仓库中。</li></ul></li></ul><pre><code>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  akdeMacBook-Pro:repos huangchengdu$ pwd</span><br><span class="line">&#x2F;Users&#x2F;huangchengdu&#x2F;.cocoapods&#x2F;repos</span><br><span class="line">akdeMacBook-Pro:repos huangchengdu$ cd wshSpecs&#x2F;</span><br><span class="line">akdeMacBook-Pro:wshSpecs huangchengdu$ ls</span><br><span class="line">LibAdHubREADME.md</span><br><span class="line">akdeMacBook-Pro:wshSpecs huangchengdu$</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>3、 CocoaPods库的引用</p><ul><li><p><code>pod search LibAdHub</code>搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-&gt; LibAdHub (1.0.0)</span><br><span class="line">   这是一个实验的Pod库，我要用它做实验</span><br><span class="line">   pod &#39;LibAdHub&#39;, &#39;~&gt; 1.0.0&#39;</span><br><span class="line">   - Homepage: https:&#x2F;&#x2F;gitlab.com&#x2F;huang303513&#x2F;libadhub</span><br><span class="line">   - Source:   git@gitlab.com:huang303513&#x2F;libadhub.git</span><br><span class="line">   - Versions: 1.0.0 [wshSpecs repo]</span><br></pre></td></tr></table></figure></li><li><p><code>项目引入</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># Uncomment the next line to define a global platform for your project</span><br><span class="line">source &#39;https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;Specs.git&#39;</span><br><span class="line">source &#39;https:&#x2F;&#x2F;gitlab.com&#x2F;huang303513&#x2F;wshspecs.git&#39;</span><br><span class="line">platform :ios, &#39;8.0&#39;</span><br><span class="line"></span><br><span class="line">target &#39;NumberTileGame&#39; do</span><br><span class="line"> # Your &#39;node_modules&#39; directory is probably in the root of your project,</span><br><span class="line">  # but if not, adjust the &#96;:path&#96; accordingly</span><br><span class="line">  pod &#39;React&#39;, :path &#x3D;&gt; &#39;..&#x2F;rn&#x2F;node_modules&#x2F;react-native&#39;, :subspecs &#x3D;&gt; [</span><br><span class="line">    &#39;Core&#39;,</span><br><span class="line">    &#39;CxxBridge&#39;, # Include this for RN &gt;&#x3D; 0.47</span><br><span class="line">    &#39;DevSupport&#39;, # Include this to enable In-App Devmenu if RN &gt;&#x3D; 0.43</span><br><span class="line">    &#39;RCTText&#39;,</span><br><span class="line">    &#39;RCTImage&#39;,</span><br><span class="line">    &#39;RCTNetwork&#39;,</span><br><span class="line">    &#39;RCTWebSocket&#39;, # Needed for debugging</span><br><span class="line">    &#39;RCTAnimation&#39;,</span><br><span class="line">    &#39;RCTLinkingIOS&#39;,# react-navigator需要</span><br><span class="line">    # Needed for FlatList and animations running on native UI thread</span><br><span class="line">    # Add any other subspecs you want to use in your project</span><br><span class="line">  ]</span><br><span class="line">  # Explicitly include Yoga if you are using RN &gt;&#x3D; 0.42.0</span><br><span class="line">  pod &#39;yoga&#39;, :path &#x3D;&gt; &#39;..&#x2F;rn&#x2F;node_modules&#x2F;react-native&#x2F;ReactCommon&#x2F;yoga&#39;</span><br><span class="line">  pod &#39;RNVectorIcons&#39;, :path &#x3D;&gt; &#39;..&#x2F;rn&#x2F;node_modules&#x2F;react-native-vector-icons&#39;#添加字体</span><br><span class="line">  # Third party deps podspec link</span><br><span class="line">  pod &#39;DoubleConversion&#39;, :podspec &#x3D;&gt; &#39;..&#x2F;rn&#x2F;node_modules&#x2F;react-native&#x2F;third-party-podspecs&#x2F;DoubleConversion.podspec&#39;</span><br><span class="line">  pod &#39;glog&#39;, :podspec &#x3D;&gt; &#39;..&#x2F;rn&#x2F;node_modules&#x2F;react-native&#x2F;third-party-podspecs&#x2F;glog.podspec&#39;</span><br><span class="line">  pod &#39;Folly&#39;, :podspec &#x3D;&gt; &#39;..&#x2F;rn&#x2F;node_modules&#x2F;react-native&#x2F;third-party-podspecs&#x2F;Folly.podspec&#39;</span><br><span class="line">  </span><br><span class="line">#  pod &#39;LibAdHub&#39;, :git &#x3D;&gt; &#39;git@gitlab.com:huang303513&#x2F;libadhub.git&#39;</span><br><span class="line">  pod &#39;LibAdHub&#39;, &#39;1.0.0&#39;</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">target &#39;NumberTileGameTests&#39; do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    # Pods for testing</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="CocoaPods库的复杂封装"><a href="#CocoaPods库的复杂封装" class="headerlink" title="CocoaPods库的复杂封装"></a>CocoaPods库的复杂封装</h2><p>上面仅仅是做了一个最简单的库，真正在集成一个库的时候可能面临如下几个问题：</p><ul><li><p>库本身依赖很多其他库，然而其中一部分库需要集成进来的库在APP中已经存在，如<code>AFNetworking</code>,<code>Masonry</code>不能集成进来，否则APP会重复引用。</p><p><img src="/assets/postImages/2018102301.png" alt="img"></p></li><li><p>依赖的系统库很多，为了减低耦合性，我们不能修改APP对于系统库的依赖。</p><p><img src="/assets/postImages/2018102302.png" alt="img"></p></li></ul><p>针对上面的情况，我们需要一步一步封装SDK</p><ul><li><p>1 添加对应文件夹，把所有依赖库放入里面，然后加入项目</p><p><img src="/assets/postImages/2018102303.png" alt="img"></p></li><li><p>2 编辑<code>LibAdHub.podspec</code>文件，添加对应的库依赖。通过``</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  s.name             &#x3D; &#39;LibAdHub&#39;</span><br><span class="line">  s.version          &#x3D; &#39;1.2.0&#39;</span><br><span class="line">  s.summary          &#x3D; &#39;这是一个实验的Pod库，我要用它做实验。呵呵呵&#39;</span><br><span class="line">  s.description      &#x3D; &#39;呵呵呵呵呵呵呵呵呵呵呵呵呵&#39;</span><br><span class="line">  s.homepage         &#x3D; &#39;http:&#x2F;&#x2F;gitlab.com&#x2F;huang303513&#x2F;libadhub&#39;</span><br><span class="line">  # s.screenshots     &#x3D; &#39;www.example.com&#x2F;screenshots_1&#39;, &#39;www.example.com&#x2F;screenshots_2&#39;</span><br><span class="line">  s.license          &#x3D; &#123; :type &#x3D;&gt; &#39;MIT&#39;, :file &#x3D;&gt; &#39;LICENSE&#39; &#125;</span><br><span class="line">  s.author           &#x3D; &#123; &#39;huang303&#39; &#x3D;&gt; &#39;huang2@gmail.com&#39; &#125;</span><br><span class="line">  s.source           &#x3D; &#123; :git &#x3D;&gt; &#39;git@gitlab.com:huang303513&#x2F;libadhub.git&#39;, :tag &#x3D;&gt; s.version.to_s &#125;</span><br><span class="line">  # s.social_media_url &#x3D; &#39;https:&#x2F;&#x2F;twitter.com&#x2F;&lt;TWITTER_USERNAME&gt;&#39;</span><br><span class="line"></span><br><span class="line">  s.ios.deployment_target &#x3D; &#39;8.0&#39;</span><br><span class="line">  s.source_files &#x3D; &#39;LibAdHub&#x2F;Classes&#x2F;**&#x2F;*&#39;</span><br><span class="line">  </span><br><span class="line">  # # subspec, 将没有 Pod 版本的第三方库依赖做为 subspec.</span><br><span class="line">  s.subspec &#39;libAdHub&#39; do |ss|</span><br><span class="line">    ss.vendored_libraries &#x3D; &#39;LibAdHub&#x2F;Vender&#x2F;libAdHub&#x2F;*.a&#39;</span><br><span class="line">    ss.vendored_frameworks &#x3D; &#39;LibAdHub&#x2F;Vender&#x2F;libAdHub&#x2F;*.framework&#39;</span><br><span class="line">    ss.resource_bundles &#x3D; &#123;&#39;libAdHub&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;LibAdHub&#x2F;Vender&#x2F;libAdHub&#x2F;AdHubSDK.bundle&#39;,</span><br><span class="line">        &#39;LibAdHub&#x2F;Vender&#x2F;libAdHub&#x2F;baidumobadsdk.bundle&#39;,</span><br><span class="line">        &#39;LibAdHub&#x2F;Vender&#x2F;libAdHub&#x2F;FmobiBundle.bundle&#39;,</span><br><span class="line">        &#39;LibAdHub&#x2F;Vender&#x2F;libAdHub&#x2F;WMAdSDK.bundle&#39;]</span><br><span class="line">    &#125;</span><br><span class="line">    ss.frameworks &#x3D; &#39;AVFoundation&#39;, &#39;CoreMedia&#39;, &#39;CoreTelephony&#39;, &#39;CoreLocation&#39;, &#39;CoreMotion&#39;, &#39;SystemConfiguration&#39;, &#39;AdSupport&#39;, &#39;CFNetwork&#39;, &#39;MessageUI&#39;, &#39;SafariServices&#39;, &#39;MobileCoreServices&#39;, &#39;Twitter&#39;, &#39;WebKit&#39;, &#39;StoreKit&#39;, &#39;CoreGraphics&#39;, &#39;JavaScriptCore&#39;</span><br><span class="line">    ss.libraries &#x3D; &#39;xml2&#39;, &#39;iconv&#39;, &#39;z&#39;, &#39;sqlite3&#39;, &#39;c++&#39;</span><br><span class="line">  end</span><br><span class="line">  </span><br><span class="line">  s.dependency &#39;AFNetworking&#39;, &#39;~&gt; 3.1.0&#39;</span><br><span class="line">  s.dependency &#39;Masonry&#39;, &#39;~&gt; 1.1.0&#39;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure></li><li><p>3 运行命令<code>pod lib lint --allow-warnings  --verbose</code>直到编译通过。最终项目结构如下：</p><p>  <img src="/assets/postImages/2018102304.png" alt="img"></p></li><li><p>4 最后一步。进入<code>Example</code>目录，运行<code>pod install</code>来验证封装的正确性。在<code>LibAdHub.podspec</code>中把版本号改为<code>1.3.0</code>。然后push就大功告成了。</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">localhost:Example huangchengdu$ pod install</span><br><span class="line">Analyzing dependencies</span><br><span class="line">Fetching podspec for &#96;LibAdHub&#96; from &#96;..&#x2F;&#96;</span><br><span class="line">Downloading dependencies</span><br><span class="line">Using AFNetworking (3.2.1)</span><br><span class="line">Using LibAdHub (1.1.0)</span><br><span class="line">Using Masonry (1.1.0)</span><br><span class="line">Generating Pods project</span><br><span class="line">Integrating client project</span><br><span class="line">Sending stats</span><br><span class="line">Pod installation complete! There are 3 dependencies from the Podfile and 3 total pods installed.</span><br></pre></td></tr></table></figure></code></pre></li><li><p>5 然后打tag。上传到私有CocoaPods库</p><ul><li><p>打tag</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   LibAdHub passed validation.</span><br><span class="line">akdeMacBook-Pro:libadhub huangchengdu$ git tag -m &quot;1.3.0版本&quot; &quot;1.3.0&quot;</span><br><span class="line">akdeMacBook-Pro:libadhub huangchengdu$ git push --tags</span><br><span class="line">Counting objects: 1, done.</span><br><span class="line">Writing objects: 100% (1&#x2F;1), 164 bytes | 164.00 KiB&#x2F;s, done.</span><br><span class="line">Total 1 (delta 0), reused 0 (delta 0)</span><br><span class="line">To gitlab.com:huang303513&#x2F;libadhub.git</span><br><span class="line"> * [new tag]         1.3.0 -&gt; 1.3.0</span><br></pre></td></tr></table></figure><ul><li><p>push到私有库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo push wshSpecs LibAdHub.podspec  --allow-warnings</span><br></pre></td></tr></table></figure></li><li><p><code>pod search LibAdHub</code>查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  -&gt; LibAdHub (1.4.0)</span><br><span class="line">这是一个实验的Pod库，我要用它做实验。呵呵呵</span><br><span class="line">pod &#39;LibAdHub&#39;, &#39;~&gt; 1.4.0&#39;</span><br><span class="line">- Homepage: http:&#x2F;&#x2F;gitlab.com&#x2F;huang303513&#x2F;libadhub</span><br><span class="line">- Source:   git@gitlab.com:huang303513&#x2F;libadhub.git</span><br><span class="line">- Versions: 1.4.0, 1.0.0 [gitlab-huang303513-wshspecs repo]</span><br><span class="line">- Subspecs:</span><br><span class="line">  - LibAdHub&#x2F;libAdHub (1.4.0)</span><br></pre></td></tr></table></figure></li><li><p>其他地方使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install --repo-update</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CocoaPods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端CORS和XMLHttpRequest全方位详解</title>
      <link href="/2018/02/07/%E5%89%8D%E7%AB%AFCORS%E5%92%8CXMLHttpRequest%E5%85%A8%E6%96%B9%E4%BD%8D%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/02/07/%E5%89%8D%E7%AB%AFCORS%E5%92%8CXMLHttpRequest%E5%85%A8%E6%96%B9%E4%BD%8D%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-CORS的详解"><a href="#1-CORS的详解" class="headerlink" title="1 CORS的详解"></a>1 CORS的详解</h1><hr><h2 id="1-1-CORS的基本套路"><a href="#1-1-CORS的基本套路" class="headerlink" title="1.1 CORS的基本套路"></a>1.1 CORS的基本套路</h2><p>上一篇文章，我详细讲解了<code>JSONP</code>的实现和原理，但是毕竟它是一个很古老的东西，就是所谓的落伍了，现在浏览器已经有更好的套路来支持跨域请求了。俗话说得好，<code>上帝为你关上一扇门的时候，必然会为你开启一扇窗</code>,我们日常使用的浏览器也是这个套路，浏览器开启的窗户就是<code>CORS</code>,这个东西呢，可以说是前端独有的，我在做iOS的时候，是没有听说过这个东西的。也就是说这是一个专门针对浏览器的标准并且现在的浏览器都实现了这个标准。<code>CORS</code>就是<code>cross-origin sharing standard</code>,翻译成中文就是<code>跨域资源共享标准</code>。</p><p>跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的HTTP请求方法（特别是GET以外的HTTP请求，或者搭配某些MIME类型的POST请求），浏览器必须首先使用OPTIONS方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的HTTP请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括Cookies和HTTP认证相关数据）。下面将会针对每种情况做处理。</p><p>后面我会通过<code>http://localhost:8081(客户端地址)</code>和<code>http://127.0.0.1:5389(服务端地址)</code>来模拟演示整个CORS请求。客户端我是通过<code>Vue框架，并且自己实现XMLHttpRequest</code>来实现。服务端我是通过<code>Node的Express框架来实现</code>。具体代码地址，请看文章最后面。</p><h3 id="1-1-1-简单的请求访问控制"><a href="#1-1-1-简单的请求访问控制" class="headerlink" title="1.1.1 简单的请求访问控制"></a>1.1.1 简单的请求访问控制</h3><p>某些请求不会触发CORS预检请求(具体后面会说，其实就是不会发起options请求)。本文称这样的请求为“简单请求”，请注意，该术语并不属于Fetch（其中定义了CORS）规范。若请求满足所有下述条件，则该请求可视为“简单请求”：</p><ul><li>使用下列方法之一：<ul><li>GET</li><li>HEAD</li><li>POST</li></ul></li><li>Fetch规范定义了对CORS安全的首部字段集合，不得人为设置该集合之外的其他首部字段。该集合为：<ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type （需要注意额外的限制）</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ul></li><li>Content-Type的值仅限于下列三者之一：<ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li></ul><p>如果我们不做任何配置，那么由于跨域原因，浏览器将会对我们请求做报错处理(<code>注意：并不是服务器请求错误，是请求成功了并且返回了，但是浏览器做了报错处理</code>)。具体请求抓包如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求报文</span></span><br><span class="line">GET /?xx=<span class="number">1</span>&amp;yy=<span class="number">2</span> HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5389</span></span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Origin: http:<span class="comment">//localhost:8081</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (iPhone; CPU iPhone OS <span class="number">10</span>_3 like Mac OS X) AppleWebKit/<span class="number">602.1</span><span class="number">.50</span> (KHTML, like Gecko) CriOS/<span class="number">56.0</span><span class="number">.2924</span><span class="number">.75</span> Mobile/<span class="number">14E5239</span>e Safari/<span class="number">602.1</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Referer: http://localhost:8081/</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//返回报文</span></span><br><span class="line"><span class="comment">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="comment">X-Powered-By: Express</span></span><br><span class="line"><span class="comment">Content-Type: application/json; charset=utf-8</span></span><br><span class="line"><span class="comment">Content-Length: 86</span></span><br><span class="line"><span class="comment">ETag: W/"56-Zk2w81kjYiGkrYmIocyhxiyDmXY"</span></span><br><span class="line"><span class="comment">Date: Wed, 07 Feb 2018 11:33:20 GMT</span></span><br><span class="line"><span class="comment">Proxy-Connection: Keep-alive</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;"name":"隔壁老黄","password":"123456","requestParams":"&#123;\"xx\":\"1\",\"yy\":\"2\"&#125;"&#125;</span></span><br></pre></td></tr></table></figure><p>从上面的报文来看，我们的请求没有任何问题。但是浏览器却给我报了一个错误，就是因为跨域的原因。</p><p><img src="/assets/postImages/2018020701.png" alt="img"></p><p>出现这个的原因是我的服务器没有对跨域支持。我只需要在服务器添加对简单跨域的支持就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=============服务端代码如下============</span></span><br><span class="line">app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//==============添加对简单跨域的支持======================</span></span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER'</span>);</span><br><span class="line">    <span class="comment">// res.header('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS');</span></span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">        res.send(<span class="number">200</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//get请求</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">//console.log(req.query);</span></span><br><span class="line">    res.json(&#123;</span><br><span class="line">        name: <span class="string">"隔壁老黄"</span>,</span><br><span class="line">        password: <span class="string">"123456"</span>,</span><br><span class="line">        <span class="string">"requestParams"</span>:<span class="built_in">JSON</span>.stringify(req.query)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//=============返回的报文如下============================</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Headers: Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER</span><br><span class="line">Content-Type: application/json; charset=utf<span class="number">-8</span></span><br><span class="line">Content-Length: <span class="number">86</span></span><br><span class="line">ETag: W/<span class="string">"56-Zk2w81kjYiGkrYmIocyhxiyDmXY"</span></span><br><span class="line"><span class="built_in">Date</span>: Wed, <span class="number">07</span> Feb <span class="number">2018</span> <span class="number">11</span>:<span class="number">42</span>:<span class="number">30</span> GMT</span><br><span class="line"><span class="built_in">Proxy</span>-Connection: Keep-alive</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"隔壁老黄"</span>,<span class="string">"password"</span>:<span class="string">"123456"</span>,<span class="string">"requestParams"</span>:<span class="string">"&#123;\"xx\":\"1\",\"yy\":\"2\"&#125;"</span>&#125;</span><br></pre></td></tr></table></figure><p>从上面的返回报文我们可以发现。返回的响应头多了<code>Access-Control-Allow-Origin</code>和<code>Access-Control-Allow-Headers</code>其中。他们的意义如下：</p><ul><li><code>Access-Control-Allow-Origin</code>根据请求头中的<code>Origin</code>和<code>Access-Control-Allow-Origin</code>就能完成最简单的访问控制。本例中，服务端返回的 Access-Control-Allow-Origin: * 表明，该资源可以被任意外域访问。如果服务端仅允许来自 <a href="http://foo.example" target="_blank" rel="noopener">http://foo.example</a> 的访问，则<code>Access-Control-Allow-Origin: http://foo.example</code>。</li><li><code>Access-Control-Allow-Headers</code>表示允许用户自己指定的请求头。其中<code>X-PINGOTHER</code>是我添加的自定义请求头。如果网络请求有这个请求域，但是服务端没有对这个请求域包含，同样也违反CORS导致失败。</li><li><code>Access-Control-Allow-Methods</code>表示服务器允许的跨域请求方法列表。意味着在列表里面的方法都是支持的。</li><li><code>if (req.method == &#39;OPTIONS&#39;) {</code>这句话的意思是如果是<code>OPTIONS</code>请求，也就是跨域请求的预检。则返回<code>200</code>(http状态码，表示请求成功)表示服务端允许当前的跨域请求。如果是非简单跨域(后面会解释)浏览器自己调用的，我们并不需要手动调用。</li></ul><h3 id="1-1-2-非简单的请求访问控制"><a href="#1-1-2-非简单的请求访问控制" class="headerlink" title="1.1.2 非简单的请求访问控制"></a>1.1.2 非简单的请求访问控制</h3><p>当请求满足下述任一条件时，即应首先发送预检请求,比如说<code>POST</code>请求会首先发起一个<code>OPTIONS(预检)</code>请求：</p><ul><li>使用了下面任一HTTP方法：<ul><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li><li>PATCH</li></ul></li><li>人为设置了对CORS安全的首部字段集合之外的其他首部字段。该集合为：<ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li></ul></li><li>Content-Type 的值不属于下列之一:<ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/plain</li></ul></li></ul><p>下面我会做一个非简单的跨域请求访问控制，我会制定自定义的请求头域和<code>content-type</code>来触发预检CORS。具体客户端代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">let</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="keyword">if</span> (httpRequest) &#123;</span><br><span class="line">        httpRequest.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(httpRequest.responseText);</span><br><span class="line">                    <span class="keyword">let</span> response = <span class="built_in">JSON</span>.parse(httpRequest.responseText);</span><br><span class="line">                    resolve(&#123;<span class="attr">err</span>:<span class="literal">null</span>,<span class="attr">data</span>:response&#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    reject(&#123;<span class="attr">err</span>:&#123;<span class="attr">message</span>:<span class="string">"请求出错"</span>&#125;,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        httpRequest.open(<span class="string">'POST'</span>,url,<span class="literal">true</span>);</span><br><span class="line">        httpRequest.setRequestHeader(<span class="string">'X-PINGOTHER'</span>, <span class="string">'pingpong'</span>);</span><br><span class="line">        httpRequest.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/xml'</span>);</span><br><span class="line">        <span class="keyword">let</span> body = <span class="string">'&lt;?xml version="1.0"?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;'</span>;</span><br><span class="line">        httpRequest.send(body);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(&#123;<span class="attr">err</span>:&#123;<span class="attr">message</span>:<span class="string">"没有AJAX环境"</span>&#125;,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">httpRequest.send(body);</span><br></pre></td></tr></table></figure><p>整个网络请求的过程如下图,首先有一个<code>OPTIONS</code>请求，返回<code>200</code>以后，然后再发送我们自己需要的<code>POST</code>请求：</p><p><img src="/assets/postImages/2018020702.png" alt="img"></p><p>两个网络请求的报文如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//================OPSTIONS请求报文=================</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5389</span></span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Origin: http:<span class="comment">//localhost:8081</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (iPhone; CPU iPhone OS <span class="number">10</span>_3 like Mac OS X) AppleWebKit/<span class="number">602.1</span><span class="number">.50</span> (KHTML, like Gecko) CriOS/<span class="number">56.0</span><span class="number">.2924</span><span class="number">.75</span> Mobile/<span class="number">14E5239</span>e Safari/<span class="number">602.1</span></span><br><span class="line">Access-Control-Request-Headers: content-type,x-pingother</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7</span></span><br><span class="line"><span class="comment">//================OPSTIONS响应报文=================</span></span><br><span class="line"><span class="comment">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="comment">X-Powered-By: Express</span></span><br><span class="line"><span class="comment">Access-Control-Allow-Origin: *</span></span><br><span class="line"><span class="comment">Access-Control-Allow-Headers: Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER</span></span><br><span class="line"><span class="comment">Content-Type: text/plain; charset=utf-8</span></span><br><span class="line"><span class="comment">Content-Length: 2</span></span><br><span class="line"><span class="comment">ETag: W/"2-nOO9QiTIwXgNtWtBJezz8kv3SLc"</span></span><br><span class="line"><span class="comment">Date: Wed, 07 Feb 2018 12:23:42 GMT</span></span><br><span class="line"><span class="comment">Proxy-Connection: Keep-alive</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">OK</span></span><br><span class="line"><span class="comment">//===============POST请求报文=================</span></span><br><span class="line"><span class="comment">POST / HTTP/1.1</span></span><br><span class="line"><span class="comment">Host: 127.0.0.1:5389</span></span><br><span class="line"><span class="comment">Content-Length: 55</span></span><br><span class="line"><span class="comment">Pragma: no-cache</span></span><br><span class="line"><span class="comment">Cache-Control: no-cache</span></span><br><span class="line"><span class="comment">X-PINGOTHER: pingpong</span></span><br><span class="line"><span class="comment">Origin: http://localhost:8081</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.75 Mobile/14E5239e Safari/602.1</span></span><br><span class="line"><span class="comment">Content-Type: application/xml</span></span><br><span class="line"><span class="comment">Accept: */</span>*</span><br><span class="line">Referer: http:<span class="comment">//localhost:8081/</span></span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>,zh-TW;q=<span class="number">0.8</span>,en;q=<span class="number">0.7</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;<span class="xml"><span class="tag">&lt;<span class="name">person</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>Arun<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span></span><br><span class="line"><span class="comment">//================POST响应报文=================</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Headers: Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER</span><br><span class="line">Content-Type: application/json; charset=utf<span class="number">-8</span></span><br><span class="line">Content-Length: <span class="number">40</span></span><br><span class="line">ETag: W/<span class="string">"28-gEkkRvjiOndybUpThNV94uAc6yA"</span></span><br><span class="line"><span class="built_in">Date</span>: Wed, <span class="number">07</span> Feb <span class="number">2018</span> <span class="number">12</span>:<span class="number">23</span>:<span class="number">42</span> GMT</span><br><span class="line"><span class="built_in">Proxy</span>-Connection: Keep-alive</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"隔壁老黄"</span>,<span class="string">"password"</span>:<span class="string">"123456"</span>&#125;</span><br></pre></td></tr></table></figure><p>上面四个报文的解释如下：</p><ul><li><code>OPTIONS请求报文</code>中的<code>Access-Control-Request-Method</code>表示客户端发起的跨域请求是<code>POST</code>,<code>Origin</code>表示客户端的地址,<code>Access-Control-Request-Headers</code>表示客户端请求用户手动修改过的请求头域。</li><li><code>OPTIONS响应报文</code>中的<code>Access-Control-Allow-Origin:*</code>表示允许所有客户端做跨域访问。<code>Access-Control-Allow-Headers</code>表示支持用户自定义的请求头域的集合。如果客户端自己处理的请求头域超过了这个范围<code>我这里的content-type,x-pingother</code>，则违反了CORS规则导致请求失败。</li><li><code>POST请求报文</code>没事好解释的，关注<code>Origin</code>,<code>X-PINGOTHER</code>,<code>Content-Type</code>这三个关键域的值就可以了。</li><li><code>POST响应报文</code>的响应头和<code>OPTIONS响应报文</code>一样的，不一样的就是响应体。后者返回我们真正需要的数据。</li></ul><h3 id="1-1-3-cookie和Access-Control-Allow-Credentials"><a href="#1-1-3-cookie和Access-Control-Allow-Credentials" class="headerlink" title="1.1.3 cookie和Access-Control-Allow-Credentials"></a>1.1.3 cookie和Access-Control-Allow-Credentials</h3><p>还有一点是必须要强调额，就是cookie。我们通常使用它来记录一些认证信息，但是由于跨域的原因，<code>CORS</code>对于cookie的使用就更加严格了。而且好像我们并不能获取到cookie(至少我想了各种办法也没有找到通过XMLHttpRequest获取跨域cookie的原因)。貌似是从协议上就禁止了。那如果我们需要在跨域服务器上使用cookie的话，需要做那些配置呢？这就需要借助<code>Access-Control-Allow-Credentials</code>。下面我就通过一个真实案列来讲解跨域的cookie。下面是一个带cookie的跨域网络请求报文：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=================OPTIONS请求报文=========================</span></span><br><span class="line">OPTIONS / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5389</span></span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Origin: http:<span class="comment">//localhost:8081</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (iPhone; CPU iPhone OS <span class="number">10</span>_3 like Mac OS X) AppleWebKit/<span class="number">602.1</span><span class="number">.50</span> (KHTML, like Gecko) CriOS/<span class="number">56.0</span><span class="number">.2924</span><span class="number">.75</span> Mobile/<span class="number">14E5239</span>e Safari/<span class="number">602.1</span></span><br><span class="line">Access-Control-Request-Headers: content-type,x-pingother</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7</span></span><br><span class="line"><span class="comment">//=================OPTIONS响应报文=========================</span></span><br><span class="line"><span class="comment">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="comment">X-Powered-By: Express</span></span><br><span class="line"><span class="comment">Access-Control-Allow-Origin: http://localhost:8081</span></span><br><span class="line"><span class="comment">Access-Control-Allow-Headers: Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER</span></span><br><span class="line"><span class="comment">Access-Control-Allow-Methods: PUT, POST, GET, DELETE, OPTIONS</span></span><br><span class="line"><span class="comment">Access-Control-Expose-Headers: token</span></span><br><span class="line"><span class="comment">Access-Control-Allow-Credentials: true</span></span><br><span class="line"><span class="comment">Access-Control-Max-Age: 3600</span></span><br><span class="line"><span class="comment">Content-Type: text/plain; charset=utf-8</span></span><br><span class="line"><span class="comment">Content-Length: 2</span></span><br><span class="line"><span class="comment">ETag: W/"2-nOO9QiTIwXgNtWtBJezz8kv3SLc"</span></span><br><span class="line"><span class="comment">Date: Thu, 08 Feb 2018 06:42:55 GMT</span></span><br><span class="line"><span class="comment">Proxy-Connection: Keep-alive</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">OK</span></span><br><span class="line"><span class="comment">//=================POST请求报文=========================</span></span><br><span class="line"><span class="comment">POST / HTTP/1.1</span></span><br><span class="line"><span class="comment">Host: 127.0.0.1:5389</span></span><br><span class="line"><span class="comment">Content-Length: 55</span></span><br><span class="line"><span class="comment">Pragma: no-cache</span></span><br><span class="line"><span class="comment">Cache-Control: no-cache</span></span><br><span class="line"><span class="comment">X-PINGOTHER: pingpong</span></span><br><span class="line"><span class="comment">Origin: http://localhost:8081</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.75 Mobile/14E5239e Safari/602.1</span></span><br><span class="line"><span class="comment">Content-Type: application/xml</span></span><br><span class="line"><span class="comment">Accept: */</span>*</span><br><span class="line">Referer: http:<span class="comment">//localhost:8081/</span></span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>,zh-TW;q=<span class="number">0.8</span>,en;q=<span class="number">0.7</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;<span class="xml"><span class="tag">&lt;<span class="name">person</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>Arun<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span></span><br><span class="line"><span class="comment">//=================POST响应报文=========================</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Access-Control-Allow-Origin: http:<span class="comment">//localhost:8081</span></span><br><span class="line">Access-Control-Allow-Headers: Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER</span><br><span class="line">Access-Control-Allow-Methods: PUT, POST, GET, DELETE, OPTIONS</span><br><span class="line">Access-Control-Expose-Headers: token</span><br><span class="line">Access-Control-Allow-Credentials: <span class="literal">true</span></span><br><span class="line">Access-Control-Max-Age: <span class="number">3600</span></span><br><span class="line"><span class="built_in">Set</span>-Cookie: Thu Feb <span class="number">08</span> <span class="number">2018</span> <span class="number">14</span>:<span class="number">42</span>:<span class="number">55</span> GMT+<span class="number">0800</span> (CST)=%E9%BB%<span class="number">84</span>%E6%<span class="number">88</span>%<span class="number">90</span>%E9%<span class="number">83</span>%BD; Path=<span class="regexp">/</span></span><br><span class="line"><span class="regexp">token: Thu Feb 08 2018 14:42:55 GMT+0800 (CST)</span></span><br><span class="line"><span class="regexp">Content-Type: application/</span>json; charset=utf<span class="number">-8</span></span><br><span class="line">Content-Length: <span class="number">40</span></span><br><span class="line">ETag: W/<span class="string">"28-gEkkRvjiOndybUpThNV94uAc6yA"</span></span><br><span class="line"><span class="built_in">Date</span>: Thu, <span class="number">08</span> Feb <span class="number">2018</span> <span class="number">06</span>:<span class="number">42</span>:<span class="number">55</span> GMT</span><br><span class="line"><span class="built_in">Proxy</span>-Connection: Keep-alive</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"隔壁老黄"</span>,<span class="string">"password"</span>:<span class="string">"123456"</span>&#125;</span><br></pre></td></tr></table></figure><p>从上面的的带cookie信息的非简单跨域请求，我们发现和前面不带cookie的请求有几个区别：</p><ul><li><code>POST请求报文</code>没啥好说的，只需要关注<code>Origin</code>就可以了。</li><li><code>POST响应报文</code>中最关键的1 <code>Access-Control-Allow-Credentials: true</code>，只有他为true的时候，表示服务器允许客户端的请求带cookie，否则不允许带cookie。2 <code>Access-Control-Allow-Origin: http://localhost:8081</code>的值不能是<code>*</code>了，必须是特定的客户端域名一个或者多个。只有在满足这两个条件的情况下，才支持跨域cookie的携带。</li><li><code>POST响应报文</code>的响应报文中，就包含了<code>Set-Cookie</code>和<code>Access-Control-Allow-Credentials</code>这两个域。</li><li>如果网络请求要携带cookie信息。对于客户端需要在创建<code>XMLHttpRequest</code>对象的时候，通过<code>httpRequest.withCredentials = true;</code>来配置。对于服务端，需要在响应头中通过<code>res.header(&#39;Access-Control-Allow-Credentials&#39;,true);</code>来配置。只有客户端和服务端都配置好以后，才能使用跨域cookie。</li></ul><p>由于<code>CORS</code>标准的限制，在客户端很多响应域都是不能获取到的。比如cookie我们就不能通过<code>getResponseHeader</code>或者<code>getAllResponseHeaders</code>获取，只能获取到协议允许我们获取到的与。我这里试了一下，通过<code>getAllResponseHeaders</code>只能获取如下几个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">content-type: application/json; charset=utf<span class="number">-8</span></span><br><span class="line">token: Thu Feb <span class="number">08</span> <span class="number">2018</span> <span class="number">14</span>:<span class="number">55</span>:<span class="number">24</span> GMT+<span class="number">0800</span> (CST)</span><br></pre></td></tr></table></figure><p>其中<code>content-type</code>是系统带的域,是协议允许获取的。<code>token</code>就是我自己定义，如果我想要获取到这个域。就需要服务端在响应头里面通过<code>Access-Control-Expose-Headers: token</code>来控制。比如我这里表示只允许获取到自定义的<code>token</code>域。由于我们并不能获取到cookie，所以可以通过自定义的域来存放认证信息。</p><p>下面我将贴出我所有客户端和服务端的最关键的代码：</p><ul><li>客户端(自己实现的XMLHpptRequest对象)：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建XMLHttpRequest对象的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAjax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> httpRequest;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHTTPRequest) &#123;</span><br><span class="line">        httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</span><br><span class="line">        httpRequest = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> httpRequest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建get请求。返回一个promise对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>请求地址 url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>请求参数，可以使字符串或者对象 params </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>配置，这里暂时没有实现 config </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url,params,config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="keyword">if</span> (httpRequest) &#123;</span><br><span class="line">                <span class="keyword">let</span> query;</span><br><span class="line">                <span class="comment">//拼接get请求的query部分</span></span><br><span class="line">                <span class="keyword">if</span> (params <span class="keyword">instanceof</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">                    query = <span class="string">"?"</span> + params;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(params <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">                    query = <span class="string">"?"</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(params)) &#123;</span><br><span class="line">                        query = query + key + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(value) + <span class="string">"&amp;"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    query= query.substring(<span class="number">0</span>,query.length - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//处理网络返回</span></span><br><span class="line">                httpRequest.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//网络请求完成</span></span><br><span class="line">                    <span class="keyword">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</span><br><span class="line">                        <span class="comment">//请求成功</span></span><br><span class="line">                        <span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="comment">// console.log(httpRequest.responseText);</span></span><br><span class="line">                            <span class="keyword">let</span> response = <span class="built_in">JSON</span>.parse(httpRequest.responseText);</span><br><span class="line">                            resolve(&#123;<span class="attr">err</span>:<span class="literal">null</span>,<span class="attr">data</span>:response&#125;);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            reject(&#123;<span class="attr">err</span>:&#123;<span class="attr">message</span>:<span class="string">"请求出错"</span>&#125;,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//把query添加到url后面</span></span><br><span class="line">                <span class="keyword">if</span> (query) &#123;</span><br><span class="line">                    url = url + query;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="comment">//发送请求</span></span><br><span class="line">                httpRequest.open(<span class="string">'GET'</span>,url,<span class="literal">true</span>);</span><br><span class="line">                httpRequest.send();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(&#123;<span class="attr">err</span>:&#123;<span class="attr">message</span>:<span class="string">"没有AJAX环境"</span>&#125;,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(&#123;<span class="attr">err</span>:error,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义XMLHttpRequest的POST请求，返回一个Promise对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>请求的地址 url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>没用 params </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>没用 config </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url,params,config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> httpRequest = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="comment">//让请求支持cookie信息的携带</span></span><br><span class="line">            httpRequest.withCredentials = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (httpRequest) &#123;</span><br><span class="line">                httpRequest.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//获取响应域</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"========cookie======="</span>,httpRequest.getAllResponseHeaders(),httpRequest.getResponseHeader(<span class="string">"token"</span>));</span><br><span class="line">                    <span class="keyword">if</span> (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (httpRequest.status === <span class="number">200</span>) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(httpRequest.responseText);</span><br><span class="line">                            <span class="keyword">let</span> response = <span class="built_in">JSON</span>.parse(httpRequest.responseText);</span><br><span class="line">                            resolve(&#123;<span class="attr">err</span>:<span class="literal">null</span>,<span class="attr">data</span>:response&#125;);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            reject(&#123;<span class="attr">err</span>:&#123;<span class="attr">message</span>:<span class="string">"请求出错"</span>&#125;,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//post请求</span></span><br><span class="line">                httpRequest.open(<span class="string">'POST'</span>,url,<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//添加自定义的请求头域</span></span><br><span class="line">                httpRequest.setRequestHeader(<span class="string">'X-PINGOTHER'</span>, <span class="string">'pingpong'</span>);</span><br><span class="line">                <span class="comment">//设置body的类型为xml</span></span><br><span class="line">                httpRequest.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/xml'</span>);</span><br><span class="line">                <span class="comment">//post请求的请求体</span></span><br><span class="line">                <span class="keyword">let</span> body = <span class="string">'&lt;?xml version="1.0"?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;'</span>;</span><br><span class="line">                <span class="comment">//发送请求</span></span><br><span class="line">                httpRequest.send(body);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(&#123;<span class="attr">err</span>:&#123;<span class="attr">message</span>:<span class="string">"没有AJAX环境"</span>&#125;,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(&#123;<span class="attr">err</span>:error,<span class="attr">data</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="keyword">get</span>,post</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户端(如何使用)：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">get</span>,post&#125; from '../XMLHttpRequest/request.js';</span><br><span class="line"></span><br><span class="line">//<span class="keyword">get</span>请求的发送</span><br><span class="line">async getRequest() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;err,data&#125; = <span class="keyword">await</span> <span class="keyword">get</span>('http://127.0.0.1:5389', &#123;<span class="string">"xx"</span>: <span class="number">1</span>,<span class="string">"yy"</span>: <span class="number">2</span>&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"出错了"</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(err, data);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//post请求的发送</span></span><br><span class="line"><span class="keyword">async</span> postRequest() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;err,data&#125; = <span class="keyword">await</span> post(<span class="string">'http://127.0.0.1:5389'</span>, &#123;<span class="string">"xx"</span>: <span class="number">1</span>,<span class="string">"yy"</span>: <span class="number">2</span>&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"出错了"</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(err, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>服务端的实现代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对所有的网络请求做跨域处理</span></span><br><span class="line">    app.all(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//允许跨域的客户端域名</span></span><br><span class="line">        res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://localhost:8081'</span>);</span><br><span class="line">        <span class="comment">//允许客户端携带的请求头域，包括自定义的请求头域，否则会失败。</span></span><br><span class="line">        res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , X-PINGOTHER'</span>);</span><br><span class="line">        <span class="comment">//允许客户端发起的请求体方法。</span></span><br><span class="line">        res.header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT, POST, GET, DELETE, OPTIONS'</span>);</span><br><span class="line">        <span class="comment">//允许客户端访问的响应头域</span></span><br><span class="line">        res.header(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'token'</span>);</span><br><span class="line">        <span class="comment">//允许携带cookie信息</span></span><br><span class="line">        res.header(<span class="string">'Access-Control-Allow-Credentials'</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//CORS认证的有效期</span></span><br><span class="line">        res.header(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">        <span class="keyword">if</span> (req.method == <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">            res.send(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//get请求</span></span><br><span class="line">    app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            name: <span class="string">"隔壁老黄"</span>,</span><br><span class="line">            password: <span class="string">"123456"</span>,</span><br><span class="line">            <span class="string">"requestParams"</span>:<span class="built_in">JSON</span>.stringify(req.query)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//post请求</span></span><br><span class="line">    app.post(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        <span class="comment">//设置cookie，只有客户端和服务端都配置好以后才能成功</span></span><br><span class="line">        res.cookie((<span class="keyword">new</span> <span class="built_in">Date</span>()), <span class="string">"隔壁老黄"</span>);</span><br><span class="line">        <span class="comment">//设置自定义的响应头域，可以存放认证信息或者响应给客户端的信息。</span></span><br><span class="line">        res.header(<span class="string">"token"</span>,(<span class="keyword">new</span> <span class="built_in">Date</span>()));</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            name: <span class="string">"隔壁老黄"</span>,</span><br><span class="line">            password: <span class="string">"123456"</span>,</span><br><span class="line">            <span class="string">"requestParams"</span>:<span class="built_in">JSON</span>.stringify(req.body)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>第一部分到此结束。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CORS,XMLHttpRequest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端JSONP的原理与实现以及XSS,CSRF的相亲相爱</title>
      <link href="/2017/12/27/%E5%89%8D%E7%AB%AFJSONP%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8AXSS,CSRF%E7%9A%84%E7%9B%B8%E4%BA%B2%E7%9B%B8%E7%88%B1/"/>
      <url>/2017/12/27/%E5%89%8D%E7%AB%AFJSONP%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8AXSS,CSRF%E7%9A%84%E7%9B%B8%E4%BA%B2%E7%9B%B8%E7%88%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JSONP的原理与实现"><a href="#1-JSONP的原理与实现" class="headerlink" title="1 JSONP的原理与实现"></a>1 JSONP的原理与实现</h1><hr><h2 id="1-1-同源策略"><a href="#1-1-同源策略" class="headerlink" title="1.1 同源策略"></a>1.1 同源策略</h2><p>前端跨域是每个前端人绕不过的坎，也是必须了解的一个知识点。我记得第一次遇到前端跨域这个坑的时候，真是无语到极点，对于一个移动端出身的人来说，觉得这个玩意无可理喻。但是后来慢慢了解，觉得前端的同源策略是非常有必要的。同源策略就是浏览器默认让<code>www.baidu.com</code>不能加载来自<code>www.google.com</code>的数据。对于现在来说，所有数据都是同源的可能性基本上很小，比如我们公司静态资源<code>www.image.com</code>和前端资源<code>www.htmlcss.com</code>的CDN路径都不一样，前端获取后台数据<code>www.apidata.com</code>又是另一个地址。如何解决这个坑呢？我们公司通过两种方式来避开。具体就是通过设置<code>Access-Control-Allow-Origin</code>来做<code>POST</code>请求，用<code>JSONP</code>来实现<code>GET</code>请求,因为<code>JSONP</code>只能实现<code>GET</code>请求。</p><h3 id="1-1-1-通过Access-Control-Allow-Origin支持跨域"><a href="#1-1-1-通过Access-Control-Allow-Origin支持跨域" class="headerlink" title="1.1.1 通过Access-Control-Allow-Origin支持跨域"></a>1.1.1 通过Access-Control-Allow-Origin支持跨域</h3><p>有些人肯定就纳闷了，我就喜欢跨域，我就不关注安全，难道就没有办法了吗？当然是否定的。你需要做的，只是让服务器在返回的header里面加上<code>Access-Control-Allow-Origin</code>这个域就可以了。这样浏览器在接收到服务器返回的数据，就不会因为违反同源策略限制你拿到数据了。下面就用抓包来具体看一下：</p><p>当我打开<a href="https://pages.ctrip.com/ztrip/market/goldshare/?shareKey=aUuRkqYuXwjCmAS5Vef0btZmexmKwG5z&amp;channel=ZXA_anzhi&amp;partner=zhixing" target="_blank" rel="noopener">这里点开h5链接</a>这个链接的时候。会去<code>https//m.ctrip.com</code>通过<code>POST</code>请求数据，这里就用到了跨域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">:method: POST</span><br><span class="line">:authority: m.ctrip.com</span><br><span class="line">:scheme: https</span><br><span class="line">:path: <span class="regexp">/restapi/</span>xyz</span><br><span class="line">content-length: <span class="number">290</span></span><br><span class="line">pragma: no-cache</span><br><span class="line">cache-control: no-cache</span><br><span class="line">accept: application/json</span><br><span class="line">origin: https:<span class="comment">//pages.ctrip.com</span></span><br><span class="line">user-agent: Mozilla/<span class="number">5.0</span> (Linux; Android <span class="number">6.0</span>; Nexus <span class="number">5</span> Build/MRA58N) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">63.0</span><span class="number">.3239</span><span class="number">.84</span> Mobile Safari/<span class="number">537.36</span></span><br><span class="line">content-type: application/json;charset=UTF<span class="number">-8</span></span><br><span class="line">referer: https:<span class="comment">//pages.ctrip.com/ztrip</span></span><br><span class="line">accept-encoding: gzip, deflate, br</span><br><span class="line">accept-language: zh-CN,zh;q=<span class="number">0.9</span>,zh-TW;q=<span class="number">0.8</span>,en;q=<span class="number">0.7</span></span><br><span class="line"></span><br><span class="line">&#123;请求体，post请求的参数&#125;</span><br></pre></td></tr></table></figure><p>服务器返回的响应头如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">:status: <span class="number">200</span></span><br><span class="line">server: Tengine/<span class="number">2.1</span><span class="number">.2</span></span><br><span class="line">date: Thu, <span class="number">28</span> Dec <span class="number">2017</span> <span class="number">11</span>:<span class="number">01</span>:<span class="number">29</span> GMT</span><br><span class="line">content-type: application/json;charset=utf<span class="number">-8</span></span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">access-control-expose-headers: RootMessageId</span><br><span class="line">cache-control: private</span><br><span class="line">vary: Accept-Encoding</span><br><span class="line">clogging_trace_id: <span class="number">8196881814119217567</span></span><br><span class="line">rootmessageid: <span class="number">921812</span><span class="number">-0</span>a0e0de1<span class="number">-420683</span><span class="number">-219524</span></span><br><span class="line">x-powered-by: CTrip/SOA2<span class="number">.0</span> Win32NT/.NET</span><br><span class="line">soa20-response-status: Success</span><br><span class="line">x-aspnet-version: <span class="number">4.0</span><span class="number">.30319</span></span><br><span class="line">x-powered-by: ASP.NET</span><br><span class="line">x-gate: ctrip-gate</span><br><span class="line">x-gate-instance: unknown</span><br><span class="line">x-originating-url: http:<span class="comment">//m.ctrip.com/xyz</span></span><br><span class="line">x-gate-remote-call-cost: <span class="number">9</span></span><br><span class="line">content-encoding: gzip</span><br><span class="line">slb-http-protocol-version: HTTP/<span class="number">2.0</span></span><br><span class="line">access-control-expose-headers: slb-http-protocol-version</span><br><span class="line"></span><br><span class="line">&#123;服务器返回的有用数据&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，这里有<code>access-control-allow-origin</code>这个响应域就解决了问题。这个方法是最简单的，而且前端<code>POST</code>请求最常见的方法(不确定还有其他好的解决方案)。这种方式最好就是通过他获取服务数据，不要加载js脚本。小心被别人注入攻击。</p><h3 id="1-1-2-JSONP的基本原理"><a href="#1-1-2-JSONP的基本原理" class="headerlink" title="1.1.2 JSONP的基本原理"></a>1.1.2 JSONP的基本原理</h3><p>讲<code>JSONP</code>之前，我先亮出一段常见的代码。下面这个方法主要就是动态的创建一个<code>script</code>标签，然后设置src属性。并且添加到<code>document</code>的第一个<code>script</code>标签之前。也就是说动态去加载一个<code>javscript</code>脚本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadJs</span>(<span class="params">src, attrs = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> ref = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'script'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">//创建一个scrpt标签</span></span><br><span class="line">        <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">        <span class="comment">//设置script标签的资源路径</span></span><br><span class="line">        script.src = src</span><br><span class="line">        script.async = <span class="literal">true</span></span><br><span class="line">        <span class="comment">//设置属性</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> attrs) &#123;</span><br><span class="line">            script.setAttribute(key, attrs[key])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//script标签加入document中</span></span><br><span class="line">        ref.parentNode.insertBefore(script, ref)</span><br><span class="line">        script.onload = resolve</span><br><span class="line">        script.onerror = reject</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最有意思的是<code>script</code>标签的<code>src</code>不受跨域限制。也就是说<code>wwww.baidu.com</code>的文件可以通过上面这个方法无限制的加载<code>www.google.com</code>的js文件。这个就是<code>JSONP</code>的实现的最基本原理。每一个<code>JSONP</code>请求就是动态的创建<code>script</code>元素，然后通过src属性去加载数据，而且一般是通过callback这个回调方法来返回服务器数据，然后再把<code>script</code>标签移除。如此周而复始的循环，想想都累啊。下面看一个JSON的标准格式,服务器会获取到<code>callback</code>这个回调方法。然后通过<code>方法调用</code>的方式把数据返回来，也就是执行<code>callbackFun</code>方法。<code>serverdata</code>就是服务器给客户端的数据。至于<code>callback</code>这个名字，可以自己定义，有客户端和服务器商量决定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callbackFun</span>(<span class="params">serverdata</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(serverdata)</span><br><span class="line">&#125;</span><br><span class="line">&lt;script src=<span class="string">"http://wwww.baidu.com/jsonp.js?callback=callbackFun"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-JSONP的实现"><a href="#1-2-JSONP的实现" class="headerlink" title="1.2 JSONP的实现"></a>1.2 JSONP的实现</h2><p>下面我会对<code>JSONP</code>做一个最基本的实现。使用<code>Vue</code>和<code>node.js</code>分别实现客户端和服务端,<a href="https://github.com/huang303513/NodejsVuePractice">代码地址</a>。</p><p>首先我们先看客户端的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取header的第一个子元素</span></span><br><span class="line"><span class="keyword">let</span> container = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeid</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> possible = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        text += possible.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * possible.length));</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsonp请求的实现。返回一个promise对象对应请求成功和请求失败。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*请求的url&#125;</span> </span>url </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*请求的参数&#125;</span> </span>options </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonpRequest</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">                reject(&#123;</span><br><span class="line">                    err: <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"url不能为空"</span>),</span><br><span class="line">                    result: <span class="literal">null</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">document</span> || !global) &#123;</span><br><span class="line">                reject(&#123;</span><br><span class="line">                    err: <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"系统环境有问题"</span>),</span><br><span class="line">                    result: <span class="literal">null</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建一个script元素</span></span><br><span class="line">            <span class="keyword">let</span> scriptNode = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">            <span class="comment">//请求参数</span></span><br><span class="line">            <span class="keyword">let</span> data = options || &#123;&#125;;</span><br><span class="line">            <span class="comment">//回调函数的具体值，服务器和客户端就根据这个方法名来确定请求与返回数据之间的对应。</span></span><br><span class="line">            <span class="keyword">let</span> fnName = <span class="string">"jsonp"</span> + makeid();</span><br><span class="line">            <span class="comment">// 把callback加入请求参数中</span></span><br><span class="line">            data[<span class="string">"callback"</span>] = fnName;</span><br><span class="line">            <span class="comment">// 拼接url</span></span><br><span class="line">            <span class="keyword">var</span> params = [];</span><br><span class="line">            <span class="comment">//参数的拼接与处理</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(data)) &#123;</span><br><span class="line">                params.push(<span class="built_in">encodeURIComponent</span>(key) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(data[key]));</span><br><span class="line">            &#125;</span><br><span class="line">            url = (url.indexOf(<span class="string">"?"</span>)) &gt; <span class="number">0</span> ? (url + <span class="string">"&amp;"</span>) : (url + <span class="string">"?"</span>);</span><br><span class="line">            url += params.join(<span class="string">"&amp;"</span>);</span><br><span class="line">            <span class="comment">//把处理好的url赋值给script元素的src属性。</span></span><br><span class="line">            scriptNode.src = url;</span><br><span class="line">            <span class="comment">// 把回调函数暴露为全局方法。script加载回来以后，会执行fnName对应的这个方法。</span></span><br><span class="line">            global[fnName] = <span class="function"><span class="keyword">function</span>(<span class="params">ret</span>) </span>&#123;</span><br><span class="line">                    resolve(&#123;</span><br><span class="line">                        err: <span class="literal">null</span>,</span><br><span class="line">                        result: ret</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="comment">//请求完成。删除script元素</span></span><br><span class="line">                    container.removeChild(scriptNode);</span><br><span class="line">                    <span class="comment">//全局对象中删除已经请求完成的回调方法</span></span><br><span class="line">                    <span class="keyword">delete</span> global[fnName];</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// script元素遇到错误</span></span><br><span class="line">            scriptNode.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                reject(&#123;</span><br><span class="line">                    err: err,</span><br><span class="line">                    result: <span class="literal">null</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//删除script元素和全局回调方法</span></span><br><span class="line">                container.removeChild(scriptNode);</span><br><span class="line">                global[fnName] &amp;&amp; <span class="keyword">delete</span> global[fnName];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//指定元素类型</span></span><br><span class="line">            scriptNode.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">            <span class="comment">//把script元素添加到header元素中。到这里script元素就会自动加载src。也就是我们的请求发出去了。</span></span><br><span class="line">            container.appendChild(scriptNode)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="comment">//异常处理捕获</span></span><br><span class="line">            reject(&#123;</span><br><span class="line">                err: error,</span><br><span class="line">                result: <span class="literal">null</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> jsonpRequest;</span><br></pre></td></tr></table></figure><p>这段代码主要做了如下几件事：</p><ul><li>创建一个<code>script</code>标签元素，并且添加到<code>header</code>元素里面。</li><li>拼接<code>script</code>元素的<code>src</code>属性，其中必然好汉callback这个参数，服务端根据这个参数的值回调。</li><li>回调以后需要手动把<code>script</code>标签元素移除，并且删除全局的回调函数名。</li></ul><p>客户端的使用如下,是不是感觉简洁明了，比ES5的回调爽多了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jsonpRequest <span class="keyword">from</span> <span class="string">"../lib/jsonpRequest.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> sendJSONPRequest() &#123;</span><br><span class="line">    <span class="comment">//参数</span></span><br><span class="line">    <span class="keyword">let</span> params = &#123;</span><br><span class="line">        name: <span class="string">"老黄"</span>,</span><br><span class="line">        site: <span class="string">"www.huangchengdu.com"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.showLoading();</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">let</span> &#123;</span><br><span class="line">        err,</span><br><span class="line">        result</span><br><span class="line">    &#125; = <span class="keyword">await</span> jsonpRequest(</span><br><span class="line">        <span class="string">"https://www.huangchengdu.com/jsonp/jsonpRequest"</span>,</span><br><span class="line">        params</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//处理返回的数据</span></span><br><span class="line">    <span class="keyword">this</span>.hiddenLoading();</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        alert(err.message || <span class="string">"请求出错了"</span>);</span><br><span class="line">        <span class="keyword">this</span>.serverData.err = <span class="built_in">JSON</span>.stringify(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.serverData = result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端的实现如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> router = express.Router();</span><br><span class="line"><span class="comment">//JSONP请求</span></span><br><span class="line">router.get(<span class="string">'/jsonpRequest'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//console.log("=====================" + JSON.stringify(req.query));</span></span><br><span class="line">    <span class="comment">//获取name和site参数的值</span></span><br><span class="line">    <span class="keyword">let</span> name = req.query.name;</span><br><span class="line">    <span class="keyword">let</span> site = req.query.site;</span><br><span class="line">    <span class="comment">//拼接回调值</span></span><br><span class="line">    <span class="keyword">let</span> serverres = &#123;</span><br><span class="line">    serverReceive:&#123;</span><br><span class="line">    name:name,</span><br><span class="line">    site:site</span><br><span class="line">    &#125;,</span><br><span class="line">    serverSend:<span class="string">"hello,"</span> + name + <span class="string">".your site is https://"</span> + site</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回值。其实就是callback....()种种类型javascript字符串</span></span><br><span class="line">    res.end(req.query.callback + <span class="string">"("</span> + <span class="built_in">JSON</span>.stringify(serverres) + <span class="string">")"</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>服务端代码说明如下：</p><ul><li><code>res.end</code>是<code>express</code>表示对http请求返回。具体返回的数据类似于<code>callback随机数(服务端数据)</code>这种类型。</li><li>客户端在收到<code>callback随机数(服务端数据)</code>这个数据以后，会自动按照javascript脚本解析执行。具体就是一个全局方法调用，方法名是<code>callback随机数</code>,参数是<code>服务端数据</code>。这样就实现了服务端数据的回调。</li><li>客户端在global对象下面注册了<code>callback随机数</code>这个方法。具体代码是上面<code>global[fnName] = function(ret) {</code>这一行。</li><li><code>callback随机数</code>是服务端和客户端商量，具体可以自己决定，真实的时候类似于<code>callbacksuijishu</code>这种类型。</li></ul><h3 id="1-2-1-JSONP请求报文"><a href="#1-2-1-JSONP请求报文" class="headerlink" title="1.2.1 JSONP请求报文"></a>1.2.1 JSONP请求报文</h3><p><code>JSONP</code>本质上就是一个普通的<code>GET</code>请求。无非就是这个请求是通过<code>script</code>标签来发送的。而且请求参数里面必定会有一个<code>callback</code>参数。<br>下面我们具体抓包看一下我们的请求报文：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /jsonp/jsonpRequest?name=%E8%<span class="number">80</span>%<span class="number">81</span>%E9%BB%<span class="number">84</span>&amp;site=www.huangchengdu.com&amp;callback=jsonpiFuL4 HTTP/<span class="number">1.1</span></span><br><span class="line">Host: www.huangchengdu.com</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Connection: keep-alive</span></span><br><span class="line"><span class="comment">Cookie: session=s%3Anot8KTW5FiTLY0VNgrrKksXY96AE2kWT.hrQeyL%2BVjt8ICJjfFqoFdV8JV3lx0IsDntx%2B%2Bc%2FEM98</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/604.4.7 (KHTML, like Gecko) Version/11.0.2 Safari/604.4.7</span></span><br><span class="line"><span class="comment">Accept-Language: zh-cn</span></span><br><span class="line"><span class="comment">Referer: http://localhost:8081/</span></span><br><span class="line"><span class="comment">Accept-Encoding: br, gzip, deflate</span></span><br></pre></td></tr></table></figure><p>返回报文：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Server: nginx/<span class="number">1.6</span><span class="number">.2</span></span><br><span class="line"><span class="built_in">Date</span>: Fri, <span class="number">29</span> Dec <span class="number">2017</span> <span class="number">03</span>:<span class="number">26</span>:<span class="number">31</span> GMT</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: Keep-alive</span><br><span class="line"></span><br><span class="line">jsonpiFuL4(&#123;<span class="string">"serverReceive"</span>:&#123;<span class="string">"name"</span>:<span class="string">"èé»"</span>,<span class="string">"site"</span>:<span class="string">"www.huangchengdu.com"</span>&#125;,<span class="string">"serverSend"</span>:<span class="string">"hello,èé».your site is https://www.huangchengdu.com"</span>&#125;)</span><br></pre></td></tr></table></figure><p>从上面的报文我们可以返现。请求的<code>callback</code>参数的值和返回的响应体的名称是一样的。响应提就是一个普通的函数。服务器返回的数据作为函数的参数。</p><h1 id="2-XSS攻击"><a href="#2-XSS攻击" class="headerlink" title="2 XSS攻击"></a>2 XSS攻击</h1><p><code>XSS</code>的全称是<code>Cross-site scripting</code>,翻译过来就是<code>跨站脚本</code>。<code>script</code>可以跨域加载脚本这个特性，合理利用比如<code>JSONP</code>。如果不合理利用，比如某个坏人通过某种方式，让你的浏览器去加载恶意的<code>javascrpt</code>脚本，必然就会导致敏感信息被盗或者财务损失。最常见的就是<code>XSS</code>攻击，其实就是注入恶意脚本。真是凡事都有利有弊，就看如何使用了。常用的XSS攻击手段和目的有如下几种：</p><ul><li>盗用cookie，获取敏感信息。</li><li>利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。</li><li>利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、- 发私信等操作。</li><li>利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</li><li>在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDoS攻击的效果。</li></ul><p>如果某一个字符串里面有<code>var a = 1;&lt;script&gt;alert(&#39;我是你大爷&#39;)&lt;/script&gt;;var b = 2;</code>这种类型的字符串。而且我们刚好要通过<code>script</code>标签加载。那么他就会弹出一个<code>我是你大爷</code>。避免的方式就是把存在这种可能性的地方都处理过，如果包含类似<code>&lt;script&gt;</code>这种字符的脚本就处理掉或者干脆返回错误。目前最常见的预防操作有如下几种：</p><ul><li>将重要的cookie标记为http only,这样的话Javascript 中的document.cookie语句就不能获取到cookie了。</li><li>只允许用户输入我们期望的数据。例如:年龄的textbox中，只允许用户输入数字。 而数字之外的字符都过滤掉。</li><li>对数据进行Html Encode处理。</li><li>过滤或移除特殊的Html标签，例如:”script,iframe,for等”。</li><li>过滤JavaScript事件的标签。例如”onclick=”,”onfocus”等等。</li></ul><h1 id="3-CSRF攻击"><a href="#3-CSRF攻击" class="headerlink" title="3 CSRF攻击"></a>3 CSRF攻击</h1><p>这玩意我了解不多，也无法做出模拟操作。跨站请求伪造（英语：Cross-site request forgery），也被称为one-click attack或者session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。[1] 跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p><p>我的理解就是，比如你刚去淘宝买了东西，并且浏览器有你的<code>session</code>护着<code>cookie</code>之类的信息。然后你马上又进入一个不该去的网站，并且点击了里面的一个淘宝链接，然后在你不知情的情况下做一些违法操作。这样阿里后台是不知道的，因为你刚刚通过合法手段买了东西，从而达到在你不知情的情况下，而且淘宝也信任你的情况下，畏畏缩缩偷偷摸摸的干坏事。</p><h2 id="3-1-SCRF预防"><a href="#3-1-SCRF预防" class="headerlink" title="3.1 SCRF预防"></a>3.1 SCRF预防</h2><p>检查Referer字段,通过这个字段来判断用户是从那个地址跳转到当前地址的。HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。以上文银行操作为例，Referer字段地址通常应该是转账按钮所在的网页地址，应该也位于www.examplebank.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于www.examplebank.com之下，这时候服务器就能识别出恶意的访问。这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的Referer字段。虽然http协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其Referer字段的可能。</p><p>添加校验token,这个就最常见了，现在那个前端网站还不加一个验证码啊。不管你如何千变万化，你验证码中是用户数据的吧，而且现在好像越来越流行手机号码验证了。CSRF的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在cookie中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再执行CSRF攻击。这种数据通常是表单中的一个数据项。服务器将其生成并附加在表单中，其内容是一个伪乱数。当客户端通过表单提交请求时，这个伪乱数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪乱数，而通过CSRF传来的欺骗性攻击中，攻击者无从事先得知这个伪乱数的值，服务器端就会因为校验token的值为空或者错误，拒绝这个可疑请求。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSONP,XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDWebImage源码解析(四)</title>
      <link href="/2017/05/04/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E5%9B%9B)/"/>
      <url>/2017/05/04/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>这篇博文将分析<code>SDWebImageDownloader</code>和<code>SDWebImageDownloaderOperation</code>。<code>SDWebImage</code>通过这两个类处理图片的网络加载。<code>SDWebImageManager</code>通过属性<code>imageDownloader</code>持有<code>SDWebImageDownloader</code>并且调用它的<code>downloadImageWithURL</code>来从网络加载图片。<code>SDWebImageDownloader</code>实现了图片加载的具体处理，如果图片在缓存存在则从缓存区，如果缓存不存在，则直接创建一个<code>SDWebImageDownloaderOperation</code>对象来下载图片。管理NSURLRequest对象请求头的封装、缓存、cookie的设置。加载选项的处理等功能。管理Operation之间的依赖关系。<code>SDWebImageDownloaderOperation</code>是一个自定义的并行Operation子类。这个类主要实现了图片下载的具体操作、以及图片下载完成以后的图片解压缩、Operation生命周期管理等。</p><h2 id="2-SDWebImageDownloader分析"><a href="#2-SDWebImageDownloader分析" class="headerlink" title="2 SDWebImageDownloader分析"></a>2 <code>SDWebImageDownloader</code>分析</h2><p><code>SDWebImageDownlaoder</code>是一个单列对象，主要做了如下工作：</p><ul><li>定义了<code>SDWebImageDownloaderOptions</code>这个枚举属性，通过这个枚举属性来设置图片从网络加载的不同情况。</li><li>定义并管理了<code>NSURLSession</code>对象，通过这个对象来做网络请求，并且实现对象的代理方法。</li><li>定义一个<code>NSURLRequest</code>对象，并且管理请求头的拼装。</li><li>对于每一个网络请求,通过一个<code>SDWebImageDownloaderOperation</code>自定义的<code>NSOperation</code>来操作网络下载。</li><li>管理网络加载过程和完成时候的回调工作。通过<code>addProgressCallback</code>实现。</li></ul><h4 id="2-1-SDWebImageDownloaderOptions枚举类型"><a href="#2-1-SDWebImageDownloaderOptions枚举类型" class="headerlink" title="2.1 SDWebImageDownloaderOptions枚举类型"></a>2.1 <code>SDWebImageDownloaderOptions</code>枚举类型</h4><p>可以通过这个枚举类型来控制网络加载、请求头、缓存策略等。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, SDWebImageDownloaderOptions) &#123;</span><br><span class="line">    SDWebImageDownloaderLowPriority = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">    SDWebImageDownloaderProgressiveDownload = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *默认情况下，http请求阻止使用NSURLCache对象。如果设置了这个标记，则NSURLCache会被http请求使用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageDownloaderUseNSURLCache = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *如果image/imageData是从NSURLCache返回的。则completion这个回调会返回nil。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageDownloaderIgnoreCachedResponse = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *如果app进入后台模式，是否继续下载。这个是通过在后台申请时间来完成这个操作。如果指定的时间范围内没有完成，则直接取消下载。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageDownloaderContinueInBackground = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     处理缓存在`NSHTTPCookieStore`对象里面的cookie。通过设置`NSMutableURLRequest.HTTPShouldHandleCookies = YES`来实现的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageDownloaderHandleCookies = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *允许非信任的SSL证书请求。</span></span><br><span class="line"><span class="comment">     *在测试的时候很有用。但是正式环境要小心使用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageDownloaderAllowInvalidSSLCertificates = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 默认情况下，图片加载的顺序是根据加入队列的顺序加载的。但是这个标记会把任务加入队列的最前面。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageDownloaderHighPriority = <span class="number">1</span> &lt;&lt; <span class="number">7</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *默认情况下，图片会按照他的原始大小来解码显示。这个属性会调整图片的尺寸到合适的大小根据设备的内存限制。</span></span><br><span class="line"><span class="comment">     *如果`SDWebImageProgressiveDownload`标记被设置了，则这个flag不起作用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageDownloaderScaleDownLargeImages = <span class="number">1</span> &lt;&lt; <span class="number">8</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-2-SDWebImageDownloader的属性和初始化"><a href="#2-2-SDWebImageDownloader的属性和初始化" class="headerlink" title="2.2 SDWebImageDownloader的属性和初始化"></a>2.2 <code>SDWebImageDownloader</code>的属性和初始化</h4><p>可以通过它的属性对最大并行下载数量、超时时间、operation之间的下载顺序、做处理。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当图片下载完成以后，加压缩图片以后再换成。这样可以提升性能但是会占用更多的存储空间。</span></span><br><span class="line"><span class="comment"> * 模式YES,如果你因为过多的内存消耗导致一个奔溃，可以把这个属性设置为NO。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> shouldDecompressImages;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 最大并行下载的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> maxConcurrentDownloads;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 当前并行下载数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSUInteger</span> currentDownloadCount;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 下载超时时间设置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSTimeInterval</span> downloadTimeout;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 改变下载operation的执行顺序。默认是FIFO。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) SDWebImageDownloaderExecutionOrder executionOrder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 单列方法。返回一个单列对象</span></span><br><span class="line"><span class="comment"> @return 返回一个单列的SDWebImageDownloader对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)sharedDownloader;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 为图片加载request设置一个SSL证书对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">NSURLCredential</span> *urlCredential;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Basic认证请求设置用户名和密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">NSString</span> *username;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">NSString</span> *password;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为http请求设置header。</span></span><br><span class="line"><span class="comment"> * 每一request执行的时候，这个Block都会被执行。用于向http请求添加请求域。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>) SDWebImageDownloaderHeadersFilterBlock headersFilter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 初始化一个请求对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param sessionConfiguration NSURLSessionTask初始化配置</span></span><br><span class="line"><span class="comment"> @return 返回一个SDWebImageDownloader对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)initWithSessionConfiguration:(<span class="keyword">nullable</span> <span class="built_in">NSURLSessionConfiguration</span> *)sessionConfiguration <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置请求头域</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param value 请求头域值</span></span><br><span class="line"><span class="comment"> @param field 请求头域名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)value forHTTPHeaderField:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)field;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*获取请求头域的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)valueForHTTPHeaderField:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)field;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置一个`SDWebImageDownloaderOperation`的子类作为`NSOperation`来构建request来下载一张图片。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param operationClass 指定的子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setOperationClass:(<span class="keyword">nullable</span> Class)operationClass;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 所有的下载图片的Operation都加入NSoperationQueue中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nonnull</span>) <span class="built_in">NSOperationQueue</span> *downloadQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 最后一个添加的Operation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">NSOperation</span> *lastAddedOperation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 自定义的NSOperation子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) Class operationClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 用于记录url和他对应的SDWebImageDownloaderOperation对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nonnull</span>) <span class="built_in">NSMutableDictionary</span>&lt;<span class="built_in">NSURL</span> *, SDWebImageDownloaderOperation *&gt; *URLOperations;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 请求头域字典</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) SDHTTPHeadersMutableDictionary *HTTPHeaders;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 通过这个`NSURLSession`创建请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSURLSession</span> *session;</span><br></pre></td></tr></table></figure><h4 id="2-2-downloadImageWithURL方法"><a href="#2-2-downloadImageWithURL方法" class="headerlink" title="2.2 downloadImageWithURL方法"></a>2.2 <code>downloadImageWithURL</code>方法</h4><p>这个方法是<code>SDWebImageDownloader</code>的核心方法。<code>SDWebImageManager</code>通过这个方法来实现图片从网络加载。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 新建一个SDWebImageDownloadOperation对象来来做具体的下载操作。同时指定缓存策略、cookie策略、自定义请求头域等。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param url url</span></span><br><span class="line"><span class="comment"> @param options 加载选项</span></span><br><span class="line"><span class="comment"> @param progressBlock 进度progress</span></span><br><span class="line"><span class="comment"> @param completedBlock 完成回调</span></span><br><span class="line"><span class="comment"> @return 返回一个SDWebImageDownloadToken，用于关联一个请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> SDWebImageDownloadToken *)downloadImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</span><br><span class="line">                                                   options:(SDWebImageDownloaderOptions)options</span><br><span class="line">                                                  progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                                 completed:(<span class="keyword">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock &#123;</span><br><span class="line">    __<span class="keyword">weak</span> SDWebImageDownloader *wself = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> addProgressCallback:progressBlock completedBlock:completedBlock forURL:url createCallback:^SDWebImageDownloaderOperation *&#123;</span><br><span class="line">        __<span class="keyword">strong</span> __<span class="keyword">typeof</span> (wself) sself = wself;</span><br><span class="line">        <span class="built_in">NSTimeInterval</span> timeoutInterval = sself.downloadTimeout;</span><br><span class="line">        <span class="keyword">if</span> (timeoutInterval == <span class="number">0.0</span>) &#123;</span><br><span class="line">            timeoutInterval = <span class="number">15.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *为了避免可能存在的NSURLCache和SDImageCache同时缓存。我们默认不允许image对象的NSURLCache对象。</span></span><br><span class="line"><span class="comment">         具体缓存策略参考http://www.jianshu.com/p/855c2c6e761f</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">NSURLRequestCachePolicy</span> cachePolicy = <span class="built_in">NSURLRequestReloadIgnoringLocalCacheData</span>;</span><br><span class="line">        <span class="keyword">if</span> (options &amp; SDWebImageDownloaderUseNSURLCache) &#123;</span><br><span class="line">            <span class="keyword">if</span> (options &amp; SDWebImageDownloaderIgnoreCachedResponse) &#123;</span><br><span class="line">                cachePolicy = <span class="built_in">NSURLRequestReturnCacheDataDontLoad</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cachePolicy = <span class="built_in">NSURLRequestUseProtocolCachePolicy</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSMutableURLRequest</span> *request = [[<span class="built_in">NSMutableURLRequest</span> alloc] initWithURL:url cachePolicy:cachePolicy timeoutInterval:timeoutInterval];</span><br><span class="line">        <span class="comment">//使用cookies</span></span><br><span class="line">        request.HTTPShouldHandleCookies = (options &amp; SDWebImageDownloaderHandleCookies);</span><br><span class="line">        <span class="comment">//使用管道</span></span><br><span class="line">        request.HTTPShouldUsePipelining = <span class="literal">YES</span>;</span><br><span class="line">        <span class="comment">//添加自定义请求头</span></span><br><span class="line">        <span class="keyword">if</span> (sself.headersFilter) &#123;</span><br><span class="line">            request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders <span class="keyword">copy</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            request.allHTTPHeaderFields = sself.HTTPHeaders;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始化一个自定义NSOperation对象</span></span><br><span class="line">        SDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];</span><br><span class="line">        <span class="comment">//是否解压缩返回的图片</span></span><br><span class="line">        operation.shouldDecompressImages = sself.shouldDecompressImages;</span><br><span class="line">        <span class="comment">//指定验证信息</span></span><br><span class="line">        <span class="keyword">if</span> (sself.urlCredential) &#123;</span><br><span class="line">            <span class="comment">//SSL验证</span></span><br><span class="line">            operation.credential = sself.urlCredential;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sself.username &amp;&amp; sself.password) &#123;</span><br><span class="line">            <span class="comment">//Basic验证</span></span><br><span class="line">            operation.credential = [<span class="built_in">NSURLCredential</span> credentialWithUser:sself.username password:sself.password persistence:<span class="built_in">NSURLCredentialPersistenceForSession</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//指定优先级</span></span><br><span class="line">        <span class="keyword">if</span> (options &amp; SDWebImageDownloaderHighPriority) &#123;</span><br><span class="line">            operation.queuePriority = <span class="built_in">NSOperationQueuePriorityHigh</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options &amp; SDWebImageDownloaderLowPriority) &#123;</span><br><span class="line">            operation.queuePriority = <span class="built_in">NSOperationQueuePriorityLow</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把operatin添加进入NSOperationQueue中</span></span><br><span class="line">        [sself.downloadQueue addOperation:operation];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         如果是LIFO这种模式，则需要手动指定operation之间的依赖关系</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) &#123;</span><br><span class="line">            <span class="comment">//如果是LIFO，则让前面的operation依赖于最新添加的operation</span></span><br><span class="line">            [sself.lastAddedOperation addDependency:operation];</span><br><span class="line">            sself.lastAddedOperation = operation;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> operation;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 给下载过程添加进度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param progressBlock 进度Block</span></span><br><span class="line"><span class="comment"> @param completedBlock 完成Block</span></span><br><span class="line"><span class="comment"> @param url url地址</span></span><br><span class="line"><span class="comment"> @param createCallback nil</span></span><br><span class="line"><span class="comment"> @return 返回SDWebImageDownloadToken。方便后面取消</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> SDWebImageDownloadToken *)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                           completedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock</span><br><span class="line">                                                   forURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</span><br><span class="line">                                           createCallback:(SDWebImageDownloaderOperation *(^)())createCallback &#123;</span><br><span class="line">    <span class="comment">// The URL will be used as the key to the callbacks dictionary so it cannot be nil. If it is nil immediately call the completed block with no image or data.</span></span><br><span class="line">    <span class="keyword">if</span> (url == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (completedBlock != <span class="literal">nil</span>) &#123;</span><br><span class="line">            completedBlock(<span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">NO</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __block SDWebImageDownloadToken *token = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    dispatch_barrier_sync(<span class="keyword">self</span>.barrierQueue, ^&#123;</span><br><span class="line">        <span class="comment">//看是否当前url是否有对应的Operation图片加载对象</span></span><br><span class="line">        SDWebImageDownloaderOperation *operation = <span class="keyword">self</span>.URLOperations[url];</span><br><span class="line">        <span class="comment">//如果没有，则直接创建一个。</span></span><br><span class="line">        <span class="keyword">if</span> (!operation) &#123;</span><br><span class="line">            <span class="comment">//创建一个operation。并且添加到URLOperation中。</span></span><br><span class="line">            operation = createCallback();</span><br><span class="line">            <span class="keyword">self</span>.URLOperations[url] = operation;</span><br><span class="line"></span><br><span class="line">            __<span class="keyword">weak</span> SDWebImageDownloaderOperation *woperation = operation;</span><br><span class="line">            <span class="comment">//设置operation操作完成以后的回调</span></span><br><span class="line">            operation.completionBlock = ^&#123;</span><br><span class="line">              SDWebImageDownloaderOperation *soperation = woperation;</span><br><span class="line">              <span class="keyword">if</span> (!soperation) <span class="keyword">return</span>;</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">self</span>.URLOperations[url] == soperation) &#123;</span><br><span class="line">                  [<span class="keyword">self</span>.URLOperations removeObjectForKey:url];</span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">id</span> downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];</span><br><span class="line">        token = [SDWebImageDownloadToken new];</span><br><span class="line">        token.url = url;</span><br><span class="line">        token.downloadOperationCancelToken = downloadOperationCancelToken;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要取消一个下载操作，使用<code>cancel</code>方法来处理</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 移除一个图片加载操作</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param token 通过token来确定操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)cancel:(<span class="keyword">nullable</span> SDWebImageDownloadToken *)token &#123;</span><br><span class="line">    dispatch_barrier_async(<span class="keyword">self</span>.barrierQueue, ^&#123;</span><br><span class="line">        SDWebImageDownloaderOperation *operation = <span class="keyword">self</span>.URLOperations[token.url];</span><br><span class="line">        <span class="built_in">BOOL</span> canceled = [operation cancel:token.downloadOperationCancelToken];</span><br><span class="line">        <span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">            [<span class="keyword">self</span>.URLOperations removeObjectForKey:token.url];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外还有<code>NSURLSession</code>的代理方法，这里就不细讲了。如果兴趣可以参考<code>AFNetWorking</code>源码分析。</p><h2 id="3-SDWebImageDownloaderOperation分析"><a href="#3-SDWebImageDownloaderOperation分析" class="headerlink" title="3 SDWebImageDownloaderOperation分析"></a>3 <code>SDWebImageDownloaderOperation</code>分析</h2><p><code>SDWebImageDownloaderOperation</code>是一个自定义、并行的<code>NSOperation</code>子类。这个子类主要实现的功能有：</p><ul><li>由于只自定义的并行<code>NSOperation</code>,所以需要管理<code>executing</code>,<code>finished</code>等各种属性的处理，并且手动触发KVO。</li><li>在<code>start</code>(<code>NSOperation</code>规定，没有为什么)方法里面实现主要逻辑。</li><li>在<code>NSURLSessionTaskDelegate</code>和<code>NSURLSessionDataDelegate</code>中处理数据的加载，以及进度Block的处理。</li><li>如果<code>unownedSession</code>属性因为某种原因是nil，则手动初始化一个做网络请求。</li><li>在代理方法中对认证、数据拼装、完成回调Block做处理。</li><li>通过发送<code>SDWebImageDownloadStopNotification</code>,<code>SDWebImageDownloadFinishNotification</code>,<code>SDWebImageDownloadReceiveResponseNotification</code>,<code>SDWebImageDownloadStartNotification</code>来通知Operation的状态。</li></ul><p>具体完整源码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> SDWebImageDownloadStartNotification = <span class="string">@"SDWebImageDownloadStartNotification"</span>;</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> SDWebImageDownloadReceiveResponseNotification = <span class="string">@"SDWebImageDownloadReceiveResponseNotification"</span>;</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> SDWebImageDownloadStopNotification = <span class="string">@"SDWebImageDownloadStopNotification"</span>;</span><br><span class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> SDWebImageDownloadFinishNotification = <span class="string">@"SDWebImageDownloadFinishNotification"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> kProgressCallbackKey = <span class="string">@"progress"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> kCompletedCallbackKey = <span class="string">@"completed"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSMutableDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; SDCallbacksDictionary;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SDWebImageDownloaderOperation</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 回调Block列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nonnull</span>) <span class="built_in">NSMutableArray</span>&lt;SDCallbacksDictionary *&gt; *callbackBlocks;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 自定义并行Operation需要管理的两个属性。默认是readonly的，我们这里通过声明改为可修改的。方便我们在后面操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>, <span class="keyword">getter</span> = isExecuting) <span class="built_in">BOOL</span> executing;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>, <span class="keyword">getter</span> = isFinished) <span class="built_in">BOOL</span> finished;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 存储图片数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">NSMutableData</span> *imageData;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 通过SDWebImageDownloader传过来。所以这里是weak。因为他是通过SDWebImageDownloader管理的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">NSURLSession</span> *unownedSession;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 如果unownedSession是nil，我们需要手动创建一个并且管理他的生命周期和代理方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">NSURLSession</span> *ownedSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> dataTask对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">nullable</span>) <span class="built_in">NSURLSessionTask</span> *dataTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 一个并行queue。用于控制数据的处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (SDDispatchQueueSetterSementics, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">dispatch_queue_t</span> barrierQueue;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 如果用户设置了后台继续加载选线。则通过backgroundTask来继续下载图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIBackgroundTaskIdentifier</span> backgroundTaskId;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SDWebImageDownloaderOperation</span> </span>&#123;</span><br><span class="line">    size_t width, height;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line">    <span class="built_in">UIImageOrientation</span> orientation;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@synthesize</span> executing = _executing;</span><br><span class="line"><span class="keyword">@synthesize</span> finished = _finished;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithRequest:<span class="literal">nil</span> inSession:<span class="literal">nil</span> options:<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)initWithRequest:(<span class="keyword">nullable</span> <span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                              inSession:(<span class="keyword">nullable</span> <span class="built_in">NSURLSession</span> *)session</span><br><span class="line">                                options:(SDWebImageDownloaderOptions)options &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</span><br><span class="line">        _request = [request <span class="keyword">copy</span>];</span><br><span class="line">        _shouldDecompressImages = <span class="literal">YES</span>;</span><br><span class="line">        _options = options;</span><br><span class="line">        _callbackBlocks = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">        <span class="comment">//默认情况下。_executing和finished都是NO</span></span><br><span class="line">        _executing = <span class="literal">NO</span>;</span><br><span class="line">        _finished = <span class="literal">NO</span>;</span><br><span class="line">        _expectedSize = <span class="number">0</span>;</span><br><span class="line">        _unownedSession = session;</span><br><span class="line">        _barrierQueue = dispatch_queue_create(<span class="string">"com.hackemist.SDWebImageDownloaderOperationBarrierQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    SDDispatchQueueRelease(_barrierQueue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 给Operation添加进度和回调Block</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param progressBlock 进度Block</span></span><br><span class="line"><span class="comment"> @param completedBlock 回调Block</span></span><br><span class="line"><span class="comment"> @return 回调字典</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)addHandlersForProgress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                            completed:(<span class="keyword">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock &#123;</span><br><span class="line">    SDCallbacksDictionary *callbacks = [<span class="built_in">NSMutableDictionary</span> new];</span><br><span class="line">    <span class="comment">//把Operation对应的回调和进度Block存入一个字典中</span></span><br><span class="line">    <span class="keyword">if</span> (progressBlock) callbacks[kProgressCallbackKey] = [progressBlock <span class="keyword">copy</span>];</span><br><span class="line">    <span class="keyword">if</span> (completedBlock) callbacks[kCompletedCallbackKey] = [completedBlock <span class="keyword">copy</span>];</span><br><span class="line">    <span class="comment">//把完成和进度Block加入callbackBlocks中</span></span><br><span class="line">    dispatch_barrier_async(<span class="keyword">self</span>.barrierQueue, ^&#123;</span><br><span class="line">        [<span class="keyword">self</span>.callbackBlocks addObject:callbacks];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> callbacks;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="keyword">id</span>&gt; *)callbacksForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    __block <span class="built_in">NSMutableArray</span>&lt;<span class="keyword">id</span>&gt; *callbacks = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(<span class="keyword">self</span>.barrierQueue, ^&#123;</span><br><span class="line">        <span class="comment">// We need to remove [NSNull null] because there might not always be a progress block for each callback</span></span><br><span class="line">        callbacks = [[<span class="keyword">self</span>.callbackBlocks valueForKey:key] mutableCopy];</span><br><span class="line">        [callbacks removeObjectIdenticalTo:[<span class="built_in">NSNull</span> null]];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> [callbacks <span class="keyword">copy</span>];    <span class="comment">// strip mutability here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)cancel:(<span class="keyword">nullable</span> <span class="keyword">id</span>)token &#123;</span><br><span class="line">    __block <span class="built_in">BOOL</span> shouldCancel = <span class="literal">NO</span>;</span><br><span class="line">    dispatch_barrier_sync(<span class="keyword">self</span>.barrierQueue, ^&#123;</span><br><span class="line">        [<span class="keyword">self</span>.callbackBlocks removeObjectIdenticalTo:token];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.callbackBlocks.count == <span class="number">0</span>) &#123;</span><br><span class="line">            shouldCancel = <span class="literal">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (shouldCancel) &#123;</span><br><span class="line">        [<span class="keyword">self</span> cancel];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> shouldCancel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 并行的Operation需要重写这个方法.在这个方法里面做具体的处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)start &#123;</span><br><span class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.isCancelled) &#123;</span><br><span class="line">            <span class="keyword">self</span>.finished = <span class="literal">YES</span>;</span><br><span class="line">            [<span class="keyword">self</span> reset];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT</span></span><br><span class="line">        Class <span class="built_in">UIApplicationClass</span> = <span class="built_in">NSClassFromString</span>(<span class="string">@"UIApplication"</span>);</span><br><span class="line">        <span class="built_in">BOOL</span> hasApplication = <span class="built_in">UIApplicationClass</span> &amp;&amp; [<span class="built_in">UIApplicationClass</span> respondsToSelector:<span class="keyword">@selector</span>(sharedApplication)];</span><br><span class="line">        <span class="comment">//如果用户甚至了Background模式，则设置一个backgroundTask</span></span><br><span class="line">        <span class="keyword">if</span> (hasApplication &amp;&amp; [<span class="keyword">self</span> shouldContinueWhenAppEntersBackground]) &#123;</span><br><span class="line">            __<span class="keyword">weak</span> __typeof__ (<span class="keyword">self</span>) wself = <span class="keyword">self</span>;</span><br><span class="line">            <span class="built_in">UIApplication</span> * app = [<span class="built_in">UIApplicationClass</span> performSelector:<span class="keyword">@selector</span>(sharedApplication)];</span><br><span class="line">            <span class="keyword">self</span>.backgroundTaskId = [app beginBackgroundTaskWithExpirationHandler:^&#123;</span><br><span class="line">                <span class="comment">//background结束以后。做清理工作</span></span><br><span class="line">                __<span class="keyword">strong</span> __<span class="keyword">typeof</span> (wself) sself = wself;</span><br><span class="line">                <span class="keyword">if</span> (sself) &#123;</span><br><span class="line">                    [sself cancel];</span><br><span class="line">                    [app endBackgroundTask:sself.backgroundTaskId];</span><br><span class="line">                    sself.backgroundTaskId = <span class="built_in">UIBackgroundTaskInvalid</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="built_in">NSURLSession</span> *session = <span class="keyword">self</span>.unownedSession;</span><br><span class="line">        <span class="comment">//如果SDWebImageDownloader传入的session是nil，则自己手动初始化一个。</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">self</span>.unownedSession) &#123;</span><br><span class="line">            <span class="built_in">NSURLSessionConfiguration</span> *sessionConfig = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line">            sessionConfig.timeoutIntervalForRequest = <span class="number">15</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  Create the session for this task</span></span><br><span class="line"><span class="comment">             *  We send nil as delegate queue so that the session creates a serial operation queue for performing all delegate</span></span><br><span class="line"><span class="comment">             *  method calls and completion handler calls.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">self</span>.ownedSession = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:sessionConfig</span><br><span class="line">                                                              delegate:<span class="keyword">self</span></span><br><span class="line">                                                         delegateQueue:<span class="literal">nil</span>];</span><br><span class="line">            session = <span class="keyword">self</span>.ownedSession;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.dataTask = [session dataTaskWithRequest:<span class="keyword">self</span>.request];</span><br><span class="line">        <span class="keyword">self</span>.executing = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    [<span class="keyword">self</span>.dataTask resume];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.dataTask) &#123;</span><br><span class="line">        <span class="comment">//第一次调用进度BLOCK</span></span><br><span class="line">        <span class="keyword">for</span> (SDWebImageDownloaderProgressBlock progressBlock <span class="keyword">in</span> [<span class="keyword">self</span> callbacksForKey:kProgressCallbackKey]) &#123;</span><br><span class="line">            progressBlock(<span class="number">0</span>, <span class="built_in">NSURLResponseUnknownLength</span>, <span class="keyword">self</span>.request.URL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:<span class="keyword">self</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span> callCompletionBlocksWithError:[<span class="built_in">NSError</span> errorWithDomain:<span class="built_in">NSURLErrorDomain</span> code:<span class="number">0</span> userInfo:@&#123;<span class="built_in">NSLocalizedDescriptionKey</span> : <span class="string">@"Connection can't be initialized"</span>&#125;]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT</span></span><br><span class="line">    Class <span class="built_in">UIApplicationClass</span> = <span class="built_in">NSClassFromString</span>(<span class="string">@"UIApplication"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">UIApplicationClass</span> || ![<span class="built_in">UIApplicationClass</span> respondsToSelector:<span class="keyword">@selector</span>(sharedApplication)]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.backgroundTaskId != <span class="built_in">UIBackgroundTaskInvalid</span>) &#123;</span><br><span class="line">        <span class="built_in">UIApplication</span> * app = [<span class="built_in">UIApplication</span> performSelector:<span class="keyword">@selector</span>(sharedApplication)];</span><br><span class="line">        [app endBackgroundTask:<span class="keyword">self</span>.backgroundTaskId];</span><br><span class="line">        <span class="keyword">self</span>.backgroundTaskId = <span class="built_in">UIBackgroundTaskInvalid</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 如果要取消一个Operation，就会调用这个方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)cancel &#123;</span><br><span class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> cancelInternal];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)cancelInternal &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.isFinished) <span class="keyword">return</span>;</span><br><span class="line">    [<span class="keyword">super</span> cancel];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.dataTask) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.dataTask cancel];</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:<span class="keyword">self</span>];</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// As we cancelled the connection, its callback won't be called and thus won't</span></span><br><span class="line">        <span class="comment">// maintain the isFinished and isExecuting flags.</span></span><br><span class="line">        <span class="comment">//更新状态</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.isExecuting) <span class="keyword">self</span>.executing = <span class="literal">NO</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">self</span>.isFinished) <span class="keyword">self</span>.finished = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> reset];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)done &#123;</span><br><span class="line">    <span class="keyword">self</span>.finished = <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">self</span>.executing = <span class="literal">NO</span>;</span><br><span class="line">    [<span class="keyword">self</span> reset];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)reset &#123;</span><br><span class="line">    dispatch_barrier_async(<span class="keyword">self</span>.barrierQueue, ^&#123;</span><br><span class="line">        [<span class="keyword">self</span>.callbackBlocks removeAllObjects];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">self</span>.dataTask = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">self</span>.imageData = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.ownedSession) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.ownedSession invalidateAndCancel];</span><br><span class="line">        <span class="keyword">self</span>.ownedSession = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 需要手动触发_finished的KVO。这个是自定义并发`NSOperation`必须实现的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param finished 改变状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setFinished:(<span class="built_in">BOOL</span>)finished &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"isFinished"</span>];</span><br><span class="line">    _finished = finished;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"isFinished"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 需要手动触发_executing的KVO。这个是自定义并发`NSOperation`必须实现的。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param executing 改变状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setExecuting:(<span class="built_in">BOOL</span>)executing &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"isExecuting"</span>];</span><br><span class="line">    _executing = executing;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"isExecuting"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 返回YES，表明这个NSOperation对象是并发的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return 返回bool值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isConcurrent &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark NSURLSessionDataDelegate</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</span><br><span class="line">          dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line">didReceiveResponse:(<span class="built_in">NSURLResponse</span> *)response</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionResponseDisposition</span> disposition))completionHandler &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//'304 Not Modified' is an exceptional one</span></span><br><span class="line">    <span class="keyword">if</span> (![response respondsToSelector:<span class="keyword">@selector</span>(statusCode)] || (((<span class="built_in">NSHTTPURLResponse</span> *)response).statusCode &lt; <span class="number">400</span> &amp;&amp; ((<span class="built_in">NSHTTPURLResponse</span> *)response).statusCode != <span class="number">304</span>)) &#123;</span><br><span class="line">        <span class="comment">//期望的总长度</span></span><br><span class="line">        <span class="built_in">NSInteger</span> expected = response.expectedContentLength &gt; <span class="number">0</span> ? (<span class="built_in">NSInteger</span>)response.expectedContentLength : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">self</span>.expectedSize = expected;</span><br><span class="line">        <span class="comment">//进度回调Block</span></span><br><span class="line">        <span class="keyword">for</span> (SDWebImageDownloaderProgressBlock progressBlock <span class="keyword">in</span> [<span class="keyword">self</span> callbacksForKey:kProgressCallbackKey]) &#123;</span><br><span class="line">            progressBlock(<span class="number">0</span>, expected, <span class="keyword">self</span>.request.URL);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">self</span>.imageData = [[<span class="built_in">NSMutableData</span> alloc] initWithCapacity:expected];</span><br><span class="line">        <span class="keyword">self</span>.response = response;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadReceiveResponseNotification object:<span class="keyword">self</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSUInteger</span> code = ((<span class="built_in">NSHTTPURLResponse</span> *)response).statusCode;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//This is the case when server returns '304 Not Modified'. It means that remote image is not changed.</span></span><br><span class="line">        <span class="comment">//In case of 304 we need just cancel the operation and return cached image from the cache.</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         如果返回304表示图片么有变化。在这种情况下，我们只需要取消operation并且返回缓存的图片就可以了。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (code == <span class="number">304</span>) &#123;</span><br><span class="line">            [<span class="keyword">self</span> cancelInternal];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [<span class="keyword">self</span>.dataTask cancel];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:<span class="keyword">self</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        [<span class="keyword">self</span> callCompletionBlocksWithError:[<span class="built_in">NSError</span> errorWithDomain:<span class="built_in">NSURLErrorDomain</span> code:((<span class="built_in">NSHTTPURLResponse</span> *)response).statusCode userInfo:<span class="literal">nil</span>]];</span><br><span class="line"></span><br><span class="line">        [<span class="keyword">self</span> done];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这个表示允许继续加载</span></span><br><span class="line">    <span class="keyword">if</span> (completionHandler) &#123;</span><br><span class="line">        completionHandler(<span class="built_in">NSURLSessionResponseAllow</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *会被多次调用。获取图片数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask didReceiveData:(<span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.imageData appendData:data];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">self</span>.options &amp; SDWebImageDownloaderProgressiveDownload) &amp;&amp; <span class="keyword">self</span>.expectedSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// The following code is from http://www.cocoaintheshell.com/2011/05/progressive-images-download-imageio/</span></span><br><span class="line">        <span class="comment">// Thanks to the author @Nyx0uf</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the total bytes downloaded</span></span><br><span class="line">        <span class="comment">//获取已经下载的数据长度</span></span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">NSInteger</span> totalSize = <span class="keyword">self</span>.imageData.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the data source, we must pass ALL the data, not just the new bytes</span></span><br><span class="line">        <span class="built_in">CGImageSourceRef</span> imageSource = <span class="built_in">CGImageSourceCreateWithData</span>((__bridge <span class="built_in">CFDataRef</span>)<span class="keyword">self</span>.imageData, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *width和height都是0的话表示还么有获取到图片的高度和宽度。我们可以通过数据来获取图片的宽度和高度</span></span><br><span class="line"><span class="comment">         *此时表示第一次收到图片数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (width + height == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//获取图片数据的属性</span></span><br><span class="line">            <span class="built_in">CFDictionaryRef</span> properties = <span class="built_in">CGImageSourceCopyPropertiesAtIndex</span>(imageSource, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">if</span> (properties) &#123;</span><br><span class="line">                <span class="built_in">NSInteger</span> orientationValue = <span class="number">-1</span>;</span><br><span class="line">                <span class="comment">//获取高度值</span></span><br><span class="line">                <span class="built_in">CFTypeRef</span> val = <span class="built_in">CFDictionaryGetValue</span>(properties, kCGImagePropertyPixelHeight);</span><br><span class="line">                <span class="keyword">if</span> (val) <span class="built_in">CFNumberGetValue</span>(val, kCFNumberLongType, &amp;height);</span><br><span class="line">                <span class="comment">//获取宽度值</span></span><br><span class="line">                val = <span class="built_in">CFDictionaryGetValue</span>(properties, kCGImagePropertyPixelWidth);</span><br><span class="line">                <span class="keyword">if</span> (val) <span class="built_in">CFNumberGetValue</span>(val, kCFNumberLongType, &amp;width);</span><br><span class="line">                <span class="comment">//获取图片的方向值</span></span><br><span class="line">                val = <span class="built_in">CFDictionaryGetValue</span>(properties, kCGImagePropertyOrientation);</span><br><span class="line">                <span class="keyword">if</span> (val) <span class="built_in">CFNumberGetValue</span>(val, kCFNumberNSIntegerType, &amp;orientationValue);</span><br><span class="line">                <span class="built_in">CFRelease</span>(properties);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// When we draw to Core Graphics, we lose orientation information,</span></span><br><span class="line">                <span class="comment">// which means the image below born of initWithCGIImage will be</span></span><br><span class="line">                <span class="comment">// oriented incorrectly sometimes. (Unlike the image born of initWithData</span></span><br><span class="line">                <span class="comment">// in didCompleteWithError.) So save it here and pass it on later.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line">                orientation = [[<span class="keyword">self</span> <span class="keyword">class</span>] orientationFromPropertyValue:(orientationValue == <span class="number">-1</span> ? <span class="number">1</span> : orientationValue)];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 这个表示已经收到部分图片数据并且还么有获取到所有的图片数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (width + height &gt; <span class="number">0</span> &amp;&amp; totalSize &lt; <span class="keyword">self</span>.expectedSize) &#123;</span><br><span class="line">            <span class="comment">// Create the image</span></span><br><span class="line">            <span class="built_in">CGImageRef</span> partialImageRef = <span class="built_in">CGImageSourceCreateImageAtIndex</span>(imageSource, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line">            <span class="comment">// Workaround for iOS anamorphic image</span></span><br><span class="line">            <span class="keyword">if</span> (partialImageRef) &#123;</span><br><span class="line">                <span class="keyword">const</span> size_t partialHeight = <span class="built_in">CGImageGetHeight</span>(partialImageRef);</span><br><span class="line">                <span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line">                <span class="built_in">CGContextRef</span> bmContext = <span class="built_in">CGBitmapContextCreate</span>(<span class="literal">NULL</span>, width, height, <span class="number">8</span>, width * <span class="number">4</span>, colorSpace, kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);</span><br><span class="line">                <span class="built_in">CGColorSpaceRelease</span>(colorSpace);</span><br><span class="line">                <span class="keyword">if</span> (bmContext) &#123;</span><br><span class="line">                    <span class="built_in">CGContextDrawImage</span>(bmContext, (<span class="built_in">CGRect</span>)&#123;.origin.x = <span class="number">0.0</span>f, .origin.y = <span class="number">0.0</span>f, .size.width = width, .size.height = partialHeight&#125;, partialImageRef);</span><br><span class="line">                    <span class="built_in">CGImageRelease</span>(partialImageRef);</span><br><span class="line">                    partialImageRef = <span class="built_in">CGBitmapContextCreateImage</span>(bmContext);</span><br><span class="line">                    <span class="built_in">CGContextRelease</span>(bmContext);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">CGImageRelease</span>(partialImageRef);</span><br><span class="line">                    partialImageRef = <span class="literal">nil</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (partialImageRef) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line">                <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithCGImage:partialImageRef scale:<span class="number">1</span> orientation:orientation];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> SD_MAC</span></span><br><span class="line">                <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc] initWithCGImage:partialImageRef size:<span class="built_in">NSZeroSize</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                <span class="comment">//获取图片url对应的key</span></span><br><span class="line">                <span class="built_in">NSString</span> *key = [[SDWebImageManager sharedManager] cacheKeyForURL:<span class="keyword">self</span>.request.URL];</span><br><span class="line">                <span class="comment">//根据原始图片数据获取对应scale下面的图片</span></span><br><span class="line">                <span class="built_in">UIImage</span> *scaledImage = [<span class="keyword">self</span> scaledImageForKey:key image:image];</span><br><span class="line">                <span class="comment">//是否解压缩图片</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">self</span>.shouldDecompressImages) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     *解压缩图片</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    image = [<span class="built_in">UIImage</span> decodedImageWithImage:scaledImage];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    image = scaledImage;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">CGImageRelease</span>(partialImageRef);</span><br><span class="line">                </span><br><span class="line">                [<span class="keyword">self</span> callCompletionBlocksWithImage:image imageData:<span class="literal">nil</span> error:<span class="literal">nil</span> finished:<span class="literal">NO</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CFRelease</span>(imageSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (SDWebImageDownloaderProgressBlock progressBlock <span class="keyword">in</span> [<span class="keyword">self</span> callbacksForKey:kProgressCallbackKey]) &#123;</span><br><span class="line">        progressBlock(<span class="keyword">self</span>.imageData.length, <span class="keyword">self</span>.expectedSize, <span class="keyword">self</span>.request.URL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</span><br><span class="line">          dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line"> willCacheResponse:(<span class="built_in">NSCachedURLResponse</span> *)proposedResponse</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSCachedURLResponse</span> *cachedResponse))completionHandler &#123;</span><br><span class="line">    <span class="comment">//根据request的选项。决定是否缓存NSCachedURLResponse</span></span><br><span class="line">    <span class="built_in">NSCachedURLResponse</span> *cachedResponse = proposedResponse;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.request.cachePolicy == <span class="built_in">NSURLRequestReloadIgnoringLocalCacheData</span>) &#123;</span><br><span class="line">        <span class="comment">// Prevents caching of responses</span></span><br><span class="line">        cachedResponse = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (completionHandler) &#123;</span><br><span class="line">        completionHandler(cachedResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark NSURLSessionTaskDelegate</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 网络请求加载完成，在这里处理获得的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task didCompleteWithError:(<span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.dataTask = <span class="literal">nil</span>;</span><br><span class="line">        <span class="comment">//发送图片下载完成的通知</span></span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:<span class="keyword">self</span>];</span><br><span class="line">            <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">                [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadFinishNotification object:<span class="keyword">self</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        [<span class="keyword">self</span> callCompletionBlocksWithError:error];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> callbacksForKey:kCompletedCallbackKey].count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">self</span>.imageData) &#123;</span><br><span class="line">                <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> sd_imageWithData:<span class="keyword">self</span>.imageData];</span><br><span class="line">                <span class="comment">//获取url对应的缓存Key</span></span><br><span class="line">                <span class="built_in">NSString</span> *key = [[SDWebImageManager sharedManager] cacheKeyForURL:<span class="keyword">self</span>.request.URL];</span><br><span class="line">                </span><br><span class="line">                image = [<span class="keyword">self</span> scaledImageForKey:key image:image];</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// Do not force decoding animated GIFs</span></span><br><span class="line">                <span class="keyword">if</span> (!image.images) &#123;</span><br><span class="line">                    <span class="comment">//是否加压缩图片数据</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">self</span>.shouldDecompressImages) &#123;</span><br><span class="line">                        <span class="comment">//如果设置了SDWebImageDownloaderScaleDownLargeImages。则返回处理过的图片</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">self</span>.options &amp; SDWebImageDownloaderScaleDownLargeImages) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line">                            image = [<span class="built_in">UIImage</span> decodedAndScaledDownImageWithImage:image];</span><br><span class="line">                            [<span class="keyword">self</span>.imageData setData:<span class="built_in">UIImagePNGRepresentation</span>(image)];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            image = [<span class="built_in">UIImage</span> decodedImageWithImage:image];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//构建回调Block</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">CGSizeEqualToSize</span>(image.size, <span class="built_in">CGSizeZero</span>)) &#123;</span><br><span class="line">                    [<span class="keyword">self</span> callCompletionBlocksWithError:[<span class="built_in">NSError</span> errorWithDomain:SDWebImageErrorDomain code:<span class="number">0</span> userInfo:@&#123;<span class="built_in">NSLocalizedDescriptionKey</span> : <span class="string">@"Downloaded image has 0 pixels"</span>&#125;]];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    [<span class="keyword">self</span> callCompletionBlocksWithImage:image imageData:<span class="keyword">self</span>.imageData error:<span class="literal">nil</span> finished:<span class="literal">YES</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                [<span class="keyword">self</span> callCompletionBlocksWithError:[<span class="built_in">NSError</span> errorWithDomain:SDWebImageErrorDomain code:<span class="number">0</span> userInfo:@&#123;<span class="built_in">NSLocalizedDescriptionKey</span> : <span class="string">@"Image data is nil"</span>&#125;]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> done];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 验证HTTPS的证书</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task didReceiveChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition, <span class="built_in">NSURLCredential</span> *credential))completionHandler &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition = <span class="built_in">NSURLSessionAuthChallengePerformDefaultHandling</span>;</span><br><span class="line">    __block <span class="built_in">NSURLCredential</span> *credential = <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">//使用可信任证书机构的证书</span></span><br><span class="line">    <span class="keyword">if</span> ([challenge.protectionSpace.authenticationMethod isEqualToString:<span class="built_in">NSURLAuthenticationMethodServerTrust</span>]) &#123;</span><br><span class="line">        <span class="comment">//如果SDWebImageDownloaderAllowInvalidSSLCertificates属性设置了，则不验证SSL证书。直接信任</span></span><br><span class="line">        <span class="keyword">if</span> (!(<span class="keyword">self</span>.options &amp; SDWebImageDownloaderAllowInvalidSSLCertificates)) &#123;</span><br><span class="line">            disposition = <span class="built_in">NSURLSessionAuthChallengePerformDefaultHandling</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            credential = [<span class="built_in">NSURLCredential</span> credentialForTrust:challenge.protectionSpace.serverTrust];</span><br><span class="line">            disposition = <span class="built_in">NSURLSessionAuthChallengeUseCredential</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//使用自己生成的证书</span></span><br><span class="line">        <span class="keyword">if</span> (challenge.previousFailureCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">self</span>.credential) &#123;</span><br><span class="line">                credential = <span class="keyword">self</span>.credential;</span><br><span class="line">                disposition = <span class="built_in">NSURLSessionAuthChallengeUseCredential</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                disposition = <span class="built_in">NSURLSessionAuthChallengeCancelAuthenticationChallenge</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            disposition = <span class="built_in">NSURLSessionAuthChallengeCancelAuthenticationChallenge</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//验证证书</span></span><br><span class="line">    <span class="keyword">if</span> (completionHandler) &#123;</span><br><span class="line">        completionHandler(disposition, credential);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark Helper methods</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 把整数转换为对应的枚举值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param value 整数值</span></span><br><span class="line"><span class="comment"> @return 枚举值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">UIImageOrientation</span>)orientationFromPropertyValue:(<span class="built_in">NSInteger</span>)value &#123;</span><br><span class="line">    <span class="keyword">switch</span> (value) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">UIImageOrientationUp</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">UIImageOrientationDown</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">UIImageOrientationLeft</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">UIImageOrientationRight</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">UIImageOrientationUpMirrored</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">UIImageOrientationDownMirrored</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">UIImageOrientationLeftMirrored</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">UIImageOrientationRightMirrored</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">UIImageOrientationUp</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过image对象获取对应scale模式下的图像</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)scaledImageForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key image:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    <span class="keyword">return</span> SDScaledImageForKey(key, image);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)shouldContinueWhenAppEntersBackground &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.options &amp; SDWebImageDownloaderContinueInBackground;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)callCompletionBlocksWithError:(<span class="keyword">nullable</span> <span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    [<span class="keyword">self</span> callCompletionBlocksWithImage:<span class="literal">nil</span> imageData:<span class="literal">nil</span> error:error finished:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 处理回调</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param image UIImage数据</span></span><br><span class="line"><span class="comment"> @param imageData Image的data数据</span></span><br><span class="line"><span class="comment"> @param error 错误</span></span><br><span class="line"><span class="comment"> @param finished 是否完成的标记位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)callCompletionBlocksWithImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image</span><br><span class="line">                            imageData:(<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)imageData</span><br><span class="line">                                error:(<span class="keyword">nullable</span> <span class="built_in">NSError</span> *)error</span><br><span class="line">                             finished:(<span class="built_in">BOOL</span>)finished &#123;</span><br><span class="line">    <span class="comment">//获取key对应的回调Block数组</span></span><br><span class="line">    <span class="built_in">NSArray</span>&lt;<span class="keyword">id</span>&gt; *completionBlocks = [<span class="keyword">self</span> callbacksForKey:kCompletedCallbackKey];</span><br><span class="line">    dispatch_main_async_safe(^&#123;</span><br><span class="line">        <span class="comment">//调用回调</span></span><br><span class="line">        <span class="keyword">for</span> (SDWebImageDownloaderCompletedBlock completedBlock <span class="keyword">in</span> completionBlocks) &#123;</span><br><span class="line">            completedBlock(image, imageData, error, finished);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>最后<a href="https://huang303513.github.io/2017/05/04/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E5%9B%9B" target="_blank" rel="noopener">原文地址</a>.html),<a href="https://github.com/huang303513/iOSSourceCodeStudy">demo地址</a>。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDWebImage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDWebImage源码解析(三)</title>
      <link href="/2017/05/03/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%B8%89)/"/>
      <url>/2017/05/03/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p>这篇博文中，我将分析<code>SDWebImageManager</code>和<code>SDImageCache</code>。<code>SDWebImageManager</code>拥有一个<code>SDWebImageCache</code>和<code>SDWebImageDownloader</code>属性分别用于图片的缓存和加载处理。为UIView及其子类提供了加载图片的统一接口。管理正在加载操作的集合,这个类是一个单列。同时管理各种加载选项的处理。<code>SDImageCache</code>负责<code>SDWebImage</code>的整个缓存工作，是一个单列对象。缓存路径处理、缓存名字处理、管理内存缓存和磁盘缓存的创建和删除、根据指定key获取图片、存入图片的类型处理、根据缓存的创建和修改日期删除缓存。</p><h2 id="2-SDWebImageManager分析"><a href="#2-SDWebImageManager分析" class="headerlink" title="2 SDWebImageManager分析"></a>2 <code>SDWebImageManager</code>分析</h2><p>UIImageView等各种视图通过UIView+WebCache分类的<code>sd_internalSetImageWithURL</code>方法来调用<code>SDWebImageManager</code>类的如下方法实现图片加载：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 这个方法是核心方法。UIImageView等这种分类都默认通过调用这个方法来获取数据。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param url 图片的url地址</span></span><br><span class="line"><span class="comment"> @param options 获取图片的属性</span></span><br><span class="line"><span class="comment"> @param progressBlock 加载进度回调</span></span><br><span class="line"><span class="comment"> @param completedBlock 加载完成回调</span></span><br><span class="line"><span class="comment"> @return 返回一个加载的载体对象。以便提供给后面取消删除等。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;SDWebImageOperation&gt;)loadImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</span><br><span class="line">                                              options:(SDWebImageOptions)options</span><br><span class="line">                                             progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                            completed:(<span class="keyword">nullable</span> SDInternalCompletionBlock)completedBlock;</span><br></pre></td></tr></table></figure><p>首先看他地第二个参数<code>options</code>。这个参数指定了图片加载过程中的不同选项。指定不同选项，<code>SDWebImage</code>可以根据选项做不同的处理，这是一个枚举类型,多个选项之间可以组合使用。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 枚举，定义了图片加载处理过程中的选项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, SDWebImageOptions) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     默认情况下，当一个URL下载失败的时候，这个URL会被加入黑名单列表，下次再有这个url的请求则停止请求。</span></span><br><span class="line"><span class="comment">     如果为true，这个值表示需要再尝试请求。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageRetryFailed = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     默认情况下，当UI可以交互的时候就开始加载图片。这个标记可以阻止这个时候加载。</span></span><br><span class="line"><span class="comment">     而是当UIScrollView开始减速滑动的时候开始加载。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageLowPriority = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     这个属性禁止磁盘缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageCacheMemoryOnly = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     这个标记允许图片在加载过程中显示，就像浏览器那样。</span></span><br><span class="line"><span class="comment">     默认情况下，图片只会在加载完成以后再显示。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageProgressiveDownload = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *即使本地已经缓存了图片，但是根据HTTP的缓存策略去网络上加载图片。也就是说本地缓存了也不管了，尝试从网络上加载数据。但是具体是从代理加载、HTTP缓存加载、还是原始服务器加载这个就更具HTTP的请求头配置。</span></span><br><span class="line"><span class="comment">     *使用NSURLCache而不是SDWebImage来处理磁盘缓存。从而可能会导致轻微的性能损害。</span></span><br><span class="line"><span class="comment">     *这个选项专门用于处理，url地址没有变，但是url对于的图片数据在服务器改变的情况。</span></span><br><span class="line"><span class="comment">     *如果一个缓存图片更新了，则completion这个回调会被调用两次，一次返回缓存图片，一次返回最终图片。</span></span><br><span class="line"><span class="comment">     *我们只有在不能确保URL和他对应的内容不能完全对应的时候才使用这个标记。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageRefreshCached = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     当应用进入后台以后，图片继续下载。应用进入后台以后，通过向系统申请额外的时间来完成。如果时间超时，那么下载操作会被取消。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageContinueInBackground = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     处理缓存在`NSHTTPCookieStore`对象里面的cookie。通过设置`NSMutableURLRequest.HTTPShouldHandleCookies = YES`来实现的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageHandleCookies = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *允许非信任的SSL证书请求。</span></span><br><span class="line"><span class="comment">     *在测试的时候很有用。但是正式环境要小心使用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageAllowInvalidSSLCertificates = <span class="number">1</span> &lt;&lt; <span class="number">7</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 默认情况下，图片加载的顺序是根据加入队列的顺序加载的。但是这个标记会把任务加入队列的最前面。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageHighPriority = <span class="number">1</span> &lt;&lt; <span class="number">8</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     默认情况下，在图片加载的过程中，会显示占位图。</span></span><br><span class="line"><span class="comment">     但是这个标记会阻止显示占位图直到图片加载完成。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageDelayPlaceholder = <span class="number">1</span> &lt;&lt; <span class="number">9</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *默认情况下，我们不会去调用`animated images`(估计就是多张图片循环显示或者GIF图片)的`transformDownloadedImage`代理方法来处理图片。因为大部分transformation操作会对图片做无用处理。</span></span><br><span class="line"><span class="comment">     *用这个标记表示无论如何都要对图片做transform处理。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageTransformAnimatedImage = <span class="number">1</span> &lt;&lt; <span class="number">10</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *默认情况下，图片再下载完成以后都会被自动加载到UIImageView对象上面。但是有时我们希望UIImageView加载我们手动处理以后的图片。</span></span><br><span class="line"><span class="comment">     *这个标记允许我们在completion这个Block中手动设置处理好以后的图片。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageAvoidAutoSetImage = <span class="number">1</span> &lt;&lt; <span class="number">11</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *默认情况下，图片会按照他的原始大小来解码显示。根据设备的内存限制，这个属性会调整图片的尺寸到合适的大小再解压缩。</span></span><br><span class="line"><span class="comment">     *如果`SDWebImageProgressiveDownload`标记被设置了，则这个flag不起作用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDWebImageScaleDownLargeImages = <span class="number">1</span> &lt;&lt; <span class="number">12</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来我先看<code>SDWebImageManager</code>的初始化过程。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    SDImageCache *cache = [SDImageCache sharedImageCache];</span><br><span class="line">    SDWebImageDownloader *downloader = [SDWebImageDownloader sharedDownloader];</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithCache:cache downloader:downloader];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 初始化SDImageCache和SDWebImageDownloader对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param cache SDImageCache对象</span></span><br><span class="line"><span class="comment"> @param downloader SDWebImageDownloader对象</span></span><br><span class="line"><span class="comment"> @return 返回初始化结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)initWithCache:(<span class="keyword">nonnull</span> SDImageCache *)cache downloader:(<span class="keyword">nonnull</span> SDWebImageDownloader *)downloader &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</span><br><span class="line">        _imageCache = cache;</span><br><span class="line">        _imageDownloader = downloader;</span><br><span class="line">        <span class="comment">//用于保存加载失败的url集合</span></span><br><span class="line">        _failedURLs = [<span class="built_in">NSMutableSet</span> new];</span><br><span class="line">        <span class="comment">//用于保存当前正在加载的Operation</span></span><br><span class="line">        _runningOperations = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loadImageWithURL</code>方法是<code>SDWebImageManager</code>最核心的方法，实现过程：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 这个方法是核心方法。UIImageView等这种分类都默认通过调用这个方法来获取数据。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param url 图片的url地址</span></span><br><span class="line"><span class="comment"> @param options 获取图片的属性</span></span><br><span class="line"><span class="comment"> @param progressBlock 加载进度回调</span></span><br><span class="line"><span class="comment"> @param completedBlock 加载完成回调</span></span><br><span class="line"><span class="comment"> @return 返回一个加载的载体对象。以便提供给后面取消删除等。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">id</span> &lt;SDWebImageOperation&gt;)loadImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</span><br><span class="line">                                     options:(SDWebImageOptions)options</span><br><span class="line">                                    progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                                   completed:(<span class="keyword">nullable</span> SDInternalCompletionBlock)completedBlock &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     如果传入的url是NSString格式的。则转换为NSURL类型再处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ([url isKindOfClass:<span class="built_in">NSString</span>.class]) &#123;</span><br><span class="line">        url = [<span class="built_in">NSURL</span> URLWithString:(<span class="built_in">NSString</span> *)url];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prevents app crashing on argument type error like sending NSNull instead of NSURL</span></span><br><span class="line">    <span class="comment">//如果url不会NSURL类型的对象。则置为nil</span></span><br><span class="line">    <span class="keyword">if</span> (![url isKindOfClass:<span class="built_in">NSURL</span>.class]) &#123;</span><br><span class="line">        url = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     图片加载获取获取过程中绑定一个`SDWebImageCombinedOperation`对象。以方便后续再通过这个对象对url的加载控制。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    __block SDWebImageCombinedOperation *operation = [SDWebImageCombinedOperation new];</span><br><span class="line">    __<span class="keyword">weak</span> SDWebImageCombinedOperation *weakOperation = operation;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BOOL</span> isFailedUrl = <span class="literal">NO</span>;</span><br><span class="line">    <span class="comment">//当前url是否在失败url的集合里面</span></span><br><span class="line">    <span class="keyword">if</span> (url) &#123;</span><br><span class="line">        <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.failedURLs) &#123;</span><br><span class="line">            isFailedUrl = [<span class="keyword">self</span>.failedURLs containsObject:url];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     如果url是失败的url或者url有问题等各种问题。则直接根据opeation来做异常情况的处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (url.absoluteString.length == <span class="number">0</span> || (!(options &amp; SDWebImageRetryFailed) &amp;&amp; isFailedUrl)) &#123;</span><br><span class="line">        <span class="comment">//构建回调Block</span></span><br><span class="line">        [<span class="keyword">self</span> callCompletionBlockForOperation:operation completion:completedBlock error:[<span class="built_in">NSError</span> errorWithDomain:<span class="built_in">NSURLErrorDomain</span> code:<span class="built_in">NSURLErrorFileDoesNotExist</span> userInfo:<span class="literal">nil</span>] url:url];</span><br><span class="line">        <span class="keyword">return</span> operation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把加载图片的一个载体存入runningOperations。里面是所有正在做图片加载过程的operation的集合。</span></span><br><span class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.runningOperations) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.runningOperations addObject:operation];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据url获取url对应的key</span></span><br><span class="line">    <span class="built_in">NSString</span> *key = [<span class="keyword">self</span> cacheKeyForURL:url];</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *如果图片是从内存加载，则返回的cacheOperation是nil，</span></span><br><span class="line"><span class="comment">    *如果是从磁盘加载，则返回的cacheOperation是`NSOperation`对象。</span></span><br><span class="line"><span class="comment">    *如果是从网络加载，则返回的cacheOperation对象是`SDWebImageDownloaderOperation`对象。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    operation.cacheOperation = [<span class="keyword">self</span>.imageCache queryCacheOperationForKey:key done:^(<span class="built_in">UIImage</span> *cachedImage, <span class="built_in">NSData</span> *cachedData, SDImageCacheType cacheType) &#123;</span><br><span class="line">        <span class="comment">//从缓存中获取图片数据返回</span></span><br><span class="line">        <span class="comment">//如果已经取消了操作。则直接返回并且移除对应的opetation对象</span></span><br><span class="line">        <span class="keyword">if</span> (operation.isCancelled) &#123;</span><br><span class="line">            [<span class="keyword">self</span> safelyRemoveOperationFromRunning:operation];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((!cachedImage || options &amp; SDWebImageRefreshCached) &amp;&amp; (![<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(imageManager:shouldDownloadImageForURL:)] || [<span class="keyword">self</span>.delegate imageManager:<span class="keyword">self</span> shouldDownloadImageForURL:url])) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             如果从缓存获取图片失败。或者设置了SDWebImageRefreshCached来忽略缓存。则先把缓存的图片返回。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123;</span><br><span class="line">                <span class="comment">//构建回调Block</span></span><br><span class="line">                [<span class="keyword">self</span> callCompletionBlockForOperation:weakOperation completion:completedBlock image:cachedImage data:cachedData error:<span class="literal">nil</span> cacheType:cacheType finished:<span class="literal">YES</span> url:url];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// download if no image or requested to refresh anyway, and download allowed by delegate</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             把图片加载的`SDWebImageOptions`类型枚举转换为图片下载的`SDWebImageDownloaderOptions`类型的枚举</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            SDWebImageDownloaderOptions downloaderOptions = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (options &amp; SDWebImageLowPriority) downloaderOptions |= SDWebImageDownloaderLowPriority;</span><br><span class="line">            <span class="keyword">if</span> (options &amp; SDWebImageProgressiveDownload) downloaderOptions |= SDWebImageDownloaderProgressiveDownload;</span><br><span class="line">            <span class="keyword">if</span> (options &amp; SDWebImageRefreshCached) downloaderOptions |= SDWebImageDownloaderUseNSURLCache;</span><br><span class="line">            <span class="keyword">if</span> (options &amp; SDWebImageContinueInBackground) downloaderOptions |= SDWebImageDownloaderContinueInBackground;</span><br><span class="line">            <span class="keyword">if</span> (options &amp; SDWebImageHandleCookies) downloaderOptions |= SDWebImageDownloaderHandleCookies;</span><br><span class="line">            <span class="keyword">if</span> (options &amp; SDWebImageAllowInvalidSSLCertificates) downloaderOptions |= SDWebImageDownloaderAllowInvalidSSLCertificates;</span><br><span class="line">            <span class="keyword">if</span> (options &amp; SDWebImageHighPriority) downloaderOptions |= SDWebImageDownloaderHighPriority;</span><br><span class="line">            <span class="keyword">if</span> (options &amp; SDWebImageScaleDownLargeImages) downloaderOptions |= SDWebImageDownloaderScaleDownLargeImages;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             如果设置了强制刷新缓存的选项。则`SDWebImageDownloaderProgressiveDownload`选项失效并且添加`SDWebImageDownloaderIgnoreCachedResponse`选项。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123;</span><br><span class="line">                <span class="comment">// force progressive off if image already cached but forced refreshing</span></span><br><span class="line">                downloaderOptions &amp;= ~SDWebImageDownloaderProgressiveDownload;</span><br><span class="line">                <span class="comment">// ignore image read from NSURLCache if image if cached but force refreshing</span></span><br><span class="line">                downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             新建一个网络下载的操作。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            SDWebImageDownloadToken *subOperationToken = [<span class="keyword">self</span>.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(<span class="built_in">UIImage</span> *downloadedImage, <span class="built_in">NSData</span> *downloadedData, <span class="built_in">NSError</span> *error, <span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">                __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</span><br><span class="line">                <span class="comment">//如果图片下载结束以后，对应的图片加载操作已经取消。则什么处理都不做</span></span><br><span class="line">                <span class="keyword">if</span> (!strongOperation || strongOperation.isCancelled) &#123;</span><br><span class="line">                   <span class="comment">//如果operation已经被取消了，则什么也不做</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                    <span class="comment">//如果加载出错。则直接返回回调。并且添加到failedURLs中</span></span><br><span class="line">                    [<span class="keyword">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock error:error url:url];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (   error.code != <span class="built_in">NSURLErrorNotConnectedToInternet</span></span><br><span class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorCancelled</span></span><br><span class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorTimedOut</span></span><br><span class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorInternationalRoamingOff</span></span><br><span class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorDataNotAllowed</span></span><br><span class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorCannotFindHost</span></span><br><span class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorCannotConnectToHost</span></span><br><span class="line">                        &amp;&amp; error.code != <span class="built_in">NSURLErrorNetworkConnectionLost</span>) &#123;</span><br><span class="line">                        <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.failedURLs) &#123;</span><br><span class="line">                            [<span class="keyword">self</span>.failedURLs addObject:url];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//网络图片加载成功</span></span><br><span class="line">                    <span class="keyword">if</span> ((options &amp; SDWebImageRetryFailed)) &#123;</span><br><span class="line">                        <span class="comment">//如果有重试失败下载的选项。则把url从failedURLS中移除</span></span><br><span class="line">                        <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.failedURLs) &#123;</span><br><span class="line">                            [<span class="keyword">self</span>.failedURLs removeObject:url];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="built_in">BOOL</span> cacheOnDisk = !(options &amp; SDWebImageCacheMemoryOnly);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (options &amp; SDWebImageRefreshCached &amp;&amp; cachedImage &amp;&amp; !downloadedImage) &#123;</span><br><span class="line">                        <span class="comment">// Image refresh hit the NSURLCache cache, do not call the completion block</span></span><br><span class="line">                        <span class="comment">//如果成功下载图片。并且图片是动态图片。并且设置了SDWebImageTransformAnimatedImage属性。则处理图片</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (downloadedImage &amp;&amp; (!downloadedImage.images || (options &amp; SDWebImageTransformAnimatedImage)) &amp;&amp; [<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(imageManager:transformDownloadedImage:withURL:)]) &#123;</span><br><span class="line">                        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>), ^&#123;</span><br><span class="line">                            <span class="comment">//获取transform以后的图片</span></span><br><span class="line">                            <span class="built_in">UIImage</span> *transformedImage = [<span class="keyword">self</span>.delegate imageManager:<span class="keyword">self</span> transformDownloadedImage:downloadedImage withURL:url];</span><br><span class="line">                            <span class="comment">//存储transform以后的的图片</span></span><br><span class="line">                            <span class="keyword">if</span> (transformedImage &amp;&amp; finished) &#123;</span><br><span class="line">                                <span class="built_in">BOOL</span> imageWasTransformed = ![transformedImage isEqual:downloadedImage];</span><br><span class="line">                                <span class="comment">// pass nil if the image was transformed, so we can recalculate the data from the image</span></span><br><span class="line">                                [<span class="keyword">self</span>.imageCache storeImage:transformedImage imageData:(imageWasTransformed ? <span class="literal">nil</span> : downloadedData) forKey:key toDisk:cacheOnDisk completion:<span class="literal">nil</span>];</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//回调拼接</span></span><br><span class="line">                            [<span class="keyword">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:transformedImage data:downloadedData error:<span class="literal">nil</span> cacheType:SDImageCacheTypeNone finished:finished url:url];</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//如果成功下载图片。并且图片不是图片。则直接缓存和回调</span></span><br><span class="line">                        <span class="keyword">if</span> (downloadedImage &amp;&amp; finished) &#123;</span><br><span class="line">                            [<span class="keyword">self</span>.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:<span class="literal">nil</span>];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//回调拼接</span></span><br><span class="line">                        [<span class="keyword">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:<span class="literal">nil</span> cacheType:SDImageCacheTypeNone finished:finished url:url];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//从正在加载的图片操作集合中移除当前操作</span></span><br><span class="line">                <span class="keyword">if</span> (finished) &#123;</span><br><span class="line">                    [<span class="keyword">self</span> safelyRemoveOperationFromRunning:strongOperation];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;];</span><br><span class="line">            <span class="comment">//重置cancelBlock，取消下载operation</span></span><br><span class="line">            operation.cancelBlock = ^&#123;</span><br><span class="line">                [<span class="keyword">self</span>.imageDownloader cancel:subOperationToken];</span><br><span class="line">                __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</span><br><span class="line">                [<span class="keyword">self</span> safelyRemoveOperationFromRunning:strongOperation];</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cachedImage) &#123;</span><br><span class="line">            <span class="comment">//如果获取到了缓存图片。在直接通过缓存图片处理</span></span><br><span class="line">            __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</span><br><span class="line">            [<span class="keyword">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:cachedImage data:cachedData error:<span class="literal">nil</span> cacheType:cacheType finished:<span class="literal">YES</span> url:url];</span><br><span class="line">            [<span class="keyword">self</span> safelyRemoveOperationFromRunning:operation];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Image not in cache and download disallowed by delegate</span></span><br><span class="line">            <span class="comment">//图片么有缓存、并且图片也没有下载</span></span><br><span class="line">            __<span class="keyword">strong</span> __<span class="keyword">typeof</span>(weakOperation) strongOperation = weakOperation;</span><br><span class="line">            [<span class="keyword">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:<span class="literal">nil</span> data:<span class="literal">nil</span> error:<span class="literal">nil</span> cacheType:SDImageCacheTypeNone finished:<span class="literal">YES</span> url:url];</span><br><span class="line">            [<span class="keyword">self</span> safelyRemoveOperationFromRunning:operation];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> operation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对这个方法的分析，他主要实现的功能有：</p><ul><li>创建一个<code>SDWebImageCombinedOperation</code>对象，调用者可以通过这个对象来对加载做取消等操作。这个对象的cancelOperation属性有如下几种情况。<ul><li>如果图片是从内存加载，则返回的cacheOperation是nil。</li><li>如果是从磁盘加载，则返回的cacheOperation是<code>NSOperation</code>对象。</li><li>如果是从网络加载，则返回的cacheOperation对象是<code>SDWebImageDownloaderOperation</code>对象。</li></ul></li><li>通过<code>failedURLs</code>属性来保存加载失败的url。通过它可以阻止失败的url再次加载，提高用户体验。</li><li>通过<code>runningOperations</code>属性记录当前正在加载的Operation列表。</li><li>加载结束以后，通过<code>callCompletionBlockForOperation</code>方法来拼接回调Block。</li><li>把<code>SDWebImageOptions</code>类型的枚举值转换为<code>SDWebImageDownloaderOptions</code>类型的枚举值。</li><li>图片成功从网络加载以后，通过<code>imageCache</code>属性的<code>storeImage</code>方法来缓存图片。</li></ul><p>另外还有一些辅助性的方法,用于处理缓存判断、url与key转换等功能:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据url获取url对应的缓存key。</span></span><br><span class="line"><span class="comment"> 如果有实现指定的url转换key的Block，则用这个方式转换为key。</span></span><br><span class="line"><span class="comment"> 否则直接用url的绝对值多为key</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param url url</span></span><br><span class="line"><span class="comment"> @return 缓存的key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)cacheKeyForURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url &#123;</span><br><span class="line">    <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">@""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.cacheKeyFilter) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.cacheKeyFilter(url);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url.absoluteString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 一个url的缓存是否存在</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param url 缓存数据对应的url</span></span><br><span class="line"><span class="comment"> @param completionBlock 缓存结果回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)cachedImageExistsForURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</span><br><span class="line">                     completion:(<span class="keyword">nullable</span> SDWebImageCheckCacheCompletionBlock)completionBlock &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *key = [<span class="keyword">self</span> cacheKeyForURL:url];</span><br><span class="line">    <span class="comment">//内存里面是否有key的缓存</span></span><br><span class="line">    <span class="built_in">BOOL</span> isInMemoryCache = ([<span class="keyword">self</span>.imageCache imageFromMemoryCacheForKey:key] != <span class="literal">nil</span>);</span><br><span class="line">    <span class="comment">//内存缓存</span></span><br><span class="line">    <span class="keyword">if</span> (isInMemoryCache) &#123;</span><br><span class="line">        <span class="comment">// making sure we call the completion block on the main queue</span></span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            <span class="keyword">if</span> (completionBlock) &#123;</span><br><span class="line">                completionBlock(<span class="literal">YES</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//磁盘缓存</span></span><br><span class="line">    [<span class="keyword">self</span>.imageCache diskImageExistsWithKey:key completion:^(<span class="built_in">BOOL</span> isInDiskCache) &#123;</span><br><span class="line">        <span class="comment">// the completion block of checkDiskCacheForImageWithKey:completion: is always called on the main queue, no need to further dispatch</span></span><br><span class="line">        <span class="keyword">if</span> (completionBlock) &#123;</span><br><span class="line">            completionBlock(isInDiskCache);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> url是否有磁盘缓存数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param url url</span></span><br><span class="line"><span class="comment"> @param completionBlock 回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)diskImageExistsForURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</span><br><span class="line">                   completion:(<span class="keyword">nullable</span> SDWebImageCheckCacheCompletionBlock)completionBlock &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *key = [<span class="keyword">self</span> cacheKeyForURL:url];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.imageCache diskImageExistsWithKey:key completion:^(<span class="built_in">BOOL</span> isInDiskCache) &#123;</span><br><span class="line">        <span class="comment">// the completion block of checkDiskCacheForImageWithKey:completion: is always called on the main queue, no need to further dispatch</span></span><br><span class="line">        <span class="keyword">if</span> (completionBlock) &#123;</span><br><span class="line">            completionBlock(isInDiskCache);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-SDWebImageCombinedOperation分析"><a href="#2-1-SDWebImageCombinedOperation分析" class="headerlink" title="2.1 SDWebImageCombinedOperation分析"></a>2.1 <code>SDWebImageCombinedOperation</code>分析</h4><p>从上面的方法，发现<code>loadImageWithURL</code>方法会返回一个<code>SDWebImageCombinedOperation</code>给调用者,这个对象有个<code>cancel</code>方法,这个方法继承自<code>SDWebImageOperation</code>协议。方法里面会调用<code>SDWebImageDownlaoderOperation</code>或者<code>NSOperation</code>的cancel方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 通过这个对象关联一个`SDWebImageDownloaderOperation`对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SDWebImageCombinedOperation</span> : <span class="title">NSObject</span> &lt;<span class="title">SDWebImageOperation</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 用于判断Operation是否已经取消</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>, <span class="keyword">getter</span> = isCancelled) <span class="built_in">BOOL</span> cancelled;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 取消回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) SDWebImageNoParamsBlock cancelBlock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> SDWebImageDownloaderOperation对象。可以通过这个属性取消一个NSOperation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">NSOperation</span> *cacheOperation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SDWebImageCombinedOperation</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 取消Operation的回调Block</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param cancelBlock 回调Block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setCancelBlock:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)cancelBlock &#123;</span><br><span class="line">    <span class="comment">// check if the operation is already cancelled, then we just call the cancelBlock</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.isCancelled) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cancelBlock) &#123;</span><br><span class="line">            cancelBlock();</span><br><span class="line">        &#125;</span><br><span class="line">        _cancelBlock = <span class="literal">nil</span>; <span class="comment">// don't forget to nil the cancelBlock, otherwise we will get crashes</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _cancelBlock = [cancelBlock <span class="keyword">copy</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 调用cancel方法。这个方法继承自`SDWebImageOperation`协议。方法里面会调用`SDWebImageDownlaoderOperation`或者`NSOperation`的cancel方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)cancel &#123;</span><br><span class="line">    <span class="keyword">self</span>.cancelled = <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.cacheOperation) &#123;</span><br><span class="line">        <span class="comment">//调用`SDWebImageDownlaoderOperation`或者`NSOperation`的cancel方法</span></span><br><span class="line">        [<span class="keyword">self</span>.cacheOperation cancel];</span><br><span class="line">        <span class="keyword">self</span>.cacheOperation = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.cancelBlock) &#123;</span><br><span class="line">        <span class="keyword">self</span>.cancelBlock();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> this is a temporary fix to #809.</span></span><br><span class="line">        <span class="comment">// Until we can figure the exact cause of the crash, going with the ivar instead of the setter</span></span><br><span class="line">        <span class="comment">//        self.cancelBlock = nil;</span></span><br><span class="line">        _cancelBlock = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>那么取消一个Operation是在哪里呢？其实就在<code>UIView+WebCache</code>中,所有使用<code>SDWebImage</code>的View都可以使用这个方法来取消下载Operation：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 取消当前Class对应的所有加载请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)sd_cancelCurrentImageLoad &#123;</span><br><span class="line">    [<span class="keyword">self</span> sd_cancelImageLoadOperationWithKey:<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>])];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个方法又会调用<code>UIView+WebCacheOperation</code>分类的<code>sd_cancelImageLoadOperationWithKey</code>方法来实现，这个方法会调用<code>SDWebImageCombinedOperation</code>对象的<code>cancel</code>方法,然后在<code>cancel</code>方法中再调用<code>SDWebImageDownloadOperation</code>或者<code>NSOperation</code>的<code>cancel</code>方法：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 取消当前key对应的所有`SDWebImageCombinedOperation`对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param key Operation对应的key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)sd_cancelImageLoadOperationWithKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="comment">// Cancel in progress downloader from queue</span></span><br><span class="line">    <span class="comment">//获取当前View对应的所有key</span></span><br><span class="line">    SDOperationsDictionary *operationDictionary = [<span class="keyword">self</span> operationDictionary];</span><br><span class="line">    <span class="comment">//获取对应的图片加载Operation</span></span><br><span class="line">    <span class="keyword">id</span> operations = operationDictionary[key];</span><br><span class="line">    <span class="comment">//取消所有当前View对应的所有Operation</span></span><br><span class="line">    <span class="keyword">if</span> (operations) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([operations isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">id</span> &lt;SDWebImageOperation&gt; operation <span class="keyword">in</span> operations) &#123;</span><br><span class="line">                <span class="keyword">if</span> (operation) &#123;</span><br><span class="line">                    <span class="comment">//SDWebImageCombinedOperation对象的cancel方法</span></span><br><span class="line">                    [operation cancel];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([operations conformsToProtocol:<span class="class"><span class="keyword">@protocol</span>(<span class="title">SDWebImageOperation</span>)])</span>&#123;</span><br><span class="line">            [(<span class="keyword">id</span>&lt;SDWebImageOperation&gt;) operations cancel];</span><br><span class="line">        &#125;</span><br><span class="line">        [operationDictionary removeObjectForKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-SDImageCache分析"><a href="#3-SDImageCache分析" class="headerlink" title="3 SDImageCache分析"></a>3 <code>SDImageCache</code>分析</h2><p>从上面的代码中，发现<code>SDWebImageManager</code>通过<code>SDImageCache</code>来获取/存储图片，而且<code>SDImageCache</code>是一个单列对象。他的具体实现可以总结为如下几点：</p><ul><li>通过<code>AutoPurgeCache</code>这个<code>NSCache</code>子类来管理内存缓存。当接收到内存警告的时候，移除内存缓存的所有对象。</li><li>接收到<code>UIApplicationDidReceiveMemoryWarningNotification</code>通知以后，会删除内存中缓存的图片。</li><li>接收到<code>UIApplicationWillTerminateNotification</code>通知以后，会通过<code>deleteOldFiles</code>方法删除老的图片。具体删除规则如下：<ul><li>缓存大小、过期日期、是否解压缩缓存、是否允许内存缓存都是通过<code>SDImageCacheConfig</code>这个对象来配置的。</li><li>首先会迭代缓存目录下的所有文件，对于大于一周的图片数据全部删除。</li><li>然后会记录缓存目录的所有大小，如果当前缓存大于默认缓存，则按照创建日期开始删除图片缓存，直到缓存大小小于默认缓存大小。</li></ul></li><li>当接收到<code>UIApplicationDidEnterBackgroundNotification</code>通知以后，会调用<code>deleteOldFilesWithCompletionBlock</code>来清理缓存数据。</li><li>定义了一些列方法来处理图片的获取、缓存、移除操作。主要有下面几个方法：<ul><li><code>queryCacheOperationForKey</code>查询指定key对应的缓存图片，先从内存查找，然后从磁盘查找。</li><li><code>removeImageForKey</code>移除指定的缓存图片。</li><li><code>diskImageDataBySearchingAllPathsForKey</code>在磁盘上查找指定key对应的图片。</li><li><code>storeImageDataToDisk</code>把指定的图片数据存入磁盘。</li></ul></li><li>通过<code>cachedFileNameForKey</code>方法获取一张图片对应的MD5加密的缓存名字。</li></ul><p><code>SDImageCache</code>的完整实现如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AutoPurgeCache</span> : <span class="title">NSCache</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 如果接收到内存警告、移除所有的缓存对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AutoPurgeCache</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT</span></span><br><span class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(removeAllObjects) name:<span class="built_in">UIApplicationDidReceiveMemoryWarningNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT</span></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIApplicationDidReceiveMemoryWarningNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 计算一张图片占用内存的大小</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param image 图片</span></span><br><span class="line"><span class="comment"> @return 占用内存大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FOUNDATION_STATIC_INLINE <span class="built_in">NSUInteger</span> SDCacheCostForImage(<span class="built_in">UIImage</span> *image) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_MAC</span></span><br><span class="line">    <span class="keyword">return</span> image.size.height * image.size.width;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line">    <span class="keyword">return</span> image.size.height * image.size.width * image.scale * image.scale;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 单列对象、用处管理图片的缓存以及缓存图片的处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SDImageCache</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Properties</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nonnull</span>) <span class="built_in">NSCache</span> *memCache;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nonnull</span>) <span class="built_in">NSString</span> *diskCachePath;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">NSMutableArray</span>&lt;<span class="built_in">NSString</span> *&gt; *customPaths;</span><br><span class="line"><span class="keyword">@property</span> (SDDispatchQueueSetterSementics, <span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>) <span class="built_in">dispatch_queue_t</span> ioQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SDImageCache</span> </span>&#123;</span><br><span class="line">    <span class="built_in">NSFileManager</span> *_fileManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Singleton, init, dealloc</span></span><br><span class="line">+ (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)sharedImageCache &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> once;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">id</span> instance;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;once, ^&#123;</span><br><span class="line">        instance = [<span class="keyword">self</span> new];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithNamespace:<span class="string">@"default"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)initWithNamespace:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)ns &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *path = [<span class="keyword">self</span> makeDiskCachePath:ns];</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithNamespace:ns diskCacheDirectory:path];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)initWithNamespace:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)ns</span><br><span class="line">                       diskCacheDirectory:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)directory &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *fullNamespace = [<span class="string">@"com.hackemist.SDWebImageCache."</span> stringByAppendingString:ns];</span><br><span class="line">        <span class="comment">// 初始化一个串行的dispatch_queue_t</span></span><br><span class="line">        _ioQueue = dispatch_queue_create(<span class="string">"com.hackemist.SDWebImageCache"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">        <span class="comment">//初始化缓存策略配置对象</span></span><br><span class="line">        _config = [[SDImageCacheConfig alloc] init];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化内存缓存对象</span></span><br><span class="line">        _memCache = [[AutoPurgeCache alloc] init];</span><br><span class="line">        _memCache.name = fullNamespace;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化磁盘缓存路径</span></span><br><span class="line">        <span class="keyword">if</span> (directory != <span class="literal">nil</span>) &#123;</span><br><span class="line">            _diskCachePath = [directory stringByAppendingPathComponent:fullNamespace];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *path = [<span class="keyword">self</span> makeDiskCachePath:ns];</span><br><span class="line">            _diskCachePath = path;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">dispatch_sync</span>(_ioQueue, ^&#123;</span><br><span class="line">            _fileManager = [<span class="built_in">NSFileManager</span> new];</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         当应用收到内存警告的时候，清除内存缓存。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">                                                 selector:<span class="keyword">@selector</span>(clearMemory)</span><br><span class="line">                                                     name:<span class="built_in">UIApplicationDidReceiveMemoryWarningNotification</span></span><br><span class="line">                                                   object:<span class="literal">nil</span>];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         当应用终止的时候，清除老数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">                                                 selector:<span class="keyword">@selector</span>(deleteOldFiles)</span><br><span class="line">                                                     name:<span class="built_in">UIApplicationWillTerminateNotification</span></span><br><span class="line">                                                   object:<span class="literal">nil</span>];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         当应用进入后台的时候，在后台删除老数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></span><br><span class="line">                                                 selector:<span class="keyword">@selector</span>(backgroundDeleteOldFiles)</span><br><span class="line">                                                     name:<span class="built_in">UIApplicationDidEnterBackgroundNotification</span></span><br><span class="line">                                                   object:<span class="literal">nil</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span>];</span><br><span class="line">    SDDispatchQueueRelease(_ioQueue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 当前queue是否在ioQueue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)checkIfQueueIsIOQueue &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *currentQueueLabel = dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ioQueueLabel = dispatch_queue_get_label(<span class="keyword">self</span>.ioQueue);</span><br><span class="line">    <span class="keyword">if</span> (strcmp(currentQueueLabel, ioQueueLabel) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"This method should be called from the ioQueue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Cache paths</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 添加只能读的缓存目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)addReadOnlyCachePath:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)path &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.customPaths) &#123;</span><br><span class="line">        <span class="keyword">self</span>.customPaths = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.customPaths containsObject:path]) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.customPaths addObject:path];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取指定key对应的完整缓存路径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param key key，对应一张图片。比如图片的名字</span></span><br><span class="line"><span class="comment"> @param path 指定根目录</span></span><br><span class="line"><span class="comment"> @return 完整目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)cachePathForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key inPath:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)path &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *filename = [<span class="keyword">self</span> cachedFileNameForKey:key];</span><br><span class="line">    <span class="keyword">return</span> [path stringByAppendingPathComponent:filename];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)defaultCachePathForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> cachePathForKey:key inPath:<span class="keyword">self</span>.diskCachePath];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> MD5加密</span></span><br><span class="line"><span class="comment"> X 表示以十六进制形式输出</span></span><br><span class="line"><span class="comment"> 02 表示不足两位，前面补0输出；出过两位，不影响</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param key key</span></span><br><span class="line"><span class="comment"> @return 加密后的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)cachedFileNameForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str = key.UTF8String;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        str = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> r[CC_MD5_DIGEST_LENGTH];</span><br><span class="line">    CC_MD5(str, (CC_LONG)strlen(str), r);</span><br><span class="line">    <span class="built_in">NSString</span> *filename = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%@"</span>,</span><br><span class="line">                          r[<span class="number">0</span>], r[<span class="number">1</span>], r[<span class="number">2</span>], r[<span class="number">3</span>], r[<span class="number">4</span>], r[<span class="number">5</span>], r[<span class="number">6</span>], r[<span class="number">7</span>], r[<span class="number">8</span>], r[<span class="number">9</span>], r[<span class="number">10</span>],</span><br><span class="line">                          r[<span class="number">11</span>], r[<span class="number">12</span>], r[<span class="number">13</span>], r[<span class="number">14</span>], r[<span class="number">15</span>], [key.pathExtension isEqualToString:<span class="string">@""</span>] ? <span class="string">@""</span> : [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@".%@"</span>, key.pathExtension]];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 图片缓存目录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param fullNamespace 自定义目录</span></span><br><span class="line"><span class="comment"> @return 完整目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)makeDiskCachePath:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span>*)fullNamespace &#123;</span><br><span class="line">    <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *paths = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</span><br><span class="line">    <span class="keyword">return</span> [paths[<span class="number">0</span>] stringByAppendingPathComponent:fullNamespace];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 图片缓存具体实现的一些列方法</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)storeImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image</span><br><span class="line">            forKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key</span><br><span class="line">        completion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</span><br><span class="line">    [<span class="keyword">self</span> storeImage:image imageData:<span class="literal">nil</span> forKey:key toDisk:<span class="literal">YES</span> completion:completionBlock];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)storeImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image</span><br><span class="line">            forKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key</span><br><span class="line">            toDisk:(<span class="built_in">BOOL</span>)toDisk</span><br><span class="line">        completion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</span><br><span class="line">    [<span class="keyword">self</span> storeImage:image imageData:<span class="literal">nil</span> forKey:key toDisk:toDisk completion:completionBlock];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 把一张图片存入缓存的具体实现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param image 缓存的图片对象</span></span><br><span class="line"><span class="comment"> @param imageData 缓存的图片数据</span></span><br><span class="line"><span class="comment"> @param key 缓存对应的key</span></span><br><span class="line"><span class="comment"> @param toDisk 是否缓存到瓷片</span></span><br><span class="line"><span class="comment"> @param completionBlock 缓存完成回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)storeImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image</span><br><span class="line">         imageData:(<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)imageData</span><br><span class="line">            forKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key</span><br><span class="line">            toDisk:(<span class="built_in">BOOL</span>)toDisk</span><br><span class="line">        completion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</span><br><span class="line">    <span class="keyword">if</span> (!image || !key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (completionBlock) &#123;</span><br><span class="line">            completionBlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//缓存到内存</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.config.shouldCacheImagesInMemory) &#123;</span><br><span class="line">        <span class="comment">//计算缓存数据的大小</span></span><br><span class="line">        <span class="built_in">NSUInteger</span> cost = SDCacheCostForImage(image);</span><br><span class="line">        <span class="comment">//加入缓存对此昂</span></span><br><span class="line">        [<span class="keyword">self</span>.memCache setObject:image forKey:key cost:cost];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (toDisk) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         在一个线性队列中做磁盘缓存操作。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</span><br><span class="line">            <span class="built_in">NSData</span> *data = imageData;</span><br><span class="line">            <span class="keyword">if</span> (!data &amp;&amp; image) &#123;</span><br><span class="line">                <span class="comment">//获取图片的类型GIF/PNG等</span></span><br><span class="line">                SDImageFormat imageFormatFromData = [<span class="built_in">NSData</span> sd_imageFormatForImageData:data];</span><br><span class="line">                <span class="comment">//根据指定的SDImageFormat。把图片转换为对应的data数据</span></span><br><span class="line">                data = [image sd_imageDataAsFormat:imageFormatFromData];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把处理好了的数据存入磁盘</span></span><br><span class="line">            [<span class="keyword">self</span> storeImageDataToDisk:data forKey:key];</span><br><span class="line">            <span class="keyword">if</span> (completionBlock) &#123;</span><br><span class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    completionBlock();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (completionBlock) &#123;</span><br><span class="line">            completionBlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 把图片资源存入磁盘</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param imageData 图片数据</span></span><br><span class="line"><span class="comment"> @param key key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)storeImageDataToDisk:(<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)imageData forKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (!imageData || !key) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> checkIfQueueIsIOQueue];</span><br><span class="line">    <span class="comment">//缓存目录是否已经初始化</span></span><br><span class="line">    <span class="keyword">if</span> (![_fileManager fileExistsAtPath:_diskCachePath]) &#123;</span><br><span class="line">        [_fileManager createDirectoryAtPath:_diskCachePath withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:<span class="literal">NULL</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// get cache Path for image key</span></span><br><span class="line">    <span class="comment">//获取key对应的完整缓存路径</span></span><br><span class="line">    <span class="built_in">NSString</span> *cachePathForKey = [<span class="keyword">self</span> defaultCachePathForKey:key];</span><br><span class="line">    <span class="comment">// transform to NSUrl</span></span><br><span class="line">    <span class="built_in">NSURL</span> *fileURL = [<span class="built_in">NSURL</span> fileURLWithPath:cachePathForKey];</span><br><span class="line">    <span class="comment">//把数据存入路径</span></span><br><span class="line">    [_fileManager createFileAtPath:cachePathForKey contents:imageData attributes:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// disable iCloud backup</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.config.shouldDisableiCloud) &#123;</span><br><span class="line">        <span class="comment">//给文件添加到运行存储到iCloud属性</span></span><br><span class="line">        [fileURL setResourceValue:@YES forKey:<span class="built_in">NSURLIsExcludedFromBackupKey</span> error:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Query and Retrieve Ops</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)diskImageExistsWithKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key completion:(<span class="keyword">nullable</span> SDWebImageCheckCacheCompletionBlock)completionBlock &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(_ioQueue, ^&#123;</span><br><span class="line">        <span class="built_in">BOOL</span> exists = [_fileManager fileExistsAtPath:[<span class="keyword">self</span> defaultCachePathForKey:key]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name</span></span><br><span class="line">        <span class="comment">// checking the key with and without the extension</span></span><br><span class="line">        <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">            exists = [_fileManager fileExistsAtPath:[<span class="keyword">self</span> defaultCachePathForKey:key].stringByDeletingPathExtension];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (completionBlock) &#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                completionBlock(exists);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据key获取缓存在内存中的图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param key key</span></span><br><span class="line"><span class="comment"> @return 缓存的图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)imageFromMemoryCacheForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.memCache objectForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)imageFromDiskCacheForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *diskImage = [<span class="keyword">self</span> diskImageForKey:key];</span><br><span class="line">    <span class="keyword">if</span> (diskImage &amp;&amp; <span class="keyword">self</span>.config.shouldCacheImagesInMemory) &#123;</span><br><span class="line">        <span class="built_in">NSUInteger</span> cost = SDCacheCostForImage(diskImage);</span><br><span class="line">        [<span class="keyword">self</span>.memCache setObject:diskImage forKey:key cost:cost];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> diskImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)imageFromCacheForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="comment">// First check the in-memory cache...</span></span><br><span class="line">    <span class="built_in">UIImage</span> *image = [<span class="keyword">self</span> imageFromMemoryCacheForKey:key];</span><br><span class="line">    <span class="keyword">if</span> (image) &#123;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Second check the disk cache...</span></span><br><span class="line">    image = [<span class="keyword">self</span> imageFromDiskCacheForKey:key];</span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据指定的key，获取存储在磁盘上的数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param key 图片对应的key</span></span><br><span class="line"><span class="comment"> @return 返回图片数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)diskImageDataBySearchingAllPathsForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="comment">//获取key对应的path</span></span><br><span class="line">    <span class="built_in">NSString</span> *defaultPath = [<span class="keyword">self</span> defaultCachePathForKey:key];</span><br><span class="line">    <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:defaultPath];</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name</span></span><br><span class="line">    <span class="comment">// checking the key with and without the extension</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     如果key么有后缀名，则会走到这里通过这里读取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    data = [<span class="built_in">NSData</span> dataWithContentsOfFile:defaultPath.stringByDeletingPathExtension];</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     如果在默认路径没有找到图片，则在自定义路径迭代查找</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *customPaths = [<span class="keyword">self</span>.customPaths <span class="keyword">copy</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *path <span class="keyword">in</span> customPaths) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *filePath = [<span class="keyword">self</span> cachePathForKey:key inPath:path];</span><br><span class="line">        <span class="built_in">NSData</span> *imageData = [<span class="built_in">NSData</span> dataWithContentsOfFile:filePath];</span><br><span class="line">        <span class="keyword">if</span> (imageData) &#123;</span><br><span class="line">            <span class="keyword">return</span> imageData;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fallback because of https://github.com/rs/SDWebImage/pull/976 that added the extension to the disk file name</span></span><br><span class="line">        <span class="comment">// checking the key with and without the extension</span></span><br><span class="line">        imageData = [<span class="built_in">NSData</span> dataWithContentsOfFile:filePath.stringByDeletingPathExtension];</span><br><span class="line">        <span class="keyword">if</span> (imageData) &#123;</span><br><span class="line">            <span class="keyword">return</span> imageData;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据指定的key获取image对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param key key</span></span><br><span class="line"><span class="comment"> @return image对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)diskImageForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="comment">//获取磁盘数据</span></span><br><span class="line">    <span class="built_in">NSData</span> *data = [<span class="keyword">self</span> diskImageDataBySearchingAllPathsForKey:key];</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> sd_imageWithData:data];</span><br><span class="line">        image = [<span class="keyword">self</span> scaledImageForKey:key image:image];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.config.shouldDecompressImages) &#123;</span><br><span class="line">            image = [<span class="built_in">UIImage</span> decodedImageWithImage:image];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)scaledImageForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key image:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    <span class="keyword">return</span> SDScaledImageForKey(key, image);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 在缓存中查询对应key的数据。通过一个NSOperation来完成</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param key 要查询的key</span></span><br><span class="line"><span class="comment"> @param doneBlock 查询结束以后的Block</span></span><br><span class="line"><span class="comment"> @return 返回做查询操作的Block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSOperation</span> *)queryCacheOperationForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key done:(<span class="keyword">nullable</span> SDCacheQueryCompletedBlock)doneBlock &#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (doneBlock) &#123;</span><br><span class="line">            doneBlock(<span class="literal">nil</span>, <span class="literal">nil</span>, SDImageCacheTypeNone);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// First check the in-memory cache...</span></span><br><span class="line">    <span class="comment">//首先从内测中查找图片</span></span><br><span class="line">    <span class="built_in">UIImage</span> *image = [<span class="keyword">self</span> imageFromMemoryCacheForKey:key];</span><br><span class="line">    <span class="keyword">if</span> (image) &#123;</span><br><span class="line">        <span class="built_in">NSData</span> *diskData = <span class="literal">nil</span>;</span><br><span class="line">        <span class="comment">//是否是gif图片</span></span><br><span class="line">        <span class="keyword">if</span> ([image isGIF]) &#123;</span><br><span class="line">            diskData = [<span class="keyword">self</span> diskImageDataBySearchingAllPathsForKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (doneBlock) &#123;</span><br><span class="line">            doneBlock(image, diskData, SDImageCacheTypeMemory);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新建一个NSOperation来获取磁盘图片</span></span><br><span class="line">    <span class="built_in">NSOperation</span> *operation = [<span class="built_in">NSOperation</span> new];</span><br><span class="line">    <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</span><br><span class="line">        <span class="keyword">if</span> (operation.isCancelled) &#123;</span><br><span class="line">            <span class="comment">// do not call the completion if cancelled</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在一个自动释放池中处理图片从磁盘加载</span></span><br><span class="line">        <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">            <span class="built_in">NSData</span> *diskData = [<span class="keyword">self</span> diskImageDataBySearchingAllPathsForKey:key];</span><br><span class="line">            <span class="built_in">UIImage</span> *diskImage = [<span class="keyword">self</span> diskImageForKey:key];</span><br><span class="line">            <span class="keyword">if</span> (diskImage &amp;&amp; <span class="keyword">self</span>.config.shouldCacheImagesInMemory) &#123;</span><br><span class="line">                <span class="built_in">NSUInteger</span> cost = SDCacheCostForImage(diskImage);</span><br><span class="line">                <span class="comment">//把从磁盘取出的缓存图片加入内存缓存中</span></span><br><span class="line">                [<span class="keyword">self</span>.memCache setObject:diskImage forKey:key cost:cost];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//图片处理完成以后回调Block</span></span><br><span class="line">            <span class="keyword">if</span> (doneBlock) &#123;</span><br><span class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    doneBlock(diskImage, diskData, SDImageCacheTypeDisk);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> operation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Remove Ops</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeImageForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key withCompletion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completion &#123;</span><br><span class="line">    [<span class="keyword">self</span> removeImageForKey:key fromDisk:<span class="literal">YES</span> withCompletion:completion];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 移除指定key对应的缓存数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param key key</span></span><br><span class="line"><span class="comment"> @param fromDisk 是否也清除磁盘缓存</span></span><br><span class="line"><span class="comment"> @param completion 回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)removeImageForKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key fromDisk:(<span class="built_in">BOOL</span>)fromDisk withCompletion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completion &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除内存缓存</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.config.shouldCacheImagesInMemory) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.memCache removeObjectForKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除磁盘缓存</span></span><br><span class="line">    <span class="keyword">if</span> (fromDisk) &#123;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</span><br><span class="line">            [_fileManager removeItemAtPath:[<span class="keyword">self</span> defaultCachePathForKey:key] error:<span class="literal">nil</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (completion) &#123;</span><br><span class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    completion();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (completion)&#123;</span><br><span class="line">        completion();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">pragma</span> mark - Mem Cache settings</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setMaxMemoryCost:(<span class="built_in">NSUInteger</span>)maxMemoryCost &#123;</span><br><span class="line">    <span class="keyword">self</span>.memCache.totalCostLimit = maxMemoryCost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)maxMemoryCost &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.memCache.totalCostLimit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)maxMemoryCountLimit &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.memCache.countLimit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setMaxMemoryCountLimit:(<span class="built_in">NSUInteger</span>)maxCountLimit &#123;</span><br><span class="line">    <span class="keyword">self</span>.memCache.countLimit = maxCountLimit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 内存缓存清理相关操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 清理当前SDImageCache对象的内存缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)clearMemory &#123;</span><br><span class="line">    [<span class="keyword">self</span>.memCache removeAllObjects];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 移除所有的缓存图片数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param completion 移除完成以后回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)clearDiskOnCompletion:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completion &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</span><br><span class="line">        [_fileManager removeItemAtPath:<span class="keyword">self</span>.diskCachePath error:<span class="literal">nil</span>];</span><br><span class="line">        [_fileManager createDirectoryAtPath:<span class="keyword">self</span>.diskCachePath</span><br><span class="line">                withIntermediateDirectories:<span class="literal">YES</span></span><br><span class="line">                                 attributes:<span class="literal">nil</span></span><br><span class="line">                                      error:<span class="literal">NULL</span>];</span><br><span class="line">        <span class="keyword">if</span> (completion) &#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                completion();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deleteOldFiles &#123;</span><br><span class="line">    [<span class="keyword">self</span> deleteOldFilesWithCompletionBlock:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 当应用终止或者进入后台都回调用这个方法来清除缓存图片。</span></span><br><span class="line"><span class="comment"> 这里会根据图片存储时间来清理图片、默认是一周，从最老的图片开始清理。如果图片缓存空间小于一个规定值，则不考虑。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param completionBlock 清除完成以后的回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)deleteOldFilesWithCompletionBlock:(<span class="keyword">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</span><br><span class="line">        <span class="comment">//获取磁盘缓存的默认根目录</span></span><br><span class="line">        <span class="built_in">NSURL</span> *diskCacheURL = [<span class="built_in">NSURL</span> fileURLWithPath:<span class="keyword">self</span>.diskCachePath isDirectory:<span class="literal">YES</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *resourceKeys = @[<span class="built_in">NSURLIsDirectoryKey</span>, <span class="built_in">NSURLContentModificationDateKey</span>, <span class="built_in">NSURLTotalFileAllocatedSizeKey</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This enumerator prefetches useful properties for our cache files.</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         第二个参数制定了需要获取的属性集合</span></span><br><span class="line"><span class="comment">         第三个参数表示不迭代隐藏文件</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL</span><br><span class="line">                                                   includingPropertiesForKeys:resourceKeys</span><br><span class="line">                                                                      options:<span class="built_in">NSDirectoryEnumerationSkipsHiddenFiles</span></span><br><span class="line">                                                                 errorHandler:<span class="literal">NULL</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSDate</span> *expirationDate = [<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:-<span class="keyword">self</span>.config.maxCacheAge];</span><br><span class="line">        <span class="built_in">NSMutableDictionary</span>&lt;<span class="built_in">NSURL</span> *, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *&gt; *cacheFiles = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">        <span class="built_in">NSUInteger</span> currentCacheSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Enumerate all of the files in the cache directory.  This loop has two purposes:</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//  1. Removing files that are older than the expiration date.</span></span><br><span class="line">        <span class="comment">//  2. Storing file attributes for the size-based cleanup pass.</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         迭代缓存目录。有两个目的：</span></span><br><span class="line"><span class="comment">         1 删除比指定日期更老的图片</span></span><br><span class="line"><span class="comment">         2 记录文件的大小，以提供给后面删除使用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">NSMutableArray</span>&lt;<span class="built_in">NSURL</span> *&gt; *urlsToDelete = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSURL</span> *fileURL <span class="keyword">in</span> fileEnumerator) &#123;</span><br><span class="line">            <span class="built_in">NSError</span> *error;</span><br><span class="line">            <span class="comment">//获取指定url对应文件的指定三种属性的key和value</span></span><br><span class="line">            <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *resourceValues = [fileURL resourceValuesForKeys:resourceKeys error:&amp;error];</span><br><span class="line">            <span class="comment">// Skip directories and errors.</span></span><br><span class="line">            <span class="comment">//如果是文件夹则返回</span></span><br><span class="line">            <span class="keyword">if</span> (error || !resourceValues || [resourceValues[<span class="built_in">NSURLIsDirectoryKey</span>] boolValue]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Remove files that are older than the expiration date;</span></span><br><span class="line">            <span class="comment">//获取指定url文件对应的修改日期</span></span><br><span class="line">            <span class="built_in">NSDate</span> *modificationDate = resourceValues[<span class="built_in">NSURLContentModificationDateKey</span>];</span><br><span class="line">            <span class="comment">//如果修改日期大于指定日期，则加入要移除的数组里</span></span><br><span class="line">            <span class="keyword">if</span> ([[modificationDate laterDate:expirationDate] isEqualToDate:expirationDate]) &#123;</span><br><span class="line">                [urlsToDelete addObject:fileURL];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Store a reference to this file and account for its total size.</span></span><br><span class="line">            <span class="comment">//获取指定的url对应的文件的大小，并且把url与对应大小存入一个字典中</span></span><br><span class="line">            <span class="built_in">NSNumber</span> *totalAllocatedSize = resourceValues[<span class="built_in">NSURLTotalFileAllocatedSizeKey</span>];</span><br><span class="line">            currentCacheSize += totalAllocatedSize.unsignedIntegerValue;</span><br><span class="line">            cacheFiles[fileURL] = resourceValues;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除所有最后修改日期大于指定日期的所有文件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSURL</span> *fileURL <span class="keyword">in</span> urlsToDelete) &#123;</span><br><span class="line">            [_fileManager removeItemAtURL:fileURL error:<span class="literal">nil</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If our remaining disk cache exceeds a configured maximum size, perform a second</span></span><br><span class="line">        <span class="comment">// size-based cleanup pass.  We delete the oldest files first.</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         如果我们当前缓存的大小超过了默认大小，则按照日期删除，直到缓存大小&lt;默认大小的一半</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.config.maxCacheSize &gt; <span class="number">0</span> &amp;&amp; currentCacheSize &gt; <span class="keyword">self</span>.config.maxCacheSize) &#123;</span><br><span class="line">            <span class="comment">// Target half of our maximum cache size for this cleanup pass.</span></span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">NSUInteger</span> desiredCacheSize = <span class="keyword">self</span>.config.maxCacheSize / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Sort the remaining cache files by their last modification time (oldest first).</span></span><br><span class="line">            <span class="comment">//根据文件创建的时间排序</span></span><br><span class="line">            <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURL</span> *&gt; *sortedFiles = [cacheFiles keysSortedByValueWithOptions:<span class="built_in">NSSortConcurrent</span></span><br><span class="line">                                                                     usingComparator:^<span class="built_in">NSComparisonResult</span>(<span class="keyword">id</span> obj1, <span class="keyword">id</span> obj2) &#123;</span><br><span class="line">                                                                         <span class="keyword">return</span> [obj1[<span class="built_in">NSURLContentModificationDateKey</span>] compare:obj2[<span class="built_in">NSURLContentModificationDateKey</span>]];</span><br><span class="line">                                                                     &#125;];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Delete files until we fall below our desired cache size.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             迭代删除缓存，直到缓存大小是默认缓存大小的一半</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">NSURL</span> *fileURL <span class="keyword">in</span> sortedFiles) &#123;</span><br><span class="line">                <span class="keyword">if</span> ([_fileManager removeItemAtURL:fileURL error:<span class="literal">nil</span>]) &#123;</span><br><span class="line">                    <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *resourceValues = cacheFiles[fileURL];</span><br><span class="line">                    <span class="built_in">NSNumber</span> *totalAllocatedSize = resourceValues[<span class="built_in">NSURLTotalFileAllocatedSizeKey</span>];</span><br><span class="line">                    <span class="comment">//总得缓存大小减去当前要删除文件的大小</span></span><br><span class="line">                    currentCacheSize -= totalAllocatedSize.unsignedIntegerValue;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (currentCacheSize &lt; desiredCacheSize) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行完毕，主线程回调</span></span><br><span class="line">        <span class="keyword">if</span> (completionBlock) &#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                completionBlock();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 应用进入后台的时候，调用这个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)backgroundDeleteOldFiles &#123;</span><br><span class="line">    Class <span class="built_in">UIApplicationClass</span> = <span class="built_in">NSClassFromString</span>(<span class="string">@"UIApplication"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">UIApplicationClass</span> || ![<span class="built_in">UIApplicationClass</span> respondsToSelector:<span class="keyword">@selector</span>(sharedApplication)]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">UIApplication</span> *application = [<span class="built_in">UIApplication</span> performSelector:<span class="keyword">@selector</span>(sharedApplication)];</span><br><span class="line">    <span class="comment">//如果backgroundTask对应的时间结束了。任务还么有处理完成。则直接终止任务</span></span><br><span class="line">    __block <span class="built_in">UIBackgroundTaskIdentifier</span> bgTask = [application beginBackgroundTaskWithExpirationHandler:^&#123;</span><br><span class="line">        <span class="comment">// Clean up any unfinished task business by marking where you</span></span><br><span class="line">        <span class="comment">// stopped or ending the task outright.</span></span><br><span class="line">        <span class="comment">//当任务非正常终止的时候，做清理工作</span></span><br><span class="line">        [application endBackgroundTask:bgTask];</span><br><span class="line">        bgTask = <span class="built_in">UIBackgroundTaskInvalid</span>;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the long-running task and return immediately.</span></span><br><span class="line">    <span class="comment">//图片清理结束以后。处理完成</span></span><br><span class="line">    [<span class="keyword">self</span> deleteOldFilesWithCompletionBlock:^&#123;</span><br><span class="line">        <span class="comment">//清理完成以后，终止任务</span></span><br><span class="line">        [application endBackgroundTask:bgTask];</span><br><span class="line">        bgTask = <span class="built_in">UIBackgroundTaskInvalid</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Cache Info</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)getSize &#123;</span><br><span class="line">    __block <span class="built_in">NSUInteger</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</span><br><span class="line">        <span class="built_in">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtPath:<span class="keyword">self</span>.diskCachePath];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> *fileName <span class="keyword">in</span> fileEnumerator) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *filePath = [<span class="keyword">self</span>.diskCachePath stringByAppendingPathComponent:fileName];</span><br><span class="line">            <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *attrs = [[<span class="built_in">NSFileManager</span> defaultManager] attributesOfItemAtPath:filePath error:<span class="literal">nil</span>];</span><br><span class="line">            size += [attrs fileSize];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)getDiskCount &#123;</span><br><span class="line">    __block <span class="built_in">NSUInteger</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</span><br><span class="line">        <span class="built_in">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtPath:<span class="keyword">self</span>.diskCachePath];</span><br><span class="line">        count = fileEnumerator.allObjects.count;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)calculateSizeWithCompletionBlock:(<span class="keyword">nullable</span> SDWebImageCalculateSizeBlock)completionBlock &#123;</span><br><span class="line">    <span class="built_in">NSURL</span> *diskCacheURL = [<span class="built_in">NSURL</span> fileURLWithPath:<span class="keyword">self</span>.diskCachePath isDirectory:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</span><br><span class="line">        <span class="built_in">NSUInteger</span> fileCount = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">NSUInteger</span> totalSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL</span><br><span class="line">                                                   includingPropertiesForKeys:@[<span class="built_in">NSFileSize</span>]</span><br><span class="line">                                                                      options:<span class="built_in">NSDirectoryEnumerationSkipsHiddenFiles</span></span><br><span class="line">                                                                 errorHandler:<span class="literal">NULL</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSURL</span> *fileURL <span class="keyword">in</span> fileEnumerator) &#123;</span><br><span class="line">            <span class="built_in">NSNumber</span> *fileSize;</span><br><span class="line">            [fileURL getResourceValue:&amp;fileSize forKey:<span class="built_in">NSURLFileSizeKey</span> error:<span class="literal">NULL</span>];</span><br><span class="line">            totalSize += fileSize.unsignedIntegerValue;</span><br><span class="line">            fileCount += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (completionBlock) &#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                completionBlock(fileCount, totalSize);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>最后<a href="https://huang303513.github.io/2017/05/03/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%B8%89" target="_blank" rel="noopener">原文地址</a>.html),<a href="https://github.com/huang303513/iOSSourceCodeStudy">demo地址</a>。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDWebImage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDWebImage源码解析(二)</title>
      <link href="/2017/05/02/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%BA%8C)/"/>
      <url>/2017/05/02/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p><code>SDWebImage</code>使用了很多工具类来对图片的处理。比如获取图片类型、图片放大缩小、GIF图片处理、图片解压缩处理等。接下来我就要分析下面这几个工具类的实现。</p><h2 id="2-NSData-ImageContentType分析"><a href="#2-NSData-ImageContentType分析" class="headerlink" title="2 NSData+ImageContentType分析"></a>2 NSData+ImageContentType分析</h2><p>这个类提供了一个类方法<code>sd_imageFormatForImageData</code>。通过这个方法传入图片的NSData数据，然后返回图片类型。图片类型通过<code>SDImageFormat</code>来定义。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 不同图片类型的枚举</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> - SDImageFormatUndefined: 未知</span></span><br><span class="line"><span class="comment"> - SDImageFormatJPEG: JPG</span></span><br><span class="line"><span class="comment"> - SDImageFormatPNG: PNG</span></span><br><span class="line"><span class="comment"> - SDImageFormatGIF: GIF</span></span><br><span class="line"><span class="comment"> - SDImageFormatTIFF: TIFF</span></span><br><span class="line"><span class="comment"> - SDImageFormatWebP: WEBP  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, SDImageFormat) &#123;</span><br><span class="line">    SDImageFormatUndefined = <span class="number">-1</span>,</span><br><span class="line">    SDImageFormatJPEG = <span class="number">0</span>,</span><br><span class="line">    SDImageFormatPNG,</span><br><span class="line">    SDImageFormatGIF,</span><br><span class="line">    SDImageFormatTIFF,</span><br><span class="line">    SDImageFormatWebP</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据图片NSData获取图片的类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param data NSData数据</span></span><br><span class="line"><span class="comment"> @return 图片数据类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (SDImageFormat)sd_imageFormatForImageData:(<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">    <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">        <span class="keyword">return</span> SDImageFormatUndefined;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    uint8_t c;</span><br><span class="line">    <span class="comment">//获取图片数据的第一个字节数据</span></span><br><span class="line">    [data getBytes:&amp;c length:<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//根据字母的ASC码比较</span></span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0xFF</span>:</span><br><span class="line">            <span class="keyword">return</span> SDImageFormatJPEG;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x89</span>:</span><br><span class="line">            <span class="keyword">return</span> SDImageFormatPNG;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x47</span>:</span><br><span class="line">            <span class="keyword">return</span> SDImageFormatGIF;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x49</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x4D</span>:</span><br><span class="line">            <span class="keyword">return</span> SDImageFormatTIFF;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x52</span>:</span><br><span class="line">            <span class="comment">// R as RIFF for WEBP</span></span><br><span class="line">            <span class="keyword">if</span> (data.length &lt; <span class="number">12</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> SDImageFormatUndefined;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSString</span> *testString = [[<span class="built_in">NSString</span> alloc] initWithData:[data subdataWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">12</span>)] encoding:<span class="built_in">NSASCIIStringEncoding</span>];</span><br><span class="line">            <span class="keyword">if</span> ([testString hasPrefix:<span class="string">@"RIFF"</span>] &amp;&amp; [testString hasSuffix:<span class="string">@"WEBP"</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> SDImageFormatWebP;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> SDImageFormatUndefined;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-SDWebImageCompat分析"><a href="#3-SDWebImageCompat分析" class="headerlink" title="3 SDWebImageCompat分析"></a>3 SDWebImageCompat分析</h2><p><code>SDWebImageCompat</code>就提供一个全局方法<code>SDScaledImageForKey</code>。这个方法根据原始图片绘制一张放大或者缩小的图片。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 给定一张图片，通过scale属性返回一个放大的图片。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param key 图片名称</span></span><br><span class="line"><span class="comment"> @param image 资源图片</span></span><br><span class="line"><span class="comment"> @return 处理以后的图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">UIImage</span> *SDScaledImageForKey(<span class="built_in">NSString</span> * _Nullable key, <span class="built_in">UIImage</span> * _Nullable image) &#123;</span><br><span class="line">    <span class="comment">//异常处理</span></span><br><span class="line">    <span class="keyword">if</span> (!image) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_MAC</span></span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line">    <span class="comment">//如果是动态图片，比如GIF图片，则迭代处理</span></span><br><span class="line">    <span class="keyword">if</span> ((image.images).count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSMutableArray</span>&lt;<span class="built_in">UIImage</span> *&gt; *scaledImages = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">        <span class="comment">//迭代处理每一张图片</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">UIImage</span> *tempImage <span class="keyword">in</span> image.images) &#123;</span><br><span class="line">            [scaledImages addObject:SDScaledImageForKey(key, tempImage)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把处理结束的图片再合成一张动态图片</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">UIImage</span> animatedImageWithImages:scaledImages duration:image.duration];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">//非动态图片</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_WATCH</span></span><br><span class="line">        <span class="keyword">if</span> ([[<span class="built_in">WKInterfaceDevice</span> currentDevice] respondsToSelector:<span class="keyword">@selector</span>(screenScale)]) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> SD_UIKIT</span></span><br><span class="line">        <span class="keyword">if</span> ([[<span class="built_in">UIScreen</span> mainScreen] respondsToSelector:<span class="keyword">@selector</span>(scale)]) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="built_in">CGFloat</span> scale = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// “@2x.png”的长度为7，所以此处添加了这个判断，很巧妙</span></span><br><span class="line">            <span class="keyword">if</span> (key.length &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">                <span class="built_in">NSRange</span> range = [key rangeOfString:<span class="string">@"@2x."</span>];</span><br><span class="line">                <span class="keyword">if</span> (range.location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">                    scale = <span class="number">2.0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                range = [key rangeOfString:<span class="string">@"@3x."</span>];</span><br><span class="line">                <span class="keyword">if</span> (range.location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">                    scale = <span class="number">3.0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//返回对应分辨率下面的图片</span></span><br><span class="line">            <span class="built_in">UIImage</span> *scaledImage = [[<span class="built_in">UIImage</span> alloc] initWithCGImage:image.CGImage scale:scale orientation:image.imageOrientation];</span><br><span class="line">            image = scaledImage;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-UIImage-MultiFormat分类分析"><a href="#4-UIImage-MultiFormat分类分析" class="headerlink" title="4 UIImage+MultiFormat分类分析"></a>4 UIImage+MultiFormat分类分析</h2><p><code>UIImage+MultiFormat</code>分类实现了NSData与UIImage对象之间的相互转换。并且是根据图片类型做转换。比如GIF的UIImage转换为GIF格式的NSData。<br>并且还有UIImage的Orientation和alpha的处理。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据image的data数据。生成对应的image对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param data 图片的数据</span></span><br><span class="line"><span class="comment"> @return image对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)sd_imageWithData:(<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">    <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">UIImage</span> *image;</span><br><span class="line">    <span class="comment">//获取data的图片类型，png，gif，jpg</span></span><br><span class="line">    SDImageFormat imageFormat = [<span class="built_in">NSData</span> sd_imageFormatForImageData:data];</span><br><span class="line">    <span class="keyword">if</span> (imageFormat == SDImageFormatGIF) &#123;</span><br><span class="line">        <span class="comment">//gif处理：返回一张只包含数据第一张image 的gif图片</span></span><br><span class="line">        image = [<span class="built_in">UIImage</span> sd_animatedGIFWithData:data];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SD_WEBP</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (imageFormat == SDImageFormatWebP)</span><br><span class="line">    &#123;</span><br><span class="line">        image = [<span class="built_in">UIImage</span> sd_imageWithWebPData:data];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        image = [[<span class="built_in">UIImage</span> alloc] initWithData:data];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line">        <span class="comment">//获取方向</span></span><br><span class="line">        <span class="built_in">UIImageOrientation</span> orientation = [<span class="keyword">self</span> sd_imageOrientationFromImageData:data];</span><br><span class="line">        <span class="comment">//如果不是向上的，还需要再次生成图片</span></span><br><span class="line">        <span class="keyword">if</span> (orientation != <span class="built_in">UIImageOrientationUp</span>) &#123;</span><br><span class="line">            image = [<span class="built_in">UIImage</span> imageWithCGImage:image.CGImage</span><br><span class="line">                                        scale:image.scale</span><br><span class="line">                                  orientation:orientation];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据图片数据获取图片的方向</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param imageData 图片数据</span></span><br><span class="line"><span class="comment"> @return 方向</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+(<span class="built_in">UIImageOrientation</span>)sd_imageOrientationFromImageData:(<span class="keyword">nonnull</span> <span class="built_in">NSData</span> *)imageData &#123;</span><br><span class="line">    <span class="comment">//默认是向上的</span></span><br><span class="line">    <span class="built_in">UIImageOrientation</span> result = <span class="built_in">UIImageOrientationUp</span>;</span><br><span class="line">    <span class="built_in">CGImageSourceRef</span> imageSource = <span class="built_in">CGImageSourceCreateWithData</span>((__bridge <span class="built_in">CFDataRef</span>)imageData, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (imageSource) &#123;</span><br><span class="line">        <span class="comment">//获取图片的属性列表</span></span><br><span class="line">        <span class="built_in">CFDictionaryRef</span> properties = <span class="built_in">CGImageSourceCopyPropertiesAtIndex</span>(imageSource, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (properties) &#123;</span><br><span class="line">            <span class="built_in">CFTypeRef</span> val;</span><br><span class="line">            <span class="keyword">int</span> exifOrientation;</span><br><span class="line">            <span class="comment">//获取图片方向</span></span><br><span class="line">            val = <span class="built_in">CFDictionaryGetValue</span>(properties, kCGImagePropertyOrientation);</span><br><span class="line">            <span class="keyword">if</span> (val) &#123;</span><br><span class="line">                <span class="built_in">CFNumberGetValue</span>(val, kCFNumberIntType, &amp;exifOrientation);</span><br><span class="line">                result = [<span class="keyword">self</span> sd_exifOrientationToiOSOrientation:exifOrientation];</span><br><span class="line">            &#125; <span class="comment">// else - if it's not set it remains at up</span></span><br><span class="line">            <span class="built_in">CFRelease</span>((<span class="built_in">CFTypeRef</span>) properties);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//NSLog(@"NO PROPERTIES, FAIL");</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">CFRelease</span>(imageSource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据不同的值返回不同的图片方向</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param exifOrientation 输入值</span></span><br><span class="line"><span class="comment"> @return 图片的方向</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">UIImageOrientation</span>) sd_exifOrientationToiOSOrientation:(<span class="keyword">int</span>)exifOrientation &#123;</span><br><span class="line">    <span class="built_in">UIImageOrientation</span> orientation = <span class="built_in">UIImageOrientationUp</span>;</span><br><span class="line">    <span class="keyword">switch</span> (exifOrientation) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            orientation = <span class="built_in">UIImageOrientationUp</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            orientation = <span class="built_in">UIImageOrientationDown</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            orientation = <span class="built_in">UIImageOrientationLeft</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            orientation = <span class="built_in">UIImageOrientationRight</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            orientation = <span class="built_in">UIImageOrientationUpMirrored</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            orientation = <span class="built_in">UIImageOrientationDownMirrored</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            orientation = <span class="built_in">UIImageOrientationLeftMirrored</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            orientation = <span class="built_in">UIImageOrientationRightMirrored</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> orientation;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)sd_imageData &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> sd_imageDataAsFormat:SDImageFormatUndefined];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据指定的图片类型，把image对象转换为对应格式的data</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param imageFormat 指定的image格式</span></span><br><span class="line"><span class="comment"> @return 返回data对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)sd_imageDataAsFormat:(SDImageFormat)imageFormat &#123;</span><br><span class="line">    <span class="built_in">NSData</span> *imageData = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line">        <span class="keyword">int</span> alphaInfo = <span class="built_in">CGImageGetAlphaInfo</span>(<span class="keyword">self</span>.CGImage);</span><br><span class="line">        <span class="comment">//是否有透明度</span></span><br><span class="line">        <span class="built_in">BOOL</span> hasAlpha = !(alphaInfo == kCGImageAlphaNone ||</span><br><span class="line">                          alphaInfo == kCGImageAlphaNoneSkipFirst ||</span><br><span class="line">                          alphaInfo == kCGImageAlphaNoneSkipLast);</span><br><span class="line">        <span class="comment">//只有png图片有alpha属性</span></span><br><span class="line">        <span class="built_in">BOOL</span> usePNG = hasAlpha;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// the imageFormat param has priority here. But if the format is undefined, we relly on the alpha channel</span></span><br><span class="line">        <span class="comment">//是否是PNG类型的图片</span></span><br><span class="line">        <span class="keyword">if</span> (imageFormat != SDImageFormatUndefined) &#123;</span><br><span class="line">            usePNG = (imageFormat == SDImageFormatPNG);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据不同的图片类型获取到对应的图片data</span></span><br><span class="line">        <span class="keyword">if</span> (usePNG) &#123;</span><br><span class="line">            imageData = <span class="built_in">UIImagePNGRepresentation</span>(<span class="keyword">self</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            imageData = <span class="built_in">UIImageJPEGRepresentation</span>(<span class="keyword">self</span>, (<span class="built_in">CGFloat</span>)<span class="number">1.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="built_in">NSBitmapImageFileType</span> imageFileType = <span class="built_in">NSJPEGFileType</span>;</span><br><span class="line">        <span class="keyword">if</span> (imageFormat == SDImageFormatGIF) &#123;</span><br><span class="line">            imageFileType = <span class="built_in">NSGIFFileType</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (imageFormat == SDImageFormatPNG) &#123;</span><br><span class="line">            imageFileType = <span class="built_in">NSPNGFileType</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        imageData = [<span class="built_in">NSBitmapImageRep</span> representationOfImageRepsInArray:<span class="keyword">self</span>.representations</span><br><span class="line">                                                             usingType:imageFileType</span><br><span class="line">                                                            properties:@&#123;&#125;];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> imageData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-UIImage-GIF分类分析"><a href="#5-UIImage-GIF分类分析" class="headerlink" title="5 UIImage+GIF分类分析"></a>5 UIImage+GIF分类分析</h2><p><code>UIImage+GIF</code>实现了对GIF图片的NSData的处理。并且处理方法就是取出GIF图片的第一张UIImage来显示。如果真的要显示动态图片的话，我们需要使用<code>FLAnimatedImageView</code>来显示。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据gif图片的data生成对应的gif的UIImage对象。而且只会取GIF图片的第一张UIImage。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param data gif图片的data对象</span></span><br><span class="line"><span class="comment"> @return 生成的image对象。这里只获取gif图片的第一张图像，如果要实现gif完整图像，使用FLAnimatedImageView</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)sd_animatedGIFWithData:(<span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">    <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CGImageSourceRef</span> source = <span class="built_in">CGImageSourceCreateWithData</span>((__bridge <span class="built_in">CFDataRef</span>)data, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//获取GIF图片包含的UIImage数量</span></span><br><span class="line">    size_t count = <span class="built_in">CGImageSourceGetCount</span>(source);</span><br><span class="line">    <span class="built_in">UIImage</span> *staticImage;</span><br><span class="line">    <span class="comment">//如果只有一张UIImage</span></span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        staticImage = [[<span class="built_in">UIImage</span> alloc] initWithData:data];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_WATCH</span></span><br><span class="line">        <span class="built_in">CGFloat</span> scale = <span class="number">1</span>;</span><br><span class="line">        scale = [<span class="built_in">WKInterfaceDevice</span> currentDevice].screenScale;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> SD_UIKIT</span></span><br><span class="line">        <span class="built_in">CGFloat</span> scale = <span class="number">1</span>;</span><br><span class="line">        scale = [<span class="built_in">UIScreen</span> mainScreen].scale;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="comment">//获取第一张UIImage对象</span></span><br><span class="line">        <span class="built_in">CGImageRef</span> <span class="built_in">CGImage</span> = <span class="built_in">CGImageSourceCreateImageAtIndex</span>(source, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line">        <span class="comment">//获取gif图片的第一张图片</span></span><br><span class="line">        <span class="built_in">UIImage</span> *frameImage = [<span class="built_in">UIImage</span> imageWithCGImage:<span class="built_in">CGImage</span> scale:scale orientation:<span class="built_in">UIImageOrientationUp</span>];</span><br><span class="line">        <span class="comment">//用第一张图片生成一个新的gif图片</span></span><br><span class="line">        staticImage = [<span class="built_in">UIImage</span> animatedImageWithImages:@[frameImage] duration:<span class="number">0.0</span>f];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> SD_MAC</span></span><br><span class="line">        staticImage = [[<span class="built_in">UIImage</span> alloc] initWithCGImage:<span class="built_in">CGImage</span> size:<span class="built_in">NSZeroSize</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="built_in">CGImageRelease</span>(<span class="built_in">CGImage</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CFRelease</span>(source);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> staticImage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 判断一张图片是不是GIF图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return bool值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isGIF &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">self</span>.images != <span class="literal">nil</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-SDWebImageDecoder分析"><a href="#6-SDWebImageDecoder分析" class="headerlink" title="6 SDWebImageDecoder分析"></a>6 SDWebImageDecoder分析</h2><p>通过这个类实现图片的解压缩操作。对于太大的图片，先按照一定比例缩小图片然后再解压缩。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SD_UIKIT || SD_WATCH</span></span><br><span class="line"><span class="comment">//每个像素占用的字节数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> size_t kBytesPerPixel = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//色彩空间占用的字节数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> size_t kBitsPerComponent = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 解压缩图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param image UIImage对象</span></span><br><span class="line"><span class="comment"> @return 返回解压缩以后的图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)decodedImageWithImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    <span class="comment">//图片是否能够加压缩</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="built_in">UIImage</span> shouldDecodeImage:image]) &#123;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// autorelease the bitmap context and all vars to help system to free memory when there are memory warning.</span></span><br><span class="line">    <span class="comment">// on iOS7, do not forget to call [[SDImageCache sharedImageCache] clearMemory];</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *解压缩操作放入一个自动释放池里面。一遍自动释放所有的变量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">@autoreleasepool</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CGImageRef</span> imageRef = image.CGImage;</span><br><span class="line">        <span class="comment">//获取图片的色彩空间</span></span><br><span class="line">        <span class="built_in">CGColorSpaceRef</span> colorspaceRef = [<span class="built_in">UIImage</span> colorSpaceForImageRef:imageRef];</span><br><span class="line">        <span class="comment">//宽度和高度</span></span><br><span class="line">        size_t width = <span class="built_in">CGImageGetWidth</span>(imageRef);</span><br><span class="line">        size_t height = <span class="built_in">CGImageGetHeight</span>(imageRef);</span><br><span class="line">        <span class="comment">//图片占用的字节数</span></span><br><span class="line">        size_t bytesPerRow = kBytesPerPixel * width;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// kCGImageAlphaNone is not supported in CGBitmapContextCreate.</span></span><br><span class="line">        <span class="comment">// Since the original image here has no alpha info, use kCGImageAlphaNoneSkipLast</span></span><br><span class="line">        <span class="comment">// to create bitmap graphics contexts without alpha info.</span></span><br><span class="line">        <span class="comment">//创建一个绘制图片的上下文</span></span><br><span class="line">        <span class="built_in">CGContextRef</span> context = <span class="built_in">CGBitmapContextCreate</span>(<span class="literal">NULL</span>,</span><br><span class="line">                                                     width,</span><br><span class="line">                                                     height,</span><br><span class="line">                                                     kBitsPerComponent,</span><br><span class="line">                                                     bytesPerRow,</span><br><span class="line">                                                     colorspaceRef,</span><br><span class="line">                                                     kCGBitmapByteOrderDefault|kCGImageAlphaNoneSkipLast);</span><br><span class="line">        <span class="keyword">if</span> (context == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Draw the image into the context and retrieve the new bitmap image without alpha</span></span><br><span class="line">        <span class="comment">//绘制一个和图片大小一样的图片</span></span><br><span class="line">        <span class="built_in">CGContextDrawImage</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, width, height), imageRef);</span><br><span class="line">        <span class="comment">//创建一个么有alpha通道的图片</span></span><br><span class="line">        <span class="built_in">CGImageRef</span> imageRefWithoutAlpha = <span class="built_in">CGBitmapContextCreateImage</span>(context);</span><br><span class="line">        <span class="comment">//得到解压缩以后的图片</span></span><br><span class="line">        <span class="built_in">UIImage</span> *imageWithoutAlpha = [<span class="built_in">UIImage</span> imageWithCGImage:imageRefWithoutAlpha</span><br><span class="line">                                                         scale:image.scale</span><br><span class="line">                                                   orientation:image.imageOrientation];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CGContextRelease</span>(context);</span><br><span class="line">        <span class="built_in">CGImageRelease</span>(imageRefWithoutAlpha);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> imageWithoutAlpha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *定义一张图片可以占用的最大空间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> kDestImageSizeMB = <span class="number">60.0</span>f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> kSourceImageTileSizeMB = <span class="number">20.0</span>f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> kBytesPerMB = <span class="number">1024.0</span>f * <span class="number">1024.0</span>f;</span><br><span class="line"><span class="comment">//1MB可以存储多少像素</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> kPixelsPerMB = kBytesPerMB / kBytesPerPixel;</span><br><span class="line"><span class="comment">//如果像素小于这个值，则不解压缩</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> kDestTotalPixels = kDestImageSizeMB * kPixelsPerMB;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> kTileTotalPixels = kSourceImageTileSizeMB * kPixelsPerMB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> kDestSeemOverlap = <span class="number">2.0</span>f;   <span class="comment">// the numbers of pixels to overlap the seems where tiles meet.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 如果原始图片占用的空间太大。则按照一定的比例解压缩。从而不让解压缩以后的图片占用的空间太大。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param image UIImage对象</span></span><br><span class="line"><span class="comment"> @return 返回处理结束的UIImage对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)decodedAndScaledDownImageWithImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    <span class="comment">//图片是否支持解压缩</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="built_in">UIImage</span> shouldDecodeImage:image]) &#123;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//图片不需要处理。直接解压缩</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="built_in">UIImage</span> shouldScaleDownImage:image]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">UIImage</span> decodedImageWithImage:image];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGContextRef</span> destContext;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// autorelease the bitmap context and all vars to help system to free memory when there are memory warning.</span></span><br><span class="line">    <span class="comment">// on iOS7, do not forget to call [[SDImageCache sharedImageCache] clearMemory];</span></span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">CGImageRef</span> sourceImageRef = image.CGImage;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CGSize</span> sourceResolution = <span class="built_in">CGSizeZero</span>;</span><br><span class="line">        <span class="comment">//获取原始图片的宽度和高度</span></span><br><span class="line">        sourceResolution.width = <span class="built_in">CGImageGetWidth</span>(sourceImageRef);</span><br><span class="line">        sourceResolution.height = <span class="built_in">CGImageGetHeight</span>(sourceImageRef);</span><br><span class="line">        <span class="comment">//获取原始图片的总像素</span></span><br><span class="line">        <span class="keyword">float</span> sourceTotalPixels = sourceResolution.width * sourceResolution.height;</span><br><span class="line">        <span class="comment">// Determine the scale ratio to apply to the input image</span></span><br><span class="line">        <span class="comment">// that results in an output image of the defined size.</span></span><br><span class="line">        <span class="comment">// see kDestImageSizeMB, and how it relates to destTotalPixels.</span></span><br><span class="line">        <span class="comment">//根据一定的比例设置目标图片的宽度和高度</span></span><br><span class="line">        <span class="keyword">float</span> imageScale = kDestTotalPixels / sourceTotalPixels;</span><br><span class="line">        <span class="built_in">CGSize</span> destResolution = <span class="built_in">CGSizeZero</span>;</span><br><span class="line">        destResolution.width = (<span class="keyword">int</span>)(sourceResolution.width*imageScale);</span><br><span class="line">        destResolution.height = (<span class="keyword">int</span>)(sourceResolution.height*imageScale);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// current color space</span></span><br><span class="line">        <span class="comment">//获取原始图片的像素空间。默认是RGB</span></span><br><span class="line">        <span class="built_in">CGColorSpaceRef</span> colorspaceRef = [<span class="built_in">UIImage</span> colorSpaceForImageRef:sourceImageRef];</span><br><span class="line">        <span class="comment">//每一行像素占用的内存空间大小</span></span><br><span class="line">        size_t bytesPerRow = kBytesPerPixel * destResolution.width;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Allocate enough pixel data to hold the output image.</span></span><br><span class="line">        <span class="comment">//目标图片占用的总内存空间大小。一行占用内存空间大小*高度</span></span><br><span class="line">        <span class="keyword">void</span>* destBitmapData = malloc( bytesPerRow * destResolution.height );</span><br><span class="line">        <span class="keyword">if</span> (destBitmapData == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据各种设置创建一个上下文环境</span></span><br><span class="line">        destContext = <span class="built_in">CGBitmapContextCreate</span>(destBitmapData,</span><br><span class="line">                                            destResolution.width,</span><br><span class="line">                                            destResolution.height,</span><br><span class="line">                                            kBitsPerComponent,</span><br><span class="line">                                            bytesPerRow,</span><br><span class="line">                                            colorspaceRef,</span><br><span class="line">                                            kCGBitmapByteOrderDefault|kCGImageAlphaNoneSkipLast);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (destContext == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            free(destBitmapData);</span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置目标图片的质量</span></span><br><span class="line">        <span class="built_in">CGContextSetInterpolationQuality</span>(destContext, kCGInterpolationHigh);</span><br><span class="line">        <span class="built_in">CGRect</span> sourceTile = <span class="built_in">CGRectZero</span>;</span><br><span class="line">        sourceTile.size.width = sourceResolution.width;</span><br><span class="line">        sourceTile.size.height = (<span class="keyword">int</span>)(kTileTotalPixels / sourceTile.size.width );</span><br><span class="line">        sourceTile.origin.x = <span class="number">0.0</span>f;</span><br><span class="line">        <span class="built_in">CGRect</span> destTile;</span><br><span class="line">        destTile.size.width = destResolution.width;</span><br><span class="line">        destTile.size.height = sourceTile.size.height * imageScale;</span><br><span class="line">        destTile.origin.x = <span class="number">0.0</span>f;</span><br><span class="line">        <span class="keyword">float</span> sourceSeemOverlap = (<span class="keyword">int</span>)((kDestSeemOverlap/destResolution.height)*sourceResolution.height);</span><br><span class="line">        <span class="built_in">CGImageRef</span> sourceTileImageRef;</span><br><span class="line">        <span class="keyword">int</span> iterations = (<span class="keyword">int</span>)( sourceResolution.height / sourceTile.size.height );</span><br><span class="line">        <span class="keyword">int</span> remainder = (<span class="keyword">int</span>)sourceResolution.height % (<span class="keyword">int</span>)sourceTile.size.height;</span><br><span class="line">        <span class="keyword">if</span>(remainder) &#123;</span><br><span class="line">            iterations++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Add seem overlaps to the tiles, but save the original tile height for y coordinate calculations.</span></span><br><span class="line">        <span class="keyword">float</span> sourceTileHeightMinusOverlap = sourceTile.size.height;</span><br><span class="line">        sourceTile.size.height += sourceSeemOverlap;</span><br><span class="line">        destTile.size.height += kDestSeemOverlap;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> y = <span class="number">0</span>; y &lt; iterations; ++y ) &#123;</span><br><span class="line">            <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">                sourceTile.origin.y = y * sourceTileHeightMinusOverlap + sourceSeemOverlap;</span><br><span class="line">                destTile.origin.y = destResolution.height - (( y + <span class="number">1</span> ) * sourceTileHeightMinusOverlap * imageScale + kDestSeemOverlap);</span><br><span class="line">                sourceTileImageRef = <span class="built_in">CGImageCreateWithImageInRect</span>( sourceImageRef, sourceTile );</span><br><span class="line">                <span class="keyword">if</span>( y == iterations - <span class="number">1</span> &amp;&amp; remainder ) &#123;</span><br><span class="line">                    <span class="keyword">float</span> dify = destTile.size.height;</span><br><span class="line">                    destTile.size.height = <span class="built_in">CGImageGetHeight</span>( sourceTileImageRef ) * imageScale;</span><br><span class="line">                    dify -= destTile.size.height;</span><br><span class="line">                    destTile.origin.y += dify;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">CGContextDrawImage</span>( destContext, destTile, sourceTileImageRef );</span><br><span class="line">                <span class="built_in">CGImageRelease</span>( sourceTileImageRef );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CGImageRef</span> destImageRef = <span class="built_in">CGBitmapContextCreateImage</span>(destContext);</span><br><span class="line">        <span class="built_in">CGContextRelease</span>(destContext);</span><br><span class="line">        <span class="keyword">if</span> (destImageRef == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成处理结束以后的图片</span></span><br><span class="line">        <span class="built_in">UIImage</span> *destImage = [<span class="built_in">UIImage</span> imageWithCGImage:destImageRef scale:image.scale orientation:image.imageOrientation];</span><br><span class="line">        <span class="built_in">CGImageRelease</span>(destImageRef);</span><br><span class="line">        <span class="keyword">if</span> (destImage == <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> destImage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> imge是否能够加压缩</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param image 图片</span></span><br><span class="line"><span class="comment"> @return 能否解压缩</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)shouldDecodeImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    <span class="comment">// Prevent "CGBitmapContextCreateImage: invalid context 0x0" error</span></span><br><span class="line">    <span class="keyword">if</span> (image == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do not decode animated images</span></span><br><span class="line">    <span class="comment">//如果是动态图片不处理</span></span><br><span class="line">    <span class="keyword">if</span> (image.images != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGImageRef</span> imageRef = image.CGImage;</span><br><span class="line">    <span class="comment">//获取image的alpha通道。通过通道获取图片数据</span></span><br><span class="line">    <span class="built_in">CGImageAlphaInfo</span> alpha = <span class="built_in">CGImageGetAlphaInfo</span>(imageRef);</span><br><span class="line">    <span class="built_in">BOOL</span> anyAlpha = (alpha == kCGImageAlphaFirst ||</span><br><span class="line">                     alpha == kCGImageAlphaLast ||</span><br><span class="line">                     alpha == kCGImageAlphaPremultipliedFirst ||</span><br><span class="line">                     alpha == kCGImageAlphaPremultipliedLast);</span><br><span class="line">    <span class="comment">// do not decode images with alpha</span></span><br><span class="line">    <span class="comment">//如果有alpha通道值，则不处理</span></span><br><span class="line">    <span class="keyword">if</span> (anyAlpha) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">是否需要减少原始图片的大小</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param image UIImage对象</span></span><br><span class="line"><span class="comment"> @return 是否支持scale</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)shouldScaleDownImage:(<span class="keyword">nonnull</span> <span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    <span class="built_in">BOOL</span> shouldScaleDown = <span class="literal">YES</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">CGImageRef</span> sourceImageRef = image.CGImage;</span><br><span class="line">    <span class="built_in">CGSize</span> sourceResolution = <span class="built_in">CGSizeZero</span>;</span><br><span class="line">    sourceResolution.width = <span class="built_in">CGImageGetWidth</span>(sourceImageRef);</span><br><span class="line">    sourceResolution.height = <span class="built_in">CGImageGetHeight</span>(sourceImageRef);</span><br><span class="line">    <span class="comment">//图片总共像素</span></span><br><span class="line">    <span class="keyword">float</span> sourceTotalPixels = sourceResolution.width * sourceResolution.height;</span><br><span class="line">    <span class="comment">//如果图片的总像素大于一定比例，则需要做简化处理</span></span><br><span class="line">    <span class="keyword">float</span> imageScale = kDestTotalPixels / sourceTotalPixels;</span><br><span class="line">    <span class="keyword">if</span> (imageScale &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        shouldScaleDown = <span class="literal">YES</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        shouldScaleDown = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> shouldScaleDown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取图片的色彩空间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param imageRef 图片</span></span><br><span class="line"><span class="comment"> @return 色彩空间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">CGColorSpaceRef</span>)colorSpaceForImageRef:(<span class="built_in">CGImageRef</span>)imageRef &#123;</span><br><span class="line">    <span class="comment">// current</span></span><br><span class="line">    <span class="built_in">CGColorSpaceModel</span> imageColorSpaceModel = <span class="built_in">CGColorSpaceGetModel</span>(<span class="built_in">CGImageGetColorSpace</span>(imageRef));</span><br><span class="line">    <span class="built_in">CGColorSpaceRef</span> colorspaceRef = <span class="built_in">CGImageGetColorSpace</span>(imageRef);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">BOOL</span> unsupportedColorSpace = (imageColorSpaceModel == kCGColorSpaceModelUnknown ||</span><br><span class="line">                                  imageColorSpaceModel == kCGColorSpaceModelMonochrome ||</span><br><span class="line">                                  imageColorSpaceModel == kCGColorSpaceModelCMYK ||</span><br><span class="line">                                  imageColorSpaceModel == kCGColorSpaceModelIndexed);</span><br><span class="line">    <span class="keyword">if</span> (unsupportedColorSpace) &#123;</span><br><span class="line">        colorspaceRef = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line">        <span class="built_in">CFAutorelease</span>(colorspaceRef);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> colorspaceRef;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> SD_MAC</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)decodedImageWithImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)decodedAndScaledDownImageWithImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7 总结"></a>7 总结</h2><p>下面是几个分类工具的使用。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据图片数据获取图片类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)getImageType:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">NSData</span> *imageData = [<span class="built_in">NSData</span> dataWithContentsOfFile:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"rock.gif"</span> ofType:<span class="literal">nil</span>]];</span><br><span class="line">    SDImageFormat formate = [<span class="built_in">NSData</span> sd_imageFormatForImageData:imageData];</span><br><span class="line">    <span class="built_in">NSString</span> *message = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%d"</span>,formate];</span><br><span class="line">    showMessage(message,<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取一张图片对应的两倍或者三倍屏幕对应的图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)getScaleImage:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *sourceImage = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"2.png"</span>];</span><br><span class="line">    <span class="built_in">UIImage</span> *dis2ScaleImage = SDScaledImageForKey(<span class="string">@"dist@2x.png"</span>, sourceImage);</span><br><span class="line">    <span class="built_in">UIImage</span> *dis3ScaleImage = SDScaledImageForKey(<span class="string">@"dist@3x.png"</span>, sourceImage);</span><br><span class="line">    <span class="built_in">NSString</span> *documentPath = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//NSLog(@"document:%@",documentPath);</span></span><br><span class="line">    <span class="built_in">NSString</span> *path1 = [documentPath stringByAppendingPathComponent:<span class="string">@"dist.png"</span>];</span><br><span class="line">    [<span class="built_in">UIImagePNGRepresentation</span>(sourceImage) writeToFile:path1 atomically:<span class="literal">YES</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *path2 = [documentPath stringByAppendingPathComponent:<span class="string">@"dist@2x.png"</span>];</span><br><span class="line">    [<span class="built_in">UIImagePNGRepresentation</span>(dis2ScaleImage) writeToFile:path2 atomically:<span class="literal">YES</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *path3 = [documentPath stringByAppendingPathComponent:<span class="string">@"dist@3x.png"</span>];</span><br><span class="line">    [<span class="built_in">UIImagePNGRepresentation</span>(dis3ScaleImage) writeToFile:path3 atomically:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 解压缩图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param sender 解压缩图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)unZipImage:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">UIImage</span> *sourceImage = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"2.png"</span>];</span><br><span class="line">    <span class="built_in">UIImage</span> *distImage = [<span class="built_in">UIImage</span> decodedAndScaledDownImageWithImage:sourceImage];</span><br><span class="line">    <span class="built_in">NSString</span> *documentPath = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *path1 = [documentPath stringByAppendingPathComponent:<span class="string">@"distImage.png"</span>];</span><br><span class="line">    [<span class="built_in">UIImagePNGRepresentation</span>(distImage) writeToFile:path1 atomically:<span class="literal">YES</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *path2 = [documentPath stringByAppendingPathComponent:<span class="string">@"sourceImage.png"</span>];</span><br><span class="line">    [<span class="built_in">UIImagePNGRepresentation</span>(sourceImage) writeToFile:path2 atomically:<span class="literal">YES</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后<a href="https://huang303513.github.io/2017/05/02/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%BA%8C" target="_blank" rel="noopener">原文地址</a>.html),<a href="https://github.com/huang303513/iOSSourceCodeStudy">demo地址</a>。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDWebImage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDWebImage源码解析(一)</title>
      <link href="/2017/05/01/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%B8%80)/"/>
      <url>/2017/05/01/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p><code>SDWebImage</code>基本是iOS项目的标配。他以灵活简单的api，提供了图片从加载、解析、处理、缓存、清理等一些列功能。让我们专心于业务的处理。但是并不意味着会用就可以了，通过源码分析和学习，让我们知道如何用好它。学习分析优秀源码也可以从潜移默化中给我们提供很多解决日常需求的思路。下面就是一张图来概述<code>SDWebImage</code>的所有类：</p><p><img src="https://huang303513.github.io/assets/postImages/2017050201.png" alt="img"></p><p>通过对这个图片的分析，我们可以把<code>SDWebImage</code>的源码分为三种：</p><ul><li>各种分类：<ul><li><code>UIButton(WebCache)</code>为<code>UIButton</code>类添加载图片的方法。比如正常情况下、点击情况下、的image属性和背景图片等。</li><li><code>MKAnnotationView(WebCache)</code>为<code>MKAnnotationView</code>类添加各种加载图片的方法。</li><li><code>UIImageView(WebCache)</code>为<code>UIImageView</code>类添加加载图片的方法。</li><li><code>UIImageView(HighlightedWebCache)</code>为<code>UIImageView</code>类添加高亮状态下加载图片的方法。</li><li><code>FLAnimatedImageView(WebCache)</code>为<code>FLAnimatedImageView</code>类添加加载动态的方法,这个分类需要引入<code>FLAnimatedImage</code>框架。<code>SDWebImage</code>推荐使用这个框架来处理动态图片(GIF)的加载。</li><li>UIImageView、UIButton、FLAnimatedImageView通过<code>sd_setImageWithURL</code>等api来做图片加载请求。这也是我们唯一需要做的。</li><li>上面的几个UIView子类都会调用<code>UIView(WebCache)</code>分类的<code>sd_internalSetImageWithURL</code>方法来做图片加载请求。具体是通过<code>SDWebImageManager</code>调用来实现的。同时实现了Operation取消、ActivityIndicator的添加与取消。</li></ul></li><li>各种工具类：<ul><li><code>NSData+ImageContentType</code>: 根据图片数据获取图片的类型，比如GIF、PNG等。</li><li><code>SDWebImageCompat</code>: 根据屏幕的分辨倍数成倍放大或者缩小图片大小。</li><li><code>SDImageCacheConfig</code>: 图片缓存策略记录。比如是否解压缩、是否允许iCloud、是否允许内存缓存、缓存时间等。默认的缓存时间是一周。</li><li><code>UIImage+MultiFormat</code>: 获取UIImage对象对应的data、或者根据data生成指定格式的UIImage，其实就是UIImage和NSData之间的转换处理。</li><li><code>UIImage+GIF</code>: 对于一张图片是否GIF做判断。可以根据NSData返回一张GIF的UIImage对象，并且只返回GIF的第一张图片生成的GIF。如果要显示多张GIF，使用<code>FLAnimatedImageView</code>。</li><li><code>SDWebImageDecoder</code>: 根据图片的情况，做图片的解压缩处理。并且根据图片的情况决定如何处理解压缩。</li></ul></li><li>核心类：<ul><li><code>SDImageCache</code>: 负责SDWebImage的整个缓存工作，是一个<code>单列对象</code>。缓存路径处理、缓存名字处理、管理内存缓存和磁盘缓存的创建和删除、根据指定key获取图片、存入图片的类型处理、根据缓存的创建和修改日期删除缓存。</li><li><code>SDWebImageManager</code>: 拥有一个<code>SDWebImageCache</code>和<code>SDWebImageDownloader</code>属性分别用于图片的缓存和加载处理。为UIView及其子类提供了加载图片的统一接口。管理正在加载操作的集合。这个类是<code>一个单列</code>。还有就是各种加载选项的处理。</li><li><code>SDWebImageDownloader</code>: 实现了图片加载的具体处理，如果图片在缓存存在则从缓存区。如果缓存不存在，则直接创建一个。<code>SDWebImageDownloaderOperation</code>对象来下载图片。管理NSURLRequest对象请求头的封装、缓存、cookie的设置。加载选项的处理等功能。管理Operation之间的依赖关系。这个类是<code>一个单列</code>.</li><li><code>SDWebImageDownloaderOperation</code>: 一个自定义的并行Operation子类。这个类主要实现了图片下载的具体操作、以及图片下载完成以后的图片解压缩、Operation生命周期管理等。  </li><li><code>UIView+WebCache</code>: 所有的UIButton、UIImageView都回调用这个分类的方法来完成图片加载的处理。同时通过<code>UIView+WebCacheOperation</code>分类来管理请求的取消和记录工作。所有UIView及其子类的分类都是用这个类的<code>sd_intemalSetImageWithURL:</code>来实现图片的加载。</li><li><code>FLAnimatedImageView</code>: 动态图片的数据通过ALAnimatedImage对象来封装。<code>FLAnimatedImageView</code>是<code>UIImageView</code>的子类。通过他完全可以实现动态图片的加载显示和管理。并且比<code>UIImageView</code>做了流程优化。</li></ul></li></ul><h2 id="2-实现流程"><a href="#2-实现流程" class="headerlink" title="2 实现流程"></a>2 实现流程</h2><p><code>SDWebImage</code>为我们实现了图片加载、数据处理、图片缓存等一些列工作。通过下图我们可以分析一下他的流程：</p><p><img src="https://huang303513.github.io/assets/postImages/2017050202.png" alt="img"></p><p>通过这个图，我们发现<code>SDWebImage</code>加载的过程是首先从缓存中加载数据。而且缓存加载又是优先从内存缓存中加载，然后才是磁盘加载。最后如果缓存没有，才从网络上加载。同时网络成功加载图片以后，存入本地缓存。</p><h2 id="3-UIView-WebCache分析"><a href="#3-UIView-WebCache分析" class="headerlink" title="3 UIView+WebCache分析"></a>3 <code>UIView+WebCache</code>分析</h2><p>UIImageView、UIButton、FLAnimatedImageView都会调用<code>UIView(WebCache)</code>分类的<code>sd_internalSetImageWithURL</code>方法来做图片加载请求。具体是通过<code>SDWebImageManager</code>调用来实现的。同时实现了Operation取消、ActivityIndicator的添加与取消。我们首先来看<code>sd_internalSetImageWithURL</code>方法的实现：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 所有UIView及其子类都是通过这个方法来加载图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param url 加载的url</span></span><br><span class="line"><span class="comment"> @param placeholder 占位图</span></span><br><span class="line"><span class="comment"> @param options 加载选项</span></span><br><span class="line"><span class="comment"> @param operationKey key</span></span><br><span class="line"><span class="comment"> @param setImageBlock Block</span></span><br><span class="line"><span class="comment"> @param progressBlock 进度Block</span></span><br><span class="line"><span class="comment"> @param completedBlock 回调Block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)sd_internalSetImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</span><br><span class="line">                  placeholderImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)placeholder</span><br><span class="line">                           options:(SDWebImageOptions)options</span><br><span class="line">                      operationKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)operationKey</span><br><span class="line">                     setImageBlock:(<span class="keyword">nullable</span> SDSetImageBlock)setImageBlock</span><br><span class="line">                          progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                         completed:(<span class="keyword">nullable</span> SDExternalCompletionBlock)completedBlock &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//取消当前类所对应的所有下载Operation对象</span></span><br><span class="line">    <span class="built_in">NSString</span> *validOperationKey = operationKey ?: <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]);</span><br><span class="line">    [<span class="keyword">self</span> sd_cancelImageLoadOperationWithKey:validOperationKey];</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     把UIImageView的加载图片操作和他自身用关联对象关联起来，方便后面取消等操作。关联的key就是UIImageView对应的类名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;imageURLKey, url, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">    <span class="comment">//如果有设置站位图，则先显示站位图</span></span><br><span class="line">    <span class="keyword">if</span> (!(options &amp; SDWebImageDelayPlaceholder)) &#123;</span><br><span class="line">        dispatch_main_async_safe(^&#123;</span><br><span class="line">            [<span class="keyword">self</span> sd_setImage:placeholder imageData:<span class="literal">nil</span> basedOnClassOrViaCustomSetImageBlock:setImageBlock];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (url) &#123;</span><br><span class="line">        <span class="comment">// check if activityView is enabled or not</span></span><br><span class="line">        <span class="comment">//如果UIImageView对象有设置添加转动菊花数据，加载的时候添加转动的菊花</span></span><br><span class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> sd_showActivityIndicatorView]) &#123;</span><br><span class="line">            [<span class="keyword">self</span> sd_addActivityIndicator];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        __<span class="keyword">weak</span> __<span class="keyword">typeof</span>(<span class="keyword">self</span>)wself = <span class="keyword">self</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *operation是一个`SDWebImageCombinedOperation`对象。通过这个对象来获取图片</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">id</span> &lt;SDWebImageOperation&gt; operation = [SDWebImageManager.sharedManager loadImageWithURL:url options:options progress:progressBlock completed:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSData</span> *data, <span class="built_in">NSError</span> *error, SDImageCacheType cacheType, <span class="built_in">BOOL</span> finished, <span class="built_in">NSURL</span> *imageURL) &#123;</span><br><span class="line">            __<span class="keyword">strong</span> __<span class="keyword">typeof</span> (wself) sself = wself;</span><br><span class="line">            <span class="comment">//停止菊花</span></span><br><span class="line">            [sself sd_removeActivityIndicator];</span><br><span class="line">            <span class="keyword">if</span> (!sself) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dispatch_main_async_safe(^&#123;</span><br><span class="line">                <span class="keyword">if</span> (!sself) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果设置了不自动显示图片，则直接调用completedBlock，让调用者处理图片的显示</span></span><br><span class="line">                <span class="keyword">if</span> (image &amp;&amp; (options &amp; SDWebImageAvoidAutoSetImage) &amp;&amp; completedBlock) &#123;</span><br><span class="line">                    completedBlock(image, error, cacheType, url);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (image) &#123;</span><br><span class="line">                    <span class="comment">//自动显示图片</span></span><br><span class="line">                    [sself sd_setImage:image imageData:data basedOnClassOrViaCustomSetImageBlock:setImageBlock];</span><br><span class="line">                    [sself sd_setNeedsLayout];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//如果设置了延迟显示占位图，则图片加载失败的情况下显示占位图</span></span><br><span class="line">                    <span class="keyword">if</span> ((options &amp; SDWebImageDelayPlaceholder)) &#123;</span><br><span class="line">                        [sself sd_setImage:placeholder imageData:<span class="literal">nil</span> basedOnClassOrViaCustomSetImageBlock:setImageBlock];</span><br><span class="line">                        [sself sd_setNeedsLayout];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//完成回调</span></span><br><span class="line">                <span class="keyword">if</span> (completedBlock &amp;&amp; finished) &#123;</span><br><span class="line">                    completedBlock(image, error, cacheType, url);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="comment">//关联Operationkey与Operation对象。方便后面根据key取消operation操作等。</span></span><br><span class="line">        [<span class="keyword">self</span> sd_setImageLoadOperation:operation forKey:validOperationKey];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//加载失败的情况</span></span><br><span class="line">        dispatch_main_async_safe(^&#123;</span><br><span class="line">            <span class="comment">//移除菊花</span></span><br><span class="line">            [<span class="keyword">self</span> sd_removeActivityIndicator];</span><br><span class="line">            <span class="keyword">if</span> (completedBlock) &#123;</span><br><span class="line">                <span class="built_in">NSError</span> *error = [<span class="built_in">NSError</span> errorWithDomain:SDWebImageErrorDomain code:<span class="number">-1</span> userInfo:@&#123;<span class="built_in">NSLocalizedDescriptionKey</span> : <span class="string">@"Trying to load a nil url"</span>&#125;];</span><br><span class="line">                completedBlock(<span class="literal">nil</span>, error, SDImageCacheTypeNone, url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给UIView及其子类添加旋转菊花是通过关联对象来实现的。通过如下几个方法来实现：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark 通过关联对象来实现菊花的添加</span></span><br><span class="line">- (<span class="built_in">UIActivityIndicatorView</span> *)activityIndicator &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">UIActivityIndicatorView</span> *)objc_getAssociatedObject(<span class="keyword">self</span>, &amp;TAG_ACTIVITY_INDICATOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setActivityIndicator:(<span class="built_in">UIActivityIndicatorView</span> *)activityIndicator &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;TAG_ACTIVITY_INDICATOR, activityIndicator, OBJC_ASSOCIATION_RETAIN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark 是否显示旋转菊花</span></span><br><span class="line">- (<span class="keyword">void</span>)sd_setShowActivityIndicatorView:(<span class="built_in">BOOL</span>)show &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;TAG_ACTIVITY_SHOW, @(show), OBJC_ASSOCIATION_RETAIN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)sd_showActivityIndicatorView &#123;</span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, &amp;TAG_ACTIVITY_SHOW) boolValue];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark 旋转菊花的样式</span></span><br><span class="line">- (<span class="keyword">void</span>)sd_setIndicatorStyle:(<span class="built_in">UIActivityIndicatorViewStyle</span>)style&#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;TAG_ACTIVITY_STYLE, [<span class="built_in">NSNumber</span> numberWithInt:style], OBJC_ASSOCIATION_RETAIN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>)sd_getIndicatorStyle&#123;</span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, &amp;TAG_ACTIVITY_STYLE) intValue];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有就是通过<code>UIView+WebCacheOperation</code>类来实现UIView的图片下载<code>Operation</code>的关联和取消。具体key的值可以从<code>sd_internalSetImageWithURL</code>中找到具体获取方式，通过在这个方法中实现<code>Operation</code>的关联与取消。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 关联Operation对象与key对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param operation Operation对象</span></span><br><span class="line"><span class="comment"> @param key key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)sd_setImageLoadOperation:(<span class="keyword">nullable</span> <span class="keyword">id</span>)operation forKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (key) &#123;</span><br><span class="line">        [<span class="keyword">self</span> sd_cancelImageLoadOperationWithKey:key];</span><br><span class="line">        <span class="keyword">if</span> (operation) &#123;</span><br><span class="line">            SDOperationsDictionary *operationDictionary = [<span class="keyword">self</span> operationDictionary];</span><br><span class="line">            operationDictionary[key] = operation;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 取消当前key对应的所有实现了SDWebImageOperation协议的Operation对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param key Operation对应的key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)sd_cancelImageLoadOperationWithKey:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="comment">// Cancel in progress downloader from queue</span></span><br><span class="line">    <span class="comment">//获取当前View对应的所有key</span></span><br><span class="line">    SDOperationsDictionary *operationDictionary = [<span class="keyword">self</span> operationDictionary];</span><br><span class="line">    <span class="comment">//获取对应的图片加载Operation</span></span><br><span class="line">    <span class="keyword">id</span> operations = operationDictionary[key];</span><br><span class="line">    <span class="comment">//取消所有当前View对应的所有Operation</span></span><br><span class="line">    <span class="keyword">if</span> (operations) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([operations isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">id</span> &lt;SDWebImageOperation&gt; operation <span class="keyword">in</span> operations) &#123;</span><br><span class="line">                <span class="keyword">if</span> (operation) &#123;</span><br><span class="line">                    [operation cancel];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([operations conformsToProtocol:<span class="class"><span class="keyword">@protocol</span>(<span class="title">SDWebImageOperation</span>)])</span>&#123;</span><br><span class="line">            [(<span class="keyword">id</span>&lt;SDWebImageOperation&gt;) operations cancel];</span><br><span class="line">        &#125;</span><br><span class="line">        [operationDictionary removeObjectForKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-FLAnimatedImageView分析"><a href="#4-FLAnimatedImageView分析" class="headerlink" title="4 FLAnimatedImageView分析"></a>4 FLAnimatedImageView分析</h2><p><code>SDWebImage</code>使用<code>FLAnimatedImage</code>框架来处理动态图片，它包含<code>FLAnimatedImage</code>和<code>FLAnimatedImageView</code>两个雷。动态图片的数据通过<code>ALAnimatedImage</code>对象来封装。<code>FLAnimatedImageView</code>是<code>UIImageView</code>的子类。通过他完全可以实现动态图片的加载显示和管理。并且比<code>UIImageView</code>做了流程优化。我们来看一下<code>FLAnimatedImageView.h</code>里面定义的接口：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> `FLAnimatedImageView`是一个`UIImageView`的子类。实现了`UIImageView`的`start/stop/isAnimating`方法。所以我们可以直接使用`FLAnimatedImageView`替代`UIImageView`。</span></span><br><span class="line"><span class="comment"> 通过`CADisplayLink`对象来处理当前图片帧和下一帧图片的显示。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FLAnimatedImageView</span> : <span class="title">UIImageView</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 动态图片的封装对象。首先通过设置`[UIImageView.image]`为nil来清除已经存在的动态图片。设置`animatedImage`属性会自动设置新的动态图片并且开始显示。而且会把当前显示的UIImage存入`currentFrame`中。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) FLAnimatedImage *animatedImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span>(^loopCompletionBlock)(<span class="built_in">NSUInteger</span> loopCountRemaining);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 当前动画帧对应的UIImage对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) <span class="built_in">UIImage</span> *currentFrame;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 当前图片镇对应的索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) <span class="built_in">NSUInteger</span> currentFrameIndex;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 指定动态图片执行所在的runloop的mode。NSRunLoopCommonMode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *runLoopMode;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>我们通过<code>FLAnimatedImageView+WebCache</code>这个分类的<code>sd_setImageWithURL</code>来加载动态图片：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> FLAnimatedImage+WebCache分类通过这个方法来加载动态图片</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param url 图片的url</span></span><br><span class="line"><span class="comment"> @param placeholder 占位图</span></span><br><span class="line"><span class="comment"> @param options 加载选项</span></span><br><span class="line"><span class="comment"> @param progressBlock 进度Block</span></span><br><span class="line"><span class="comment"> @param completedBlock 完成Block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)sd_setImageWithURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url</span><br><span class="line">          placeholderImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)placeholder</span><br><span class="line">                   options:(SDWebImageOptions)options</span><br><span class="line">                  progress:(<span class="keyword">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</span><br><span class="line">                 completed:(<span class="keyword">nullable</span> SDExternalCompletionBlock)completedBlock &#123;</span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>)weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span> sd_internalSetImageWithURL:url</span><br><span class="line">                    placeholderImage:placeholder</span><br><span class="line">                             options:options</span><br><span class="line">                        operationKey:<span class="literal">nil</span></span><br><span class="line">                       setImageBlock:^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSData</span> *imageData) &#123;</span><br><span class="line">                           <span class="comment">//根据NSData的类型获取图片的类型</span></span><br><span class="line">                           SDImageFormat imageFormat = [<span class="built_in">NSData</span> sd_imageFormatForImageData:imageData];</span><br><span class="line">                           <span class="comment">//如果是GIF，则处理</span></span><br><span class="line">                           <span class="keyword">if</span> (imageFormat == SDImageFormatGIF) &#123;</span><br><span class="line">                               <span class="comment">//给FLAnimatedImageView的animatedImage属性设置动态图片。这个setter方法被重写了</span></span><br><span class="line">                               weakSelf.animatedImage = [FLAnimatedImage animatedImageWithGIFData:imageData];</span><br><span class="line">                               weakSelf.image = <span class="literal">nil</span>;</span><br><span class="line">                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                               <span class="comment">//不是动态图片，则正常显示</span></span><br><span class="line">                               weakSelf.image = image;</span><br><span class="line">                               weakSelf.animatedImage = <span class="literal">nil</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                            progress:progressBlock</span><br><span class="line">                           completed:completedBlock];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出，获取图片数据以后。首先通过<code>SDImageFormat</code>得到图片的类型。如果是GIF类型，则先把图片数据封装成一个<code>FLAnimatedImage</code>对象。然后设置给animatedImage属性。这个属性的setter方法如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> animatedImage的setter方法。通过这个属性setter方法来设置FLAnimatedImageView的数据。并且开始动态显示</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param animatedImage animatedImage属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setAnimatedImage:(FLAnimatedImage *)animatedImage</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (![_animatedImage isEqual:animatedImage]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (animatedImage) &#123;</span><br><span class="line">            <span class="comment">//清除UIImageView以前的图片数据</span></span><br><span class="line">            <span class="keyword">super</span>.image = <span class="literal">nil</span>;</span><br><span class="line">            <span class="keyword">super</span>.highlighted = <span class="literal">NO</span>;</span><br><span class="line">            <span class="comment">//先说intrinsicContentSize，也就是控件的内置大小。比如UILabel，UIButton等控件，他们都有自己的内置大小。控件的内置大小往往是由控件本身的内容所决定的，比如一个UILabel的文字很长，那么该UILabel的内置大小自然会很长。控件的内置大小可以通过UIView的intrinsicContentSize属性来获取内置大小，也可以通过invalidateIntrinsicContentSize方法来在下次UI规划事件中重新计算intrinsicContentSize。如果直接创建一个原始的UIView对象，显然它的内置大小为0。</span></span><br><span class="line">            [<span class="keyword">self</span> invalidateIntrinsicContentSize];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//停止动态图片的动态显示</span></span><br><span class="line">            [<span class="keyword">self</span> stopAnimating];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        _animatedImage = animatedImage;</span><br><span class="line">        <span class="comment">//当前动态图片数据帧</span></span><br><span class="line">        <span class="keyword">self</span>.currentFrame = animatedImage.posterImage;</span><br><span class="line">        <span class="comment">//当前数据帧索引</span></span><br><span class="line">        <span class="keyword">self</span>.currentFrameIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (animatedImage.loopCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.loopCountdown = animatedImage.loopCount;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.loopCountdown = <span class="built_in">NSUIntegerMax</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.accumulator = <span class="number">0.0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//更新对象的状态。从而更新shouldAnimated这个属性的值。</span></span><br><span class="line">        [<span class="keyword">self</span> updateShouldAnimate];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.shouldAnimate) &#123;</span><br><span class="line">            <span class="comment">//开始动态显示</span></span><br><span class="line">            [<span class="keyword">self</span> startAnimating];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [<span class="keyword">self</span>.layer setNeedsDisplay];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 判断当前FLAnimatedImageView是否需要显示动画</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)updateShouldAnimate</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">BOOL</span> isVisible = <span class="keyword">self</span>.window &amp;&amp; <span class="keyword">self</span>.superview &amp;&amp; ![<span class="keyword">self</span> isHidden] &amp;&amp; <span class="keyword">self</span>.alpha &gt; <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">self</span>.shouldAnimate = <span class="keyword">self</span>.animatedImage &amp;&amp; isVisible;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-CADisplayLink"><a href="#5-CADisplayLink" class="headerlink" title="5 CADisplayLink"></a>5 CADisplayLink</h2><p>有趣的地方是<code>FLAnimatedImageView</code>通过过CADisplayLink来刷新动态图片帧的显示。CADisplayLink是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。我们在应用中创建一个新的CADisplayLink对象，把它添加到一个runloop中，并给它提供一个target和selector在屏幕刷新的时候调用。</p><p>一但CADisplayLink以特定的模式注册到runloop之后，每当屏幕需要刷新的时候runloop就会调用CADisplayLink绑定的target上的selector，这时target可以读到CADisplayLink的每次调用的时间戳，用来准备下一帧显示需要的数据。例如一个视频应用使用时间戳来计算下一帧要显示的视频数据。在UI做动画的过程中，需要通过时间戳来计算UI对象在动画的下一帧要更新的大小等等。在添加进runloop的时候我们应该选用高一些的优先级，来保证动画的平滑。可以设想一下，我们在动画的过程中，runloop被添加进来了一个高优先级的任务，那么，下一次的调用就会被暂停转而先去执行高优先级的任务，然后在接着执行CADisplayLink的调用，从而造成动画过程的卡顿，使动画不流畅。duration属性提供了每帧之间的时间，也就是屏幕每次刷新之间的的时间。我们可以使用这个时间来计算出下一帧要显示的UI的数值。但是duration只是个大概的时间，如果CPU忙于其它计算，就没法保证以相同的频率执行屏幕的绘制操作，这样会跳过几次调用回调方法的机会。frameInterval属性是可读可写的NSInteger型值，标识间隔多少帧调用一次selector方法，默认值是1，即每帧都调用一次。如果每帧都调用一次的话，对于iOS设备来说那刷新频率就是60HZ也就是每秒60次，如果将 frameInterval 设为2 那么就会两帧调用一次，也就是变成了每秒刷新30次。我们通过pause属性开控制CADisplayLink的运行。当我们想结束一个CADisplayLink的时候，应该调用-(void)invalidate从runloop中删除并删除之前绑定的 target跟selector。另外CADisplayLink 不能被继承。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每1/60秒都回调用一次displayDidRefresh方法来做UI处理</span></span><br><span class="line"><span class="keyword">self</span>.displayLink = [<span class="built_in">CADisplayLink</span> displayLinkWithTarget:weakProxy selector:<span class="keyword">@selector</span>(displayDidRefresh:)];</span><br><span class="line"><span class="comment">//把displayLink加入主线程的commomMode里面        </span></span><br><span class="line">[<span class="keyword">self</span>.displayLink addToRunLoop:[<span class="built_in">NSRunLoop</span> mainRunLoop] forMode:<span class="keyword">self</span>.runLoopMode];</span><br></pre></td></tr></table></figure><p>最后<a href="https://huang303513.github.io/2017/05/01/SDWebImage%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%B8%80" target="_blank" rel="noopener">原文地址</a>.html),<a href="https://github.com/huang303513/iOSSourceCodeStudy">demo地址</a>。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDWebImage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AFNetWorking源码之AFSecurityPolicy</title>
      <link href="/2017/04/26/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BAFSecurityPolicy/"/>
      <url>/2017/04/26/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BAFSecurityPolicy/</url>
      
        <content type="html"><![CDATA[<h2 id="1-HTTPS以及SSL-TSL"><a href="#1-HTTPS以及SSL-TSL" class="headerlink" title="1 HTTPS以及SSL/TSL"></a>1 HTTPS以及SSL/TSL</h2><p>SSL(Secure Sockets Layer, 安全套接字层)，因为原先互联网上使用的HTTP协议是明文的，存在很多缺点，比如传输内容会被偷窥和篡改。SSL协议的作用就是在传输层对网络连接进行加密。</p><p>到了1999年，SSL 因为应用广泛，已经成为互联网上的事实标准。IETF就在那年把SSL标准化。标准化之后的名称改为 TLS（Transport Layer Security，传输层安全协议）。SSL与TLS可以视作同一个东西的不同阶段。</p><p>简单来说，HTTPS = HTTP + SSL/TLS, 也就是<code>HTTP over SSL</code>或<code>HTTP over TLS</code>,这是后面加S的由来。</p><p>HTTPS和HTTP异同：HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。HTTP的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP协议安全。</p><h2 id="2-HTTPS的握手"><a href="#2-HTTPS的握手" class="headerlink" title="2 HTTPS的握手"></a>2 HTTPS的握手</h2><p><img src="https://huang303513.github.io/assets/postImages/2017042601.png" alt="img"></p><h4 id="1客户端发出请求（ClientHello）"><a href="#1客户端发出请求（ClientHello）" class="headerlink" title="1客户端发出请求（ClientHello）"></a>1客户端发出请求（ClientHello）</h4><p>首先，客户端（通常是浏览器）先向服务器发出加密通信的请求，这被叫做ClientHello请求。在这一步，客户端主要向服务器提供以下信息。</p><ul><li>(1)支持的协议版本，比如TLS1.0版。</li><li>(2)一个客户端生成的随机数，稍后用于生成”对话密钥”。</li><li>(3)支持的加密方法，比如RSA公钥加密。</li><li>(4)支持的压缩方法。</li></ul><h4 id="2服务器回应（SeverHello）"><a href="#2服务器回应（SeverHello）" class="headerlink" title="2服务器回应（SeverHello）"></a>2服务器回应（SeverHello）</h4><p>服务器收到客户端请求后，向客户端发出回应，这叫做SeverHello。服务器的回应包含以下内容。</p><ul><li>(1)确认使用的加密通信协议版本，比如TLS1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。</li><li>(2)一个服务器生成的随机数，稍后用于生成”对话密钥”。</li><li>(3)确认使用的加密方法，比如RSA公钥加密。</li><li>(4)服务器证书。</li></ul><h4 id="3客户端回应"><a href="#3客户端回应" class="headerlink" title="3客户端回应"></a>3客户端回应</h4><p>客户端收到服务器回应以后，首先验证服务器证书。如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。如果证书没有问题，客户端就会从证书中取出服务器的公钥。然后，向服务器发送下面三项信息。</p><ul><li>(1)一个随机数。该随机数用服务器公钥加密，防止被窃听。</li><li>(2)编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。</li><li>(3)客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。</li></ul><p>上面第一项的随机数，是整个握手阶段出现的第三个随机数，又称”pre-master key”。有了它以后，客户端和服务器就同时有了三个随机数，接着双方就用事先商定的加密方法，各自生成本次会话所用的同一把”会话密钥”。</p><h4 id="4服务器的最后回应"><a href="#4服务器的最后回应" class="headerlink" title="4服务器的最后回应"></a>4服务器的最后回应</h4><p>服务器收到客户端的第三个随机数pre-master key之后，计算生成本次会话所用的”会话密钥”。然后，向客户端最后发送下面信息。</p><ul><li>(1)编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。</li><li>(2)服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供客户端校验。</li></ul><p>至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的HTTP协议，只不过用”会话密钥”加密内容。</p><h2 id="3-数字证书"><a href="#3-数字证书" class="headerlink" title="3 数字证书"></a>3 数字证书</h2><p>上面握手阶段的第二步服务器给客户端的证书就是数字证书，该证书包含了公钥等信息，一般是由服务器发给客户端，接收方通过验证这个证书是不是由信赖的CA签发，或者与本地的证书相对比，来判断证书是否可信；假如需要双向验证，则服务器和客户端都需要发送数字证书给对方验证。</p><p>数字证书是一个电子文档，其中包含了持有者的信息、公钥以及证明该证书有效的数字签名。而数字证书以及相关的公钥管理和验证等技术组成了PKI（公钥基础设施）规范体系。一般来说，数字证书是由数字证书认证机构(Certificate authority，即CA)来负责签发和管理，并承担PKI体系中公钥合法性的检验责任；数字证书的类型有很多，而HTTPS使用的是SSL证书。</p><p>怎么来验证数字证书是由CA签发的，而不是第三方伪造的呢？ 在回答这个问题前，我们需要先了解CA的组织结构。首先，CA组织结构中，最顶层的就是根CA，根CA下可以授权给多个二级CA，而二级CA又可以授权多个三级CA，所以CA的组织结构是一个树结构。对于SSL证书市场来说，主要被Symantec(旗下有VeriSign和GeoTrust)、Comodo SSL、Go Daddy 和 GlobalSign 瓜分。 了解了CA的组织结构后，来看看数字证书的签发流程：</p><p><img src="https://huang303513.github.io/assets/postImages/2017042602.png" alt="img"></p><p>数字证书的签发机构CA，在接收到申请者的资料后进行核对并确定信息的真实有效，然后就会制作一份符合X.509标准的文件。证书中的证书内容包括了持有者信息和公钥等都是由申请者提供的，而数字签名则是CA机构对证书内容进行hash加密后等到的，而这个数字签名就是我们验证证书是否是有可信CA签发的数据。</p><p><img src="https://huang303513.github.io/assets/postImages/2017042603.png" alt="img"></p><p>接收端接到一份数字证书Cer1后，对证书的内容做Hash等到H1；然后在签发该证书的机构CA1的数字证书中找到公钥，对证书上数字签名进行解密，得到证书Cer1签名的Hash摘要H2；对比H1和H2，假如相等，则表示证书没有被篡改。但这个时候还是不知道CA是否是合法的，我们看到上图中有CA机构的数字证书，这个证书是公开的，所有人都可以获取到。而这个证书中的数字签名是上一级生成的，所以可以这样一直递归验证下去，直到根CA。根CA是自验证的，即他的数字签名是由自己的私钥来生成的。合法的根CA会被浏览器和操作系统加入到权威信任CA列表中，这样就完成了最终的验证。所以，一定要保护好自己环境（浏览器/操作系统）中根CA信任列表，信任了根CA就表示信任所有根CA下所有子级CA所签发的证书，不要随便添加根CA证书。</p><h2 id="4-SSL-Pinning"><a href="#4-SSL-Pinning" class="headerlink" title="4 SSL Pinning"></a>4 SSL Pinning</h2><p>可以理解为证书绑定，是指客户端直接保存服务端的证书，建立https连接时直接对比服务端返回的和客户端保存的两个证书是否一样，一样就表明证书是真的，不再去系统的信任证书机构里寻找验证。这适用于非浏览器应用，因为浏览器跟很多未知服务端打交道，无法把每个服务端的证书都保存到本地，但CS架构的像手机APP事先已经知道要进行通信的服务端，可以直接在客户端保存这个服务端的证书用于校验。</p><p>为什么直接对比就能保证证书没问题？如果中间人从客户端取出证书，再伪装成服务端跟其他客户端通信，它发送给客户端的这个证书不就能通过验证吗？确实可以通过验证，但后续的流程走不下去，因为下一步客户端会用证书里的公钥加密，中间人没有这个证书的私钥就解不出内容，也就截获不到数据，这个证书的私钥只有真正的服务端有，中间人伪造证书主要伪造的是公钥。</p><p>为什么要用SSL Pinning？正常的验证方式不够吗？如果服务端的证书是从受信任的的CA机构颁发的，验证是没问题的，但CA机构颁发证书比较昂贵，小企业或个人用户可能会选择自己颁发证书，这样就无法通过系统受信任的CA机构列表验证这个证书的真伪了，所以需要SSL Pinning这样的方式去验证。</p><h2 id="5-iOS的HTTPS请求"><a href="#5-iOS的HTTPS请求" class="headerlink" title="5 iOS的HTTPS请求"></a>5 iOS的HTTPS请求</h2><p>下面我会实现自签名证书(12306)、SSL信任证书(baidu)、系统证书(苹果)三种情况的实现来看他们的区别,百度和12306的证书已经被我下载到我的项目里面了，具体可以去Demo里面看实现过程。</p><h4 id="1-自签名证书"><a href="#1-自签名证书" class="headerlink" title="1 自签名证书"></a>1 自签名证书</h4><p>我们手动指定<code>securityPolicy</code>认证属性。通过12306证书来实现。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自建证书认证</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)buttion1:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://kyfw.12306.cn/otn/leftTicket/init"</span>];</span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *request = [<span class="built_in">NSMutableURLRequest</span> requestWithURL:url];</span><br><span class="line">   <span class="comment">// [request setValue:@"text/html" forHTTPHeaderField:@"Accept"];</span></span><br><span class="line">    AFURLSessionManager *manager = [[AFURLSessionManager alloc]initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line">    <span class="comment">//指定安全策略</span></span><br><span class="line">    manager.securityPolicy = [<span class="keyword">self</span> ticketSecurityPolicy];</span><br><span class="line">    <span class="comment">//指定返回数据类型,默认是AFJSONResponseSerializer类型，犹豫这里不是JSON类型的返回数据，所以需要手动指定返回类型</span></span><br><span class="line">    AFHTTPResponseSerializer *responseSerializer = [AFHTTPResponseSerializer serializer];</span><br><span class="line">    responseSerializer.acceptableContentTypes = [<span class="built_in">NSSet</span> setWithObject:<span class="string">@"text/html"</span>];</span><br><span class="line">    manager.responseSerializer = responseSerializer;</span><br><span class="line">    <span class="built_in">NSURLSessionDataTask</span> *dataTask = [manager dataTaskWithRequest:request uploadProgress:<span class="literal">nil</span> downloadProgress:<span class="literal">nil</span> completionHandler:^(<span class="built_in">NSURLResponse</span> * _Nonnull response, <span class="keyword">id</span>  _Nullable responseObject, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@-----%@"</span>,[[<span class="built_in">NSString</span> alloc] initWithData:responseObject encoding:<span class="built_in">NSUTF8StringEncoding</span>],error);</span><br><span class="line">    &#125;];</span><br><span class="line">    [dataTask resume];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 12306的认证证书，他的认证证书是自签名的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return 返回指定的认证策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-(AFSecurityPolicy*)ticketSecurityPolicy &#123;</span><br><span class="line">    <span class="comment">// /先导入证书</span></span><br><span class="line">    <span class="built_in">NSString</span> *cerPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"12306"</span> ofType:<span class="string">@"cer"</span>];<span class="comment">//证书的路径</span></span><br><span class="line">    <span class="built_in">NSData</span> *certData = [<span class="built_in">NSData</span> dataWithContentsOfFile:cerPath];</span><br><span class="line">    <span class="built_in">NSSet</span> *set = [<span class="built_in">NSSet</span> setWithObject:certData];</span><br><span class="line">    </span><br><span class="line">    AFSecurityPolicy *securityPolicy;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate withPinnedCertificates:set];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// AFSSLPinningModeCertificate 使用证书验证模式。下面这个方法会默认使用项目里面的所有证书</span></span><br><span class="line">        securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// allowInvalidCertificates 是否允许无效证书（也就是自建的证书），默认为NO</span></span><br><span class="line">    <span class="comment">// 如果是需要验证自建证书，需要设置为YES</span></span><br><span class="line">    securityPolicy.allowInvalidCertificates = <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//validatesDomainName 是否需要验证域名，默认为YES；</span></span><br><span class="line">    <span class="comment">//假如证书的域名与你请求的域名不一致，需把该项设置为NO；如设成NO的话，即服务器使用其他可信任机构颁发的证书，也可以建立连接，这个非常危险，建议打开。</span></span><br><span class="line">    <span class="comment">//置为NO，主要用于这种情况：客户端请求的是子域名，而证书上的是另外一个域名。因为SSL证书上的域名是独立的，假如证书上注册的域名是www.google.com，那么mail.google.com是无法验证通过的；当然，有钱可以注册通配符的域名*.google.com，但这个还是比较贵的。</span></span><br><span class="line">    <span class="comment">//如置为NO，建议自己添加对应域名的校验逻辑。</span></span><br><span class="line">    securityPolicy.validatesDomainName = <span class="literal">NO</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> securityPolicy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-SSL信任证书"><a href="#2-SSL信任证书" class="headerlink" title="2 SSL信任证书"></a>2 SSL信任证书</h4><p>我们手动指定<code>securityPolicy</code>认证属性。通过百度证书来实现。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//认证证书认证</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)button2:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://www.baidu.com"</span>];</span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *request = [<span class="built_in">NSMutableURLRequest</span> requestWithURL:url];</span><br><span class="line">    <span class="comment">//[request setValue:@"text/html" forHTTPHeaderField:@"Accept"];</span></span><br><span class="line">    AFURLSessionManager *manager = [[AFURLSessionManager alloc]initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line">    <span class="comment">//指定安全策略</span></span><br><span class="line">    manager.securityPolicy = [<span class="keyword">self</span> baiduSecurityPolicy];</span><br><span class="line">    <span class="comment">//指定返回数据类型,默认是AFJSONResponseSerializer类型，犹豫这里不是JSON类型的返回数据，所以需要手动指定返回类型</span></span><br><span class="line">    AFHTTPResponseSerializer *responseSerializer = [AFHTTPResponseSerializer serializer];</span><br><span class="line">    responseSerializer.acceptableContentTypes = [<span class="built_in">NSSet</span> setWithObject:<span class="string">@"text/html"</span>];</span><br><span class="line">    manager.responseSerializer = responseSerializer;</span><br><span class="line">    <span class="built_in">NSURLSessionDataTask</span> *dataTask = [manager dataTaskWithRequest:request uploadProgress:<span class="literal">nil</span> downloadProgress:<span class="literal">nil</span> completionHandler:^(<span class="built_in">NSURLResponse</span> * _Nonnull response, <span class="keyword">id</span>  _Nullable responseObject, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@-----%@"</span>,[[<span class="built_in">NSString</span> alloc] initWithData:responseObject encoding:<span class="built_in">NSUTF8StringEncoding</span>],error);</span><br><span class="line">    &#125;];</span><br><span class="line">    [dataTask resume];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">百度的的认证证书，他的认证证书是花钱买的，也就是不是自签名的证书。这种证书，如果我们要手动指定，pinmode只能是`AFSSLPinningModeNone`</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return 返回指定的认证策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-(AFSecurityPolicy*)baiduSecurityPolicy &#123;</span><br><span class="line">    <span class="comment">// /先导入证书</span></span><br><span class="line">    <span class="built_in">NSString</span> *cerPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"baidu"</span> ofType:<span class="string">@"cer"</span>];<span class="comment">//证书的路径</span></span><br><span class="line">    <span class="built_in">NSData</span> *certData = [<span class="built_in">NSData</span> dataWithContentsOfFile:cerPath];</span><br><span class="line">    <span class="built_in">NSSet</span> *set = [<span class="built_in">NSSet</span> setWithObject:certData];</span><br><span class="line">    </span><br><span class="line">    AFSecurityPolicy *securityPolicy;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//这里只能用AFSSLPinningModeNone才能成功，而且我系统的证书列表里面已经有百度的证书了</span></span><br><span class="line">        securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone withPinnedCertificates:set];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// AFSSLPinningModeCertificate 使用证书验证模式。下面这个方法会默认使用项目里面的所有证书</span></span><br><span class="line">        securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// allowInvalidCertificates 是否允许无效证书（也就是自建的证书），默认为NO</span></span><br><span class="line">    <span class="comment">// 如果是需要验证自建证书，需要设置为YES</span></span><br><span class="line">    securityPolicy.allowInvalidCertificates = <span class="literal">NO</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//validatesDomainName 是否需要验证域名，默认为YES；</span></span><br><span class="line">    <span class="comment">//假如证书的域名与你请求的域名不一致，需把该项设置为NO；如设成NO的话，即服务器使用其他可信任机构颁发的证书，也可以建立连接，这个非常危险，建议打开。</span></span><br><span class="line">    <span class="comment">//置为NO，主要用于这种情况：客户端请求的是子域名，而证书上的是另外一个域名。因为SSL证书上的域名是独立的，假如证书上注册的域名是www.google.com，那么mail.google.com是无法验证通过的；当然，有钱可以注册通配符的域名*.google.com，但这个还是比较贵的。</span></span><br><span class="line">    <span class="comment">//如置为NO，建议自己添加对应域名的校验逻辑。</span></span><br><span class="line">    securityPolicy.validatesDomainName = <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> securityPolicy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-SSL证书AFN默认处理"><a href="#3-SSL证书AFN默认处理" class="headerlink" title="3 SSL证书AFN默认处理"></a>3 SSL证书AFN默认处理</h4><p>这里我们不做任何额外的处理，直接使用AFN的默认证书处理机制。通过<code>AFURLSessionManager</code>的<code>securityPolicy</code>默认实现。它会和存在系统中的做对比来验证证书。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//系统证书认证</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)button3:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://www.apple.com/"</span>];</span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *request = [<span class="built_in">NSMutableURLRequest</span> requestWithURL:url];</span><br><span class="line">    AFURLSessionManager *manager = [[AFURLSessionManager alloc]initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line">    <span class="comment">//指定返回数据类型,默认是AFJSONResponseSerializer类型，犹豫这里不是JSON类型的返回数据，所以需要手动指定返回类型</span></span><br><span class="line">    AFHTTPResponseSerializer *responseSerializer = [AFHTTPResponseSerializer serializer];</span><br><span class="line">    responseSerializer.acceptableContentTypes = [<span class="built_in">NSSet</span> setWithObject:<span class="string">@"text/html"</span>];</span><br><span class="line">    manager.responseSerializer = responseSerializer;</span><br><span class="line">    <span class="built_in">NSURLSessionDataTask</span> *dataTask = [manager dataTaskWithRequest:request uploadProgress:<span class="literal">nil</span> downloadProgress:<span class="literal">nil</span> completionHandler:^(<span class="built_in">NSURLResponse</span> * _Nonnull response, <span class="keyword">id</span>  _Nullable responseObject, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@-----%@"</span>,[[<span class="built_in">NSString</span> alloc] initWithData:responseObject encoding:<span class="built_in">NSUTF8StringEncoding</span>],error);</span><br><span class="line">    &#125;];</span><br><span class="line">    [dataTask resume];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-AFSecurityPolicy源码解析"><a href="#6-AFSecurityPolicy源码解析" class="headerlink" title="6 AFSecurityPolicy源码解析"></a>6 AFSecurityPolicy源码解析</h2><h4 id="AFSecurityPolicy分三种验证模式"><a href="#AFSecurityPolicy分三种验证模式" class="headerlink" title="AFSecurityPolicy分三种验证模式"></a>AFSecurityPolicy分三种验证模式</h4><ul><li>AFSSLPinningModeNone:<br>  这个模式表示不做SSL pinning，只跟浏览器一样在系统的信任机构列表里验证服务端返回的证书。若证书是信任机构签发的就会通过，若是自己服务器生成的证书，这里是不会通过的。</li><li>AFSSLPinningModeCertificate:<br>  这个模式表示用证书绑定方式验证证书，需要客户端保存有服务端的证书拷贝，这里验证分两步，第一步验证证书的域名/有效期等信息，第二步是对比服务端返回的证书跟客户端返回的是否一致。这里还没弄明白第一步的验证是怎么进行的，代码上跟去系统信任机构列表里验证一样调用了SecTrustEvaluate，只是这里的列表换成了客户端保存的那些证书列表。若要验证这个，是否应该把服务端证书的颁发机构根证书也放到客户端里？</li><li>AFSSLPinningModePublicKey:<br>  这个模式同样是用证书绑定方式验证，客户端要有服务端的证书拷贝，只是验证时只验证证书里的公钥，不验证证书的有效期等信息。只要公钥是正确的，就能保证通信不会被窃听，因为中间人没有私钥，无法解开通过公钥加密的数据。</li></ul><h4 id="SecTrustRef"><a href="#SecTrustRef" class="headerlink" title="SecTrustRef"></a>SecTrustRef</h4><p>这是一个需要验证的信任对象,包含待验证的证书和支持的验证方法等。</p><h4 id="SecTrustResultType"><a href="#SecTrustResultType" class="headerlink" title="SecTrustResultType"></a>SecTrustResultType</h4><p>表示验证结果。其中 kSecTrustResultProceed表示serverTrust验证成功，且该验证得到了用户认可(例如在弹出的是否信任的alert框中选择always trust)。 kSecTrustResultUnspecified表示 serverTrust验证成功，此证书也被暗中信任了，但是用户并没有显示地决定信任该证书。 两者取其一就可以认为对serverTrust验证成功。</p><h4 id="SecTrustEvaluate"><a href="#SecTrustEvaluate" class="headerlink" title="SecTrustEvaluate"></a>SecTrustEvaluate</h4><p>证书校验函数,在函数的内部递归地从叶节点证书到根证书验证。需要验证证书本身的合法性（验证签名完整性，验证证书有效期等);验证证书颁发者的合法性（查找颁发者的证书并检查其合法性，这个过程是递归的).而递归的终止条件是证书验证过程中遇到了锚点证书(锚点证书:嵌入到操作系统中的根证书,这个根证书是权威证书颁发机构颁发的自签名证书)。</p><p><code>AFSecurityPolicy</code>的源码细节如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 证书的验证类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> - AFSSLPinningModeNone: 不使用`pinned certificates`来验证证书</span></span><br><span class="line"><span class="comment"> - AFSSLPinningModePublicKey: 使用`pinned certificates`来验证证书的公钥</span></span><br><span class="line"><span class="comment"> - AFSSLPinningModeCertificate: 使用`pinned certificates`来验证整个证书</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, AFSSLPinningMode) &#123;</span><br><span class="line">    AFSSLPinningModeNone,</span><br><span class="line">    AFSSLPinningModePublicKey,</span><br><span class="line">    AFSSLPinningModeCertificate,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取指定证书的公钥</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param certificate 证书数据</span></span><br><span class="line"><span class="comment"> @return 公钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> AFPublicKeyForCertificate(<span class="built_in">NSData</span> *certificate) &#123;</span><br><span class="line">    <span class="keyword">id</span> allowedPublicKey = <span class="literal">nil</span>;</span><br><span class="line">    SecCertificateRef allowedCertificate;</span><br><span class="line">    SecPolicyRef policy = <span class="literal">nil</span>;</span><br><span class="line">    SecTrustRef allowedTrust = <span class="literal">nil</span>;</span><br><span class="line">    SecTrustResultType result;</span><br><span class="line">    <span class="comment">//获取证书对象</span></span><br><span class="line">    allowedCertificate = SecCertificateCreateWithData(<span class="literal">NULL</span>, (__bridge <span class="built_in">CFDataRef</span>)certificate);</span><br><span class="line">    __Require_Quiet(allowedCertificate != <span class="literal">NULL</span>, _<span class="keyword">out</span>);</span><br><span class="line">    <span class="comment">//获取X.509的认证策略</span></span><br><span class="line">    policy = SecPolicyCreateBasicX509();</span><br><span class="line">    <span class="comment">//获取allowedTrust对象的值</span></span><br><span class="line">    __Require_noErr_Quiet(SecTrustCreateWithCertificates(allowedCertificate, policy, &amp;allowedTrust), _<span class="keyword">out</span>);</span><br><span class="line">    __Require_noErr_Quiet(SecTrustEvaluate(allowedTrust, &amp;result), _<span class="keyword">out</span>);</span><br><span class="line">    <span class="comment">//根据allowedTrust获取对应的公钥</span></span><br><span class="line">    allowedPublicKey = (__bridge_transfer <span class="keyword">id</span>)SecTrustCopyPublicKey(allowedTrust);</span><br><span class="line"><span class="comment">//C++的gumpto跳转，当前面的操作出错以后，直接跳入_out执行</span></span><br><span class="line">_<span class="keyword">out</span>:</span><br><span class="line">    <span class="keyword">if</span> (allowedTrust) &#123;</span><br><span class="line">        <span class="built_in">CFRelease</span>(allowedTrust);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (policy) &#123;</span><br><span class="line">        <span class="built_in">CFRelease</span>(policy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (allowedCertificate) &#123;</span><br><span class="line">        <span class="built_in">CFRelease</span>(allowedCertificate);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回公钥</span></span><br><span class="line">    <span class="keyword">return</span> allowedPublicKey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 在指定的证书和认证策略下，验证SecTrustRef对象是否是受信任的、合法的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param serverTrust SecTrustRef对象</span></span><br><span class="line"><span class="comment"> @return 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">BOOL</span> AFServerTrustIsValid(SecTrustRef serverTrust) &#123;</span><br><span class="line">    <span class="built_in">BOOL</span> isValid = <span class="literal">NO</span>;</span><br><span class="line">    SecTrustResultType result;</span><br><span class="line">    <span class="comment">//获取serverTrust的认证结果，调用`SecTrustEvaluate`表示通过系统的证书来比较认证</span></span><br><span class="line">    __Require_noErr_Quiet(SecTrustEvaluate(serverTrust, &amp;result), _<span class="keyword">out</span>);</span><br><span class="line">    isValid = (result == kSecTrustResultUnspecified || result == kSecTrustResultProceed);</span><br><span class="line"></span><br><span class="line">_<span class="keyword">out</span>:</span><br><span class="line">    <span class="keyword">return</span> isValid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据`serverTrust`获取认证的证书链</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param serverTrust serverTrust对象</span></span><br><span class="line"><span class="comment"> @return 认证证书链</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSArray</span> * AFCertificateTrustChainForServerTrust(SecTrustRef serverTrust) &#123;</span><br><span class="line">    <span class="comment">//获取认证链的总层次</span></span><br><span class="line">    <span class="built_in">CFIndex</span> certificateCount = SecTrustGetCertificateCount(serverTrust);</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *trustChain = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:(<span class="built_in">NSUInteger</span>)certificateCount];</span><br><span class="line">    <span class="comment">//获取每一级认证链，把获取的证书数据存入数组中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">CFIndex</span> i = <span class="number">0</span>; i &lt; certificateCount; i++) &#123;</span><br><span class="line">        SecCertificateRef certificate = SecTrustGetCertificateAtIndex(serverTrust, i);</span><br><span class="line">        [trustChain addObject:(__bridge_transfer <span class="built_in">NSData</span> *)SecCertificateCopyData(certificate)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回证书链数组</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:trustChain];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 获取serverTrust对象的认证链的公钥数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param serverTrust serverTrust对象</span></span><br><span class="line"><span class="comment"> @return 公钥数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSArray</span> * AFPublicKeyTrustChainForServerTrust(SecTrustRef serverTrust) &#123;</span><br><span class="line">    <span class="comment">//X.509标准的安全策略</span></span><br><span class="line">    SecPolicyRef policy = SecPolicyCreateBasicX509();</span><br><span class="line">    <span class="comment">//获取证书链的证书数量</span></span><br><span class="line">    <span class="built_in">CFIndex</span> certificateCount = SecTrustGetCertificateCount(serverTrust);</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *trustChain = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:(<span class="built_in">NSUInteger</span>)certificateCount];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">CFIndex</span> i = <span class="number">0</span>; i &lt; certificateCount; i++) &#123;</span><br><span class="line">        SecCertificateRef certificate = SecTrustGetCertificateAtIndex(serverTrust, i);</span><br><span class="line"></span><br><span class="line">        SecCertificateRef someCertificates[] = &#123;certificate&#125;;</span><br><span class="line">        <span class="built_in">CFArrayRef</span> certificates = <span class="built_in">CFArrayCreate</span>(<span class="literal">NULL</span>, (<span class="keyword">const</span> <span class="keyword">void</span> **)someCertificates, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        SecTrustRef trust;</span><br><span class="line">        <span class="comment">//通过一个证书、认证策略新建一个SecTrustRef对象</span></span><br><span class="line">        __Require_noErr_Quiet(SecTrustCreateWithCertificates(certificates, policy, &amp;trust), _<span class="keyword">out</span>);</span><br><span class="line">        </span><br><span class="line">        SecTrustResultType result;</span><br><span class="line">        <span class="comment">//验证SecTrustRef对象是否成功</span></span><br><span class="line">        __Require_noErr_Quiet(SecTrustEvaluate(trust, &amp;result), _<span class="keyword">out</span>);</span><br><span class="line">        <span class="comment">//把SecTrustRef对应的公钥加入数组中</span></span><br><span class="line">        [trustChain addObject:(__bridge_transfer <span class="keyword">id</span>)SecTrustCopyPublicKey(trust)];</span><br><span class="line"></span><br><span class="line">    _<span class="keyword">out</span>:</span><br><span class="line">        <span class="keyword">if</span> (trust) &#123;</span><br><span class="line">            <span class="built_in">CFRelease</span>(trust);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (certificates) &#123;</span><br><span class="line">            <span class="built_in">CFRelease</span>(certificates);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CFRelease</span>(policy);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:trustChain];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark -</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AFSecurityPolicy</span>()</span></span><br><span class="line"><span class="comment">//认证策略</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readwrite</span>, <span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) AFSSLPinningMode SSLPinningMode;</span><br><span class="line"><span class="comment">//公钥集合</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readwrite</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSSet</span> *pinnedPublicKeys;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AFSecurityPolicy</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 从MainBundle中获取所有证书</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param bundle 返回包含在bundle中的证书集合。如果AFNetworking使用的是静态库，我们必须通过这个方法来加载证书。并且通过`policyWithPinningMode:withPinnedCertificates`方法来指定认证类型。</span></span><br><span class="line"><span class="comment"> @return 返回bundle里面的证书</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">NSSet</span> *)certificatesInBundle:(<span class="built_in">NSBundle</span> *)bundle &#123;</span><br><span class="line">    <span class="comment">//获取项目里的所有.cer证书</span></span><br><span class="line">    <span class="built_in">NSArray</span> *paths = [bundle pathsForResourcesOfType:<span class="string">@"cer"</span> inDirectory:<span class="string">@"."</span>];</span><br><span class="line">    <span class="built_in">NSMutableSet</span> *certificates = [<span class="built_in">NSMutableSet</span> setWithCapacity:[paths count]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *path <span class="keyword">in</span> paths) &#123;</span><br><span class="line">        <span class="comment">//获取证书对应的NSData，并且加入集合中</span></span><br><span class="line">        <span class="built_in">NSData</span> *certificateData = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br><span class="line">        [certificates addObject:certificateData];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回证书集合</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithSet:certificates];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 返回当前类所在bundle所在的证书集合</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return 证书集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">NSSet</span> *)defaultPinnedCertificates &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSSet</span> *_defaultPinnedCertificates = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        <span class="comment">//获取当前类所在bundle</span></span><br><span class="line">        <span class="built_in">NSBundle</span> *bundle = [<span class="built_in">NSBundle</span> bundleForClass:[<span class="keyword">self</span> <span class="keyword">class</span>]];</span><br><span class="line">        _defaultPinnedCertificates = [<span class="keyword">self</span> certificatesInBundle:bundle];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _defaultPinnedCertificates;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 返回默认的安全认证策略,在这里是验证系统的证书。这个策略不允许非法证书、验证主机名、不验证证书内容和公钥</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @return 返回认证策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)defaultPolicy &#123;</span><br><span class="line">    AFSecurityPolicy *securityPolicy = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">    securityPolicy.SSLPinningMode = AFSSLPinningModeNone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> securityPolicy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据指定的认证策略和默认的证书列表初始化一个`AFSecurityPolicy`对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param pinningMode 认证策略</span></span><br><span class="line"><span class="comment"> @return `AFSecurityPolicy`对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)policyWithPinningMode:(AFSSLPinningMode)pinningMode &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> policyWithPinningMode:pinningMode withPinnedCertificates:[<span class="keyword">self</span> defaultPinnedCertificates]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 通过制定的认证策略`pinningMode`和证书集合`pinnedCertificates`来初始化一个`AFSecurityPolicy`对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param pinningMode 认证模型</span></span><br><span class="line"><span class="comment"> @param pinnedCertificates 证书集合</span></span><br><span class="line"><span class="comment"> @return AFSecurityPolicy对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)policyWithPinningMode:(AFSSLPinningMode)pinningMode withPinnedCertificates:(<span class="built_in">NSSet</span> *)pinnedCertificates &#123;</span><br><span class="line">    AFSecurityPolicy *securityPolicy = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">    securityPolicy.SSLPinningMode = pinningMode;</span><br><span class="line">    <span class="comment">//设置`_pinnedCertificates`和`pinnedPublicKeys`属性，分别对应证书集合和公钥集合</span></span><br><span class="line">    [securityPolicy setPinnedCertificates:pinnedCertificates];</span><br><span class="line">    <span class="comment">//返回初始化成功的`AFSecurityPolicy`</span></span><br><span class="line">    <span class="keyword">return</span> securityPolicy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//默认是要认证主机名称</span></span><br><span class="line">    <span class="keyword">self</span>.validatesDomainName = <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">通过指定的证书结合获取到对应的公钥集合。然后赋值给`pinnedPublicKeys`属性</span></span><br><span class="line"><span class="comment"> @param pinnedCertificates 证书集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setPinnedCertificates:(<span class="built_in">NSSet</span> *)pinnedCertificates &#123;</span><br><span class="line">    _pinnedCertificates = pinnedCertificates;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.pinnedCertificates) &#123;</span><br><span class="line">        <span class="built_in">NSMutableSet</span> *mutablePinnedPublicKeys = [<span class="built_in">NSMutableSet</span> setWithCapacity:[<span class="keyword">self</span>.pinnedCertificates count]];</span><br><span class="line">        <span class="comment">//迭代每一个证书</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSData</span> *certificate <span class="keyword">in</span> <span class="keyword">self</span>.pinnedCertificates) &#123;</span><br><span class="line">            <span class="comment">//获取证书对应的公钥</span></span><br><span class="line">            <span class="keyword">id</span> publicKey = AFPublicKeyForCertificate(certificate);</span><br><span class="line">            <span class="keyword">if</span> (!publicKey) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            [mutablePinnedPublicKeys addObject:publicKey];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//赋值给对应的属性</span></span><br><span class="line">        <span class="keyword">self</span>.pinnedPublicKeys = [<span class="built_in">NSSet</span> setWithSet:mutablePinnedPublicKeys];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.pinnedPublicKeys = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark -</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 为serverTrust对象指定认证策略，如果domain不为nil,则包括对主机名的认证。这个方法必须在接受到`authentication challenge`返回的时候调用。</span></span><br><span class="line"><span class="comment"> SecTrustRef可以理解为桥接证书与认证策略的对象，他关联指定的证书与认证策略</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param serverTrust 服务器的X.509标准的证书数据</span></span><br><span class="line"><span class="comment"> @param domain 认证服务器的主机名。如果是nil,则不会对主机名进行认证。</span></span><br><span class="line"><span class="comment"> @return serverTrust是否通过认证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)evaluateServerTrust:(SecTrustRef)serverTrust</span><br><span class="line">                  forDomain:(<span class="built_in">NSString</span> *)domain</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (domain &amp;&amp; <span class="keyword">self</span>.allowInvalidCertificates &amp;&amp; <span class="keyword">self</span>.validatesDomainName &amp;&amp; (<span class="keyword">self</span>.SSLPinningMode == AFSSLPinningModeNone || [<span class="keyword">self</span>.pinnedCertificates count] == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="comment">// https://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/NetworkingTopics/Articles/OverridingSSLChainValidationCorrectly.html</span></span><br><span class="line">        <span class="comment">//  According to the docs, you should only trust your provided certs for evaluation.</span></span><br><span class="line">        <span class="comment">//  Pinned certificates are added to the trust. Without pinned certificates,</span></span><br><span class="line">        <span class="comment">//  there is nothing to evaluate against.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//  From Apple Docs:</span></span><br><span class="line">        <span class="comment">//          "Do not implicitly trust self-signed certificates as anchors (kSecTrustOptionImplicitAnchors).</span></span><br><span class="line">        <span class="comment">//           Instead, add your own (self-signed) CA certificate to the list of trusted anchors."</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"In order to validate a domain name for self signed certificates, you MUST use pinning."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *policies = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.validatesDomainName) &#123;</span><br><span class="line">        <span class="comment">//使用需要认证主机名的认证策略</span></span><br><span class="line">        [policies addObject:(__bridge_transfer <span class="keyword">id</span>)SecPolicyCreateSSL(<span class="literal">true</span>, (__bridge <span class="built_in">CFStringRef</span>)domain)];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//使用默认的认证策略</span></span><br><span class="line">        [policies addObject:(__bridge_transfer <span class="keyword">id</span>)SecPolicyCreateBasicX509()];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给serverTrust对象指定认证策略</span></span><br><span class="line">    SecTrustSetPolicies(serverTrust, (__bridge <span class="built_in">CFArrayRef</span>)policies);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.SSLPinningMode == AFSSLPinningModeNone) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.allowInvalidCertificates || AFServerTrustIsValid(serverTrust);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!AFServerTrustIsValid(serverTrust) &amp;&amp; !<span class="keyword">self</span>.allowInvalidCertificates) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据证书验证策略、数字签名认证策略、其他认证策略来处理不同情况</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">self</span>.SSLPinningMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> AFSSLPinningModeNone:<span class="comment">//不验证公钥和证书</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">        <span class="keyword">case</span> AFSSLPinningModeCertificate: &#123;<span class="comment">//验证整个证书</span></span><br><span class="line">            <span class="built_in">NSMutableArray</span> *pinnedCertificates = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">            <span class="comment">//根据指定证书获取，获取对应的证书对象</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">NSData</span> *certificateData <span class="keyword">in</span> <span class="keyword">self</span>.pinnedCertificates) &#123;</span><br><span class="line">                [pinnedCertificates addObject:(__bridge_transfer <span class="keyword">id</span>)SecCertificateCreateWithData(<span class="literal">NULL</span>, (__bridge <span class="built_in">CFDataRef</span>)certificateData)];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把证书与serverTrust关联起来</span></span><br><span class="line">            SecTrustSetAnchorCertificates(serverTrust, (__bridge <span class="built_in">CFArrayRef</span>)pinnedCertificates);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!AFServerTrustIsValid(serverTrust)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// obtain the chain after being validated, which *should* contain the pinned certificate in the last position (if it's the Root CA)</span></span><br><span class="line">            <span class="comment">//获取serverTrust证书链。直到根证书。</span></span><br><span class="line">            <span class="built_in">NSArray</span> *serverCertificates = AFCertificateTrustChainForServerTrust(serverTrust);</span><br><span class="line">            <span class="comment">//如果`pinnedCertificates`包含`serverTrust`对象对应的证书链的根证书。则返回true</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">NSData</span> *trustChainCertificate <span class="keyword">in</span> [serverCertificates reverseObjectEnumerator]) &#123;</span><br><span class="line">                <span class="keyword">if</span> ([<span class="keyword">self</span>.pinnedCertificates containsObject:trustChainCertificate]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> AFSSLPinningModePublicKey: &#123;<span class="comment">//只验证证书里面的数字签名</span></span><br><span class="line">            <span class="built_in">NSUInteger</span> trustedPublicKeyCount = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//根据serverTrust对象和SecPolicyCreateBasicX509认证策略，获取对应的公钥集合</span></span><br><span class="line">            <span class="built_in">NSArray</span> *publicKeys = AFPublicKeyTrustChainForServerTrust(serverTrust);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">id</span> trustChainPublicKey <span class="keyword">in</span> publicKeys) &#123;</span><br><span class="line">                <span class="comment">//把获取的公钥和系统获取的默认公钥比较，如果相等，则通过认证</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">id</span> pinnedPublicKey <span class="keyword">in</span> <span class="keyword">self</span>.pinnedPublicKeys) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (AFSecKeyIsEqualToKey((__bridge SecKeyRef)trustChainPublicKey, (__bridge SecKeyRef)pinnedPublicKey)) &#123;</span><br><span class="line">                        trustedPublicKeyCount += <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> trustedPublicKeyCount &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - NSKeyValueObserving</span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSSet</span> *)keyPathsForValuesAffectingPinnedPublicKeys &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObject:<span class="string">@"pinnedCertificates"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - NSSecureCoding</span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)supportsSecureCoding &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)decoder &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">self</span> init];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.SSLPinningMode = [[decoder decodeObjectOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>] forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(SSLPinningMode))] unsignedIntegerValue];</span><br><span class="line">    <span class="keyword">self</span>.allowInvalidCertificates = [decoder decodeBoolForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(allowInvalidCertificates))];</span><br><span class="line">    <span class="keyword">self</span>.validatesDomainName = [decoder decodeBoolForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(validatesDomainName))];</span><br><span class="line">    <span class="keyword">self</span>.pinnedCertificates = [decoder decodeObjectOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>] forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(pinnedCertificates))];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)coder &#123;</span><br><span class="line">    [coder encodeObject:[<span class="built_in">NSNumber</span> numberWithUnsignedInteger:<span class="keyword">self</span>.SSLPinningMode] forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(SSLPinningMode))];</span><br><span class="line">    [coder encodeBool:<span class="keyword">self</span>.allowInvalidCertificates forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(allowInvalidCertificates))];</span><br><span class="line">    [coder encodeBool:<span class="keyword">self</span>.validatesDomainName forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(validatesDomainName))];</span><br><span class="line">    [coder encodeObject:<span class="keyword">self</span>.pinnedCertificates forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(pinnedCertificates))];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - NSCopying</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone &#123;</span><br><span class="line">    AFSecurityPolicy *securityPolicy = [[[<span class="keyword">self</span> <span class="keyword">class</span>] allocWithZone:zone] init];</span><br><span class="line">    securityPolicy.SSLPinningMode = <span class="keyword">self</span>.SSLPinningMode;</span><br><span class="line">    securityPolicy.allowInvalidCertificates = <span class="keyword">self</span>.allowInvalidCertificates;</span><br><span class="line">    securityPolicy.validatesDomainName = <span class="keyword">self</span>.validatesDomainName;</span><br><span class="line">    securityPolicy.pinnedCertificates = [<span class="keyword">self</span>.pinnedCertificates copyWithZone:zone];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> securityPolicy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>最后<a href="https://huang303513.github.io/2017/04/26/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BAFSecurityPolicy.html" target="_blank" rel="noopener">原文地址</a>,<a href="https://github.com/huang303513/iOSSourceCodeStudy">demo地址</a>。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AFNetWorking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AFNetWorking源码之AFURLRequestSerialization</title>
      <link href="/2017/04/25/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BAFURLRequestSerialization/"/>
      <url>/2017/04/25/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BAFURLRequestSerialization/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p><code>AFURLRequestSerialization</code>主要实现了根据不同情况和参数初始化<code>NSURLRequest</code>对象的功能。只有<code>AFHTTPSessionManager</code>有requestSerialization，默认是<code>AFHTTPRequestSerializer</code>对象。尤其是我们使用<code>MultipartForm</code>请求的时候，可以使用它帮我们完成繁杂的请求头拼接过程，这个是最值得推荐的。</p><p>在阅读源码之前，一定要对<code>multipart/form-data</code>非常熟悉，不然会有很多地方看不懂。具体可以看<a href="https://huang303513.github.io/2017/04/20/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BAFHTTPSessionManager.html" target="_blank" rel="noopener">AFNetWorking源码之AFHTTPSessionManager</a>关于它的那部分。</p><h2 id="2-AFURLRequestSerialization的api分析"><a href="#2-AFURLRequestSerialization的api分析" class="headerlink" title="2 AFURLRequestSerialization的api分析"></a>2 AFURLRequestSerialization的api分析</h2><p><code>AFURLRequestSerialization</code>包含了四个部分：</p><ul><li>全局方法:<code>AFPercentEscapedStringFromString</code>和<code>AFQueryStringFromParameters</code>。</li><li>协议<code>AFURLRequestSerialization</code>提供了一个序列化<code>parameters</code>参数的方法。我们可以把参数转换为查询字符串、HTTP请求体、设置恰当的请求头等。</li><li><code>AFHTTPRequestSerializer</code>继承自<code>AFURLRequestSerialization</code>协议。提供了查询字符串/URL格式的参数序列化、默认请求头处理。同时以提供HTTP状态码和返回数据的验证等工作。<br>_ <code>AFMultipartFormData</code>协议。主要用于添加<code>multipart/form-data</code>请求的<code>Content-Disposition: file; filename=#{generated filename}; name=#{name}&quot;</code> 和 <code>Content-Type: #{generated mimeType}</code>的请求体域。</li><li>类型<code>AFJSONRequestSerializer</code>和<code>AFPropertyListRequestSerializer</code>。主要针对JSON和Plist类型的序列化优化。</li></ul><p><code>AFPercentEscapedStringFromString</code>返回一个字符串的百分号编码格式的字符串。因为url只有普通英文字符和数字，特殊字符$-_.+!*’()还有保留字符。所以很多字符都需要编码,非ASCII编码的字符串先转换为ASCII编码，然后再转换为百分号编码。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">AFPercentEscapedStringFromString方法的作用就是把一个普通字符串转换为百分号编码的字符串</span></span><br><span class="line"><span class="comment"> http://blog.csdn.net/qq_32010299/article/details/51790407</span></span><br><span class="line"><span class="comment"> @param string 一个字符串</span></span><br><span class="line"><span class="comment"> @return 百分号编码的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">NSString</span> * AFPercentEscapedStringFromString(<span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">    <span class="comment">//可能需要做百分号编码处理的字符串</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kAFCharactersGeneralDelimitersToEncode = <span class="string">@":#[]@"</span>; </span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kAFCharactersSubDelimitersToEncode = <span class="string">@"!$&amp;'()*+,;="</span>;</span><br><span class="line">    <span class="comment">//不需要做百分号编码的字符串集合</span></span><br><span class="line">    <span class="built_in">NSMutableCharacterSet</span> * allowedCharacterSet = [[<span class="built_in">NSCharacterSet</span> URLQueryAllowedCharacterSet] mutableCopy];</span><br><span class="line">    <span class="comment">//获取目前系统中最终需要做百分号编码转换的字符集合</span></span><br><span class="line">    [allowedCharacterSet removeCharactersInString:[kAFCharactersGeneralDelimitersToEncode stringByAppendingString:kAFCharactersSubDelimitersToEncode]];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSUInteger</span> <span class="keyword">const</span> batchSize = <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *escaped = <span class="string">@""</span>.mutableCopy;</span><br><span class="line">    <span class="comment">//迭代字符串做百分号编码</span></span><br><span class="line">    <span class="keyword">while</span> (index &lt; string.length) &#123;</span><br><span class="line">        <span class="built_in">NSUInteger</span> length = MIN(string.length - index, batchSize);</span><br><span class="line">        <span class="built_in">NSRange</span> range = <span class="built_in">NSMakeRange</span>(index, length);</span><br><span class="line">        <span class="comment">//移除字符串中的一些非法字符。</span></span><br><span class="line">        range = [string rangeOfComposedCharacterSequencesForRange:range];</span><br><span class="line">        <span class="built_in">NSString</span> *substring = [string substringWithRange:range];</span><br><span class="line">        <span class="comment">//指定范围内的字符做百分号编码</span></span><br><span class="line">        <span class="built_in">NSString</span> *encoded = [substring stringByAddingPercentEncodingWithAllowedCharacters:allowedCharacterSet];</span><br><span class="line">        [escaped appendString:encoded];</span><br><span class="line">        index += range.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回处理以后的字符串</span></span><br><span class="line"><span class="keyword">return</span> escaped;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私有类<code>AFQueryStringPair</code>的主要功能就是把一个key和vaue的键值对转换为百分号编码格式的键值对并且用=链接起来</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AFQueryStringPair</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readwrite</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> field;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readwrite</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> value;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithField:(<span class="keyword">id</span>)field value:(<span class="keyword">id</span>)value;</span><br><span class="line">- (<span class="built_in">NSString</span> *)URLEncodedStringValue;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AFQueryStringPair</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithField:(<span class="keyword">id</span>)field value:(<span class="keyword">id</span>)value &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.field = field;</span><br><span class="line">    <span class="keyword">self</span>.value = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 把key、value键值对转换为百分号编码，并且链接起来</span></span><br><span class="line"><span class="comment"> @return 转换后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)URLEncodedStringValue &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.value || [<span class="keyword">self</span>.value isEqual:[<span class="built_in">NSNull</span> null]]) &#123;</span><br><span class="line">        <span class="keyword">return</span> AFPercentEscapedStringFromString([<span class="keyword">self</span>.field description]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//先用百分号编码处理，然后再拼接</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@=%@"</span>, AFPercentEscapedStringFromString([<span class="keyword">self</span>.field description]), AFPercentEscapedStringFromString([<span class="keyword">self</span>.value description])];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>方法<code>AFQueryStringPairsFromDictionary</code>和<code>AFQueryStringPairsFromKeyAndValue</code>分别把一个字典或者key、value键值对转换为url的query参数。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 把一个字典转换为百分号编码的query参数</span></span><br><span class="line"><span class="comment"> @param parameters 要转换的字典</span></span><br><span class="line"><span class="comment"> @return query参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">NSString</span> * AFQueryStringFromParameters(<span class="built_in">NSDictionary</span> *parameters) &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *mutablePairs = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (AFQueryStringPair *pair <span class="keyword">in</span> AFQueryStringPairsFromDictionary(parameters)) &#123;</span><br><span class="line">        <span class="comment">//调用`AFQueryStringPair`序列化</span></span><br><span class="line">        [mutablePairs addObject:[pair URLEncodedStringValue]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [mutablePairs componentsJoinedByString:<span class="string">@"&amp;"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">NSArray</span> * AFQueryStringPairsFromDictionary(<span class="built_in">NSDictionary</span> *dictionary) &#123;</span><br><span class="line">    <span class="keyword">return</span> AFQueryStringPairsFromKeyAndValue(<span class="literal">nil</span>, dictionary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 分别把一个字典、数组、集合转换为一个AFQueryStringPair对象的的数组。</span></span><br><span class="line"><span class="comment"> @param key key</span></span><br><span class="line"><span class="comment"> @param value value</span></span><br><span class="line"><span class="comment"> @return AFQueryStringPair类型数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">NSArray</span> * AFQueryStringPairsFromKeyAndValue(<span class="built_in">NSString</span> *key, <span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *mutableQueryStringComponents = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="comment">//使用`description`排序</span></span><br><span class="line">    <span class="built_in">NSSortDescriptor</span> *sortDescriptor = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@"description"</span> ascending:<span class="literal">YES</span> selector:<span class="keyword">@selector</span>(compare:)];</span><br><span class="line">    <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *dictionary = value;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> nestedKey <span class="keyword">in</span> [dictionary.allKeys sortedArrayUsingDescriptors:@[ sortDescriptor ]]) &#123;</span><br><span class="line">            <span class="keyword">id</span> nestedValue = dictionary[nestedKey];</span><br><span class="line">            <span class="keyword">if</span> (nestedValue) &#123;</span><br><span class="line">                <span class="comment">//如果是字典，就取出每一对key、value处理</span></span><br><span class="line">                [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue((key ? [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@[%@]"</span>, key, nestedKey] : nestedKey), nestedValue)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="built_in">NSArray</span> *array = value;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> nestedValue <span class="keyword">in</span> array) &#123;</span><br><span class="line">            <span class="comment">//如果是数组，则取出元素，添加一个额外的key处理</span></span><br><span class="line">            [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue([<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@[]"</span>, key], nestedValue)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSSet</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="built_in">NSSet</span> *set = value;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> obj <span class="keyword">in</span> [set sortedArrayUsingDescriptors:@[ sortDescriptor ]]) &#123;</span><br><span class="line">            <span class="comment">//如果是集合，就是用默认key和集合元素处理</span></span><br><span class="line">            [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue(key, obj)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//添加处理后的key和value</span></span><br><span class="line">        [mutableQueryStringComponents addObject:[[AFQueryStringPair alloc] initWithField:key value:value]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回`AFQueryStringPair`对象数组</span></span><br><span class="line">    <span class="keyword">return</span> mutableQueryStringComponents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AFHTTPRequestSerializerObservedKeyPaths</code>全局方法指定了request请求序列化要观察的属性列表、是一个数组，里面有对蜂窝数据、缓存策略、cookie、管道、网络状态、超时这几个元素。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSArray</span> * AFHTTPRequestSerializerObservedKeyPaths() &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSArray</span> *_AFHTTPRequestSerializerObservedKeyPaths = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        _AFHTTPRequestSerializerObservedKeyPaths = @[<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(allowsCellularAccess)), <span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(cachePolicy)), <span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(HTTPShouldHandleCookies)), <span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(HTTPShouldUsePipelining)), <span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(networkServiceType)), <span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(timeoutInterval))];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _AFHTTPRequestSerializerObservedKeyPaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-AFHTTPRequestSerializer的解析"><a href="#2-1-AFHTTPRequestSerializer的解析" class="headerlink" title="2.1 AFHTTPRequestSerializer的解析"></a>2.1 <code>AFHTTPRequestSerializer</code>的解析</h4><p><code>AFHTTPRequestSerializer</code>主要实现了大部分request拼接转化功能。比如通用请求头的添加如<code>userAgent</code>、request属性的KVO观察、手动指定请求头序列化的Block、负责具体的request对象的初始化等。</p><p>1 <code>AFHTTPRequestSerializer</code>的属性和初始化</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性列表</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AFHTTPRequestSerializer</span> ()</span></span><br><span class="line"><span class="comment">//某个request需要观察的属性集合</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readwrite</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableSet</span> *mutableObservedChangedKeyPaths;</span><br><span class="line"><span class="comment">//存储request的请求头域</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readwrite</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *mutableHTTPRequestHeaders;</span><br><span class="line"><span class="comment">//用于修改或者设置请求体域的dispatch_queue_t。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readwrite</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">dispatch_queue_t</span> requestHeaderModificationQueue;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readwrite</span>, <span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) AFHTTPRequestQueryStringSerializationStyle queryStringSerializationStyle;</span><br><span class="line"><span class="comment">//手动指定parameters参数序列化的Block</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readwrite</span>, <span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) AFQueryStringSerializationBlock queryStringSerialization;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="comment">//初始化方法</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定序列化编码格式</span></span><br><span class="line">    <span class="keyword">self</span>.stringEncoding = <span class="built_in">NSUTF8StringEncoding</span>;</span><br><span class="line">    <span class="comment">//请求头保存在一个字典中，方便后面构建request的时候拼装。</span></span><br><span class="line">    <span class="keyword">self</span>.mutableHTTPRequestHeaders = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    <span class="comment">//初始化一个操作request的header域的dispatch_queue_t</span></span><br><span class="line">    <span class="keyword">self</span>.requestHeaderModificationQueue = dispatch_queue_create(<span class="string">"requestHeaderModificationQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *acceptLanguagesComponents = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *枚举系统的language列表。然后设置`Accept-Language`请求头域。优先级逐级降低，最多五个。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    [[<span class="built_in">NSLocale</span> preferredLanguages] enumerateObjectsUsingBlock:^(<span class="keyword">id</span> obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">        <span class="keyword">float</span> q = <span class="number">1.0</span>f - (idx * <span class="number">0.1</span>f);</span><br><span class="line">        [acceptLanguagesComponents addObject:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@;q=%0.1g"</span>, obj, q]];</span><br><span class="line">        *stop = q &lt;= <span class="number">0.5</span>f;</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="comment">//数组元素使用`, `分割</span></span><br><span class="line">    [<span class="keyword">self</span> setValue:[acceptLanguagesComponents componentsJoinedByString:<span class="string">@", "</span>] forHTTPHeaderField:<span class="string">@"Accept-Language"</span>];</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *设置User-Agent请求头域的值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">NSString</span> *userAgent = <span class="literal">nil</span>;</span><br><span class="line">    userAgent = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/%@ (%@; iOS %@; Scale/%0.2f)"</span>, [[<span class="built_in">NSBundle</span> mainBundle] infoDictionary][(__bridge <span class="built_in">NSString</span> *)kCFBundleExecutableKey] ?: [[<span class="built_in">NSBundle</span> mainBundle] infoDictionary][(__bridge <span class="built_in">NSString</span> *)kCFBundleIdentifierKey], [[<span class="built_in">NSBundle</span> mainBundle] infoDictionary][<span class="string">@"CFBundleShortVersionString"</span>] ?: [[<span class="built_in">NSBundle</span> mainBundle] infoDictionary][(__bridge <span class="built_in">NSString</span> *)kCFBundleVersionKey], [[<span class="built_in">UIDevice</span> currentDevice] model], [[<span class="built_in">UIDevice</span> currentDevice] systemVersion], [[<span class="built_in">UIScreen</span> mainScreen] scale]];</span><br><span class="line">    <span class="keyword">if</span> (userAgent) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *如果userAgent里面包含非ASCII码的字符，比如中文，则需要转换。这里是转换为对应的拉丁字母。</span></span><br><span class="line"><span class="comment">         AFNetWorking3.X源码阅读/1.0 (iPhone; iOS 10.2; Scale/2.00)</span></span><br><span class="line"><span class="comment">         AFNetWorking3.X yuan ma yue du/1.0 (iPhone; iOS 10.2; Scale/2.00)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (![userAgent canBeConvertedToEncoding:<span class="built_in">NSASCIIStringEncoding</span>]) &#123;</span><br><span class="line">            <span class="built_in">NSMutableString</span> *mutableUserAgent = [userAgent mutableCopy];</span><br><span class="line">            <span class="comment">//转换为拉丁字母</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)(mutableUserAgent), <span class="literal">NULL</span>, (__bridge <span class="built_in">CFStringRef</span>)<span class="string">@"Any-Latin; Latin-ASCII; [:^ASCII:] Remove"</span>, <span class="literal">false</span>)) &#123;</span><br><span class="line">                userAgent = mutableUserAgent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="keyword">self</span> setValue:userAgent forHTTPHeaderField:<span class="string">@"User-Agent"</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HTTP Method Definitions; see http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html</span></span><br><span class="line">    <span class="comment">//需要把parameters转换为query参数的方法集合。</span></span><br><span class="line">    <span class="keyword">self</span>.HTTPMethodsEncodingParametersInURI = [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@"GET"</span>, <span class="string">@"HEAD"</span>, <span class="string">@"DELETE"</span>, <span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.mutableObservedChangedKeyPaths = [<span class="built_in">NSMutableSet</span> set];</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     添加对蜂窝数据、缓存策略、cookie、管道、网络状态、超时这几个属性的观察。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *keyPath <span class="keyword">in</span> AFHTTPRequestSerializerObservedKeyPaths()) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span> respondsToSelector:<span class="built_in">NSSelectorFromString</span>(keyPath)]) &#123;</span><br><span class="line">            [<span class="keyword">self</span> addObserver:<span class="keyword">self</span> forKeyPath:keyPath options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:AFHTTPRequestSerializerObserverContext];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 <code>AFHTTPRequestSerializer</code>的各种setter方法</p><p>首先通过<code>automaticallyNotifiesObserversForKey</code>方法来阻止一些属性的KVO机制的触发，然后我们通过重写蜂窝数据、缓存策略、cookie、管道、网络状态、超时的观察。可以用于测试这些属性变化是否崩溃等。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 如果kvo的触发机制是默认出发。则返回true，否则返回false。在这里，只要是`AFHTTPRequestSerializerObservedKeyPaths`里面的属性，我们都取消自动出发kvo机制，使用手动触发。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param key kvo的key</span></span><br><span class="line"><span class="comment"> @return bool值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)automaticallyNotifiesObserversForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span> ([AFHTTPRequestSerializerObservedKeyPaths() containsObject:key]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> automaticallyNotifiesObserversForKey:key];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath</span><br><span class="line">                      ofObject:(__unused <span class="keyword">id</span>)object</span><br><span class="line">                        change:(<span class="built_in">NSDictionary</span> *)change</span><br><span class="line">                       context:(<span class="keyword">void</span> *)context</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//是否是选择要观察的属性</span></span><br><span class="line">    <span class="keyword">if</span> (context == AFHTTPRequestSerializerObserverContext) &#123;</span><br><span class="line">        <span class="comment">//如果属性值为null，则表示么有这个属性，移除对其的观察</span></span><br><span class="line">        <span class="keyword">if</span> ([change[<span class="built_in">NSKeyValueChangeNewKey</span>] isEqual:[<span class="built_in">NSNull</span> null]]) &#123;</span><br><span class="line">            [<span class="keyword">self</span>.mutableObservedChangedKeyPaths removeObject:keyPath];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//添加到要观察的属性的集合</span></span><br><span class="line">            [<span class="keyword">self</span>.mutableObservedChangedKeyPaths addObject:keyPath];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过重写属性的setter方法来手动触发kvo</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 手动触发蜂窝数据、缓存策略、cookie、管道、网络状态、超时的观察。可以用于测试这些属性变化是否崩溃等。</span></span><br><span class="line">- (<span class="keyword">void</span>)setAllowsCellularAccess:(<span class="built_in">BOOL</span>)allowsCellularAccess &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(allowsCellularAccess))];</span><br><span class="line">    _allowsCellularAccess = allowsCellularAccess;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(allowsCellularAccess))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setCachePolicy:(<span class="built_in">NSURLRequestCachePolicy</span>)cachePolicy &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(cachePolicy))];</span><br><span class="line">    _cachePolicy = cachePolicy;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(cachePolicy))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setHTTPShouldHandleCookies:(<span class="built_in">BOOL</span>)HTTPShouldHandleCookies &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(HTTPShouldHandleCookies))];</span><br><span class="line">    _HTTPShouldHandleCookies = HTTPShouldHandleCookies;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(HTTPShouldHandleCookies))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setHTTPShouldUsePipelining:(<span class="built_in">BOOL</span>)HTTPShouldUsePipelining &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(HTTPShouldUsePipelining))];</span><br><span class="line">    _HTTPShouldUsePipelining = HTTPShouldUsePipelining;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(HTTPShouldUsePipelining))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setNetworkServiceType:(<span class="built_in">NSURLRequestNetworkServiceType</span>)networkServiceType &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(networkServiceType))];</span><br><span class="line">    _networkServiceType = networkServiceType;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(networkServiceType))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setTimeoutInterval:(<span class="built_in">NSTimeInterval</span>)timeoutInterval &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(timeoutInterval))];</span><br><span class="line">    _timeoutInterval = timeoutInterval;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(timeoutInterval))];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 <code>AFHTTPRequestSerializer</code>的各种请求头域处理方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 返回请求头域key和vaue</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return 字典</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSDictionary</span> *)HTTPRequestHeaders &#123;</span><br><span class="line">    <span class="built_in">NSDictionary</span> __block *value;</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(<span class="keyword">self</span>.requestHeaderModificationQueue, ^&#123;</span><br><span class="line">        value = [<span class="built_in">NSDictionary</span> dictionaryWithDictionary:<span class="keyword">self</span>.mutableHTTPRequestHeaders];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置一个请求头域</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param value vaue</span></span><br><span class="line"><span class="comment"> @param field 域名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="built_in">NSString</span> *)value</span><br><span class="line">forHTTPHeaderField:(<span class="built_in">NSString</span> *)field</span><br><span class="line">&#123;</span><br><span class="line">    dispatch_barrier_async(<span class="keyword">self</span>.requestHeaderModificationQueue, ^&#123;</span><br><span class="line">        [<span class="keyword">self</span>.mutableHTTPRequestHeaders setValue:value forKey:field];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 返回指定请求头域的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param field 域名</span></span><br><span class="line"><span class="comment"> @return 值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)valueForHTTPHeaderField:(<span class="built_in">NSString</span> *)field &#123;</span><br><span class="line">    <span class="built_in">NSString</span> __block *value;</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(<span class="keyword">self</span>.requestHeaderModificationQueue, ^&#123;</span><br><span class="line">        value = [<span class="keyword">self</span>.mutableHTTPRequestHeaders valueForKey:field];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置Basic Authorization的用户名和密码。记住需要是base64编码格式的。</span></span><br><span class="line"><span class="comment"> @param username 用户</span></span><br><span class="line"><span class="comment"> @param password 密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setAuthorizationHeaderFieldWithUsername:(<span class="built_in">NSString</span> *)username</span><br><span class="line">                                       password:(<span class="built_in">NSString</span> *)password</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSData</span> *basicAuthCredentials = [[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@:%@"</span>, username, password] dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *base64AuthCredentials = [basicAuthCredentials base64EncodedStringWithOptions:(<span class="built_in">NSDataBase64EncodingOptions</span>)<span class="number">0</span>];</span><br><span class="line">    [<span class="keyword">self</span> setValue:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"Basic %@"</span>, base64AuthCredentials] forHTTPHeaderField:<span class="string">@"Authorization"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 移除Basic Authorization的请求头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)clearAuthorizationHeader &#123;</span><br><span class="line">    dispatch_barrier_async(<span class="keyword">self</span>.requestHeaderModificationQueue, ^&#123;</span><br><span class="line">        [<span class="keyword">self</span>.mutableHTTPRequestHeaders removeObjectForKey:<span class="string">@"Authorization"</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 <code>AFHTTPRequestSerializer</code>的各种创建<code>NSMutableURLRequest</code>的方法</p><p>通过下面这三种方法处理不同类型的request对象的初始化和参数序列化。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据给定的url、方法名、参数构建一个request。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param method 方法名</span></span><br><span class="line"><span class="comment"> @param URLString url地址</span></span><br><span class="line"><span class="comment"> @param parameters 参数，根据不同的请求方法构建出不同的模式</span></span><br><span class="line"><span class="comment"> @param error 构建出错</span></span><br><span class="line"><span class="comment"> @return 返回一个非multipartForm请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSMutableURLRequest</span> *)requestWithMethod:(<span class="built_in">NSString</span> *)method</span><br><span class="line">                                 URLString:(<span class="built_in">NSString</span> *)URLString</span><br><span class="line">                                parameters:(<span class="keyword">id</span>)parameters</span><br><span class="line">                                     error:(<span class="built_in">NSError</span> *__autoreleasing *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(method);</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(URLString);</span><br><span class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:URLString];</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(url);</span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *mutableRequest = [[<span class="built_in">NSMutableURLRequest</span> alloc] initWithURL:url];</span><br><span class="line">    mutableRequest.HTTPMethod = method;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *mutableObservedChangedKeyPaths集合里面的属性都通过`setValue: forKey`手动设置一下。估计目的是触发这几个属性的kvo。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *keyPath <span class="keyword">in</span> AFHTTPRequestSerializerObservedKeyPaths()) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="keyword">self</span>.mutableObservedChangedKeyPaths containsObject:keyPath]) &#123;</span><br><span class="line">            [mutableRequest setValue:[<span class="keyword">self</span> valueForKeyPath:keyPath] forKey:keyPath];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     根据parameters和HTTPRequestHeaders构建一个request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    mutableRequest = [[<span class="keyword">self</span> requestBySerializingRequest:mutableRequest withParameters:parameters error:error] mutableCopy];</span><br><span class="line"><span class="keyword">return</span> mutableRequest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 构建一个multipartForm的request。并且通过`AFMultipartFormData`类型的formData来构建请求体</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param method 方法名，一般都是POST</span></span><br><span class="line"><span class="comment"> @param URLString 请求地址</span></span><br><span class="line"><span class="comment"> @param parameters 请求头参数</span></span><br><span class="line"><span class="comment"> @param block 用于构建请求体的Block</span></span><br><span class="line"><span class="comment"> @param error 构建请求体出错</span></span><br><span class="line"><span class="comment"> @return 返回一个构建好的request</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSMutableURLRequest</span> *)multipartFormRequestWithMethod:(<span class="built_in">NSString</span> *)method</span><br><span class="line">                                              URLString:(<span class="built_in">NSString</span> *)URLString</span><br><span class="line">                                             parameters:(<span class="built_in">NSDictionary</span> *)parameters</span><br><span class="line">                              constructingBodyWithBlock:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> &lt;AFMultipartFormData&gt; formData))block</span><br><span class="line">                                                  error:(<span class="built_in">NSError</span> *__autoreleasing *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(method);</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(![method isEqualToString:<span class="string">@"GET"</span>] &amp;&amp; ![method isEqualToString:<span class="string">@"HEAD"</span>]);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     先构建一个普通的request对象，然后在构建出multipartFrom的request</span></span><br><span class="line"><span class="comment">     * 在这一步将会把parameters加入请求头或者请求体。然后把`AFURLRequestSerialization`指定的headers加入request的请求头中。这个request就只差构建multipartFrom部分了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *mutableRequest = [<span class="keyword">self</span> requestWithMethod:method URLString:URLString parameters:<span class="literal">nil</span> error:error];</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *初始化一个`AFStreamingMultipartFormData`对象。用于封装multipartFrom的body部分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    __block AFStreamingMultipartFormData *formData = [[AFStreamingMultipartFormData alloc] initWithURLRequest:mutableRequest stringEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">if</span> (parameters) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         把parameters拼接成`AFQueryStringPair`对象。然后根据取出的key和value处理。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (AFQueryStringPair *pair <span class="keyword">in</span> AFQueryStringPairsFromDictionary(parameters)) &#123;</span><br><span class="line">            <span class="built_in">NSData</span> *data = <span class="literal">nil</span>;</span><br><span class="line">            <span class="comment">//把value处理为NSData类型</span></span><br><span class="line">            <span class="keyword">if</span> ([pair.value isKindOfClass:[<span class="built_in">NSData</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                data = pair.value;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([pair.value isEqual:[<span class="built_in">NSNull</span> null]]) &#123;</span><br><span class="line">                data = [<span class="built_in">NSData</span> data];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                data = [[pair.value description] dataUsingEncoding:<span class="keyword">self</span>.stringEncoding];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                [formData appendPartWithFormData:data name:[pair.field description]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (block) &#123;</span><br><span class="line">        block(formData);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//body具体序列化操作</span></span><br><span class="line">    <span class="keyword">return</span> [formData requestByFinalizingMultipartFormData];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 通过一个Multipart-Form的request创建一个request。新request的httpBody是`fileURL`指定的文件。</span></span><br><span class="line"><span class="comment"> 并且是通过`HTTPBodyStream`这个属性添加，`HTTPBodyStream`属性的数据会自动添加为httpBody。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param request 原request</span></span><br><span class="line"><span class="comment"> @param fileURL 文件的url</span></span><br><span class="line"><span class="comment"> @param handler 错误处理</span></span><br><span class="line"><span class="comment"> @return 处理完成的request</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSMutableURLRequest</span> *)requestWithMultipartFormRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                             writingStreamContentsToFile:(<span class="built_in">NSURL</span> *)fileURL</span><br><span class="line">                                       completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSError</span> *error))handler</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(request.HTTPBodyStream);</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>([fileURL isFileURL]);</span><br><span class="line">    <span class="comment">//获取`HTTPBodyStream`属性</span></span><br><span class="line">    <span class="built_in">NSInputStream</span> *inputStream = request.HTTPBodyStream;</span><br><span class="line">    <span class="comment">//获取文件的数据流</span></span><br><span class="line">    <span class="built_in">NSOutputStream</span> *outputStream = [[<span class="built_in">NSOutputStream</span> alloc] initWithURL:fileURL append:<span class="literal">NO</span>];</span><br><span class="line">    __block <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        <span class="comment">//把读和写的操作加入当前线程的runloop</span></span><br><span class="line">        [inputStream scheduleInRunLoop:[<span class="built_in">NSRunLoop</span> currentRunLoop] forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line">        [outputStream scheduleInRunLoop:[<span class="built_in">NSRunLoop</span> currentRunLoop] forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line">        <span class="comment">//打开读和写数据流</span></span><br><span class="line">        [inputStream open];</span><br><span class="line">        [outputStream open];</span><br><span class="line">        <span class="comment">//循环做读和写操作</span></span><br><span class="line">        <span class="keyword">while</span> ([inputStream hasBytesAvailable] &amp;&amp; [outputStream hasSpaceAvailable]) &#123;</span><br><span class="line">            uint8_t buffer[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSInteger</span> bytesRead = [inputStream read:buffer maxLength:<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">if</span> (inputStream.streamError || bytesRead &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                error = inputStream.streamError;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSInteger</span> bytesWritten = [outputStream write:buffer maxLength:(<span class="built_in">NSUInteger</span>)bytesRead];</span><br><span class="line">            <span class="keyword">if</span> (outputStream.streamError || bytesWritten &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                error = outputStream.streamError;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bytesRead == <span class="number">0</span> &amp;&amp; bytesWritten == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读和写完成。关闭读和写数据流</span></span><br><span class="line">        [outputStream close];</span><br><span class="line">        [inputStream close];</span><br><span class="line">        <span class="comment">//如果有handler，调用handler这个Block</span></span><br><span class="line">        <span class="keyword">if</span> (handler) &#123;</span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                handler(error);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//获取一个新的request，新的request的httpBody已经通过`HTTPBodyStream`转换成功</span></span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *mutableRequest = [request mutableCopy];</span><br><span class="line">    mutableRequest.HTTPBodyStream = <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">//返回一个request对象</span></span><br><span class="line">    <span class="keyword">return</span> mutableRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-AFStreamingMultipartFormData私有类的解析"><a href="#3-AFStreamingMultipartFormData私有类的解析" class="headerlink" title="3 AFStreamingMultipartFormData私有类的解析"></a>3 <code>AFStreamingMultipartFormData</code>私有类的解析</h2><p>首先，我们看几个全局方法。下面几个方法用于拼接<code>multipart/form-data</code>的分隔符和文件的<code>MIMEType</code>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 生成multipartForm的request的boundary</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * AFCreateMultipartFormBoundary() &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"Boundary+%08X%08X"</span>, arc4random(), arc4random()];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//回车换行符</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kAFMultipartFormCRLF = <span class="string">@"\r\n"</span>;</span><br><span class="line"><span class="comment">//生成一个request的请求体中的参数的开始符号，第一个</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">NSString</span> * AFMultipartFormInitialBoundary(<span class="built_in">NSString</span> *boundary) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"--%@%@"</span>, boundary, kAFMultipartFormCRLF];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成一个request的请求体中的参数的开始符号，菲第一个。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">NSString</span> * AFMultipartFormEncapsulationBoundary(<span class="built_in">NSString</span> *boundary) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@--%@%@"</span>, kAFMultipartFormCRLF, boundary, kAFMultipartFormCRLF];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成一个request的请求体中的参数的结束符号</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">NSString</span> * AFMultipartFormFinalBoundary(<span class="built_in">NSString</span> *boundary) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@--%@--%@"</span>, kAFMultipartFormCRLF, boundary, kAFMultipartFormCRLF];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">根据文件的扩展名获取文件的`MIMEType`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">NSString</span> * AFContentTypeForPathExtension(<span class="built_in">NSString</span> *extension) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *UTI = (__bridge_transfer <span class="built_in">NSString</span> *)UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, (__bridge <span class="built_in">CFStringRef</span>)extension, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">NSString</span> *contentType = (__bridge_transfer <span class="built_in">NSString</span> *)UTTypeCopyPreferredTagWithClass((__bridge <span class="built_in">CFStringRef</span>)UTI, kUTTagClassMIMEType);</span><br><span class="line">    <span class="keyword">if</span> (!contentType) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">@"application/octet-stream"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> contentType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AFStreamingMultipartFormData</code>负责<code>multipart/form-data</code>的Body的具体构建。比如boundary的指定、请求体数据的拼接等。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithURLRequest:(<span class="built_in">NSMutableURLRequest</span> *)urlRequest</span><br><span class="line">                    stringEncoding:(<span class="built_in">NSStringEncoding</span>)encoding</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//需要添加httpbody的request</span></span><br><span class="line">    <span class="keyword">self</span>.request = urlRequest;</span><br><span class="line">    <span class="comment">//字符编码</span></span><br><span class="line">    <span class="keyword">self</span>.stringEncoding = encoding;</span><br><span class="line">    <span class="comment">//指定boundary</span></span><br><span class="line">    <span class="keyword">self</span>.boundary = AFCreateMultipartFormBoundary();</span><br><span class="line">    <span class="comment">//这个属性用于存储httpbody数据</span></span><br><span class="line">    <span class="keyword">self</span>.bodyStream = [[AFMultipartBodyStream alloc] initWithStringEncoding:encoding];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 根据文件的url添加一个`multipart/form-data`请求的请求体域</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)appendPartWithFileURL:(<span class="built_in">NSURL</span> *)fileURL</span><br><span class="line">                         name:(<span class="built_in">NSString</span> *)name</span><br><span class="line">                        error:(<span class="built_in">NSError</span> * __autoreleasing *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(fileURL);</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(name);</span><br><span class="line">    <span class="comment">//文件扩展名</span></span><br><span class="line">    <span class="built_in">NSString</span> *fileName = [fileURL lastPathComponent];</span><br><span class="line">    <span class="comment">//获取文件的mimetype的类型</span></span><br><span class="line">    <span class="built_in">NSString</span> *mimeType = AFContentTypeForPathExtension([fileURL pathExtension]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> appendPartWithFileURL:fileURL name:name fileName:fileName mimeType:mimeType error:error];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据指定类型的fileurl，把数据添加进入bodyStream中。以提供给后面构建request的body。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param fileURL 文件的url</span></span><br><span class="line"><span class="comment"> @param name 参数名称</span></span><br><span class="line"><span class="comment"> @param fileName 文件名称</span></span><br><span class="line"><span class="comment"> @param mimeType 文件类型</span></span><br><span class="line"><span class="comment"> @param error 错误</span></span><br><span class="line"><span class="comment"> @return 是否成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)appendPartWithFileURL:(<span class="built_in">NSURL</span> *)fileURL</span><br><span class="line">                         name:(<span class="built_in">NSString</span> *)name</span><br><span class="line">                     fileName:(<span class="built_in">NSString</span> *)fileName</span><br><span class="line">                     mimeType:(<span class="built_in">NSString</span> *)mimeType</span><br><span class="line">                        error:(<span class="built_in">NSError</span> * __autoreleasing *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(fileURL);</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(name);</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(fileName);</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(mimeType);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     各种错误情况判断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (![fileURL isFileURL]) &#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *userInfo = @&#123;<span class="built_in">NSLocalizedFailureReasonErrorKey</span>: <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"Expected URL to be a file URL"</span>, <span class="string">@"AFNetworking"</span>, <span class="literal">nil</span>)&#125;;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            *error = [[<span class="built_in">NSError</span> alloc] initWithDomain:AFURLRequestSerializationErrorDomain code:<span class="built_in">NSURLErrorBadURL</span> userInfo:userInfo];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([fileURL checkResourceIsReachableAndReturnError:error] == <span class="literal">NO</span>) &#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *userInfo = @&#123;<span class="built_in">NSLocalizedFailureReasonErrorKey</span>: <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"File URL not reachable."</span>, <span class="string">@"AFNetworking"</span>, <span class="literal">nil</span>)&#125;;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            *error = [[<span class="built_in">NSError</span> alloc] initWithDomain:AFURLRequestSerializationErrorDomain code:<span class="built_in">NSURLErrorBadURL</span> userInfo:userInfo];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取指定路径文件的属性</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *fileAttributes = [[<span class="built_in">NSFileManager</span> defaultManager] attributesOfItemAtPath:[fileURL path] error:error];</span><br><span class="line">    <span class="keyword">if</span> (!fileAttributes) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加`Content-Disposition`和`Content-Type`这两个请求体域</span></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *mutableHeaders = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    [mutableHeaders setValue:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"form-data; name=\"%@\"; filename=\"%@\""</span>, name, fileName] forKey:<span class="string">@"Content-Disposition"</span>];</span><br><span class="line">    [mutableHeaders setValue:mimeType forKey:<span class="string">@"Content-Type"</span>];</span><br><span class="line">    <span class="comment">//把一个完整的请求体域封装进一个`AFHTTPBodyPart`对象中。</span></span><br><span class="line">    AFHTTPBodyPart *bodyPart = [[AFHTTPBodyPart alloc] init];</span><br><span class="line">    bodyPart.stringEncoding = <span class="keyword">self</span>.stringEncoding;</span><br><span class="line">    bodyPart.headers = mutableHeaders;</span><br><span class="line">    bodyPart.boundary = <span class="keyword">self</span>.boundary;</span><br><span class="line">    bodyPart.body = fileURL;</span><br><span class="line">    bodyPart.bodyContentLength = [fileAttributes[<span class="built_in">NSFileSize</span>] unsignedLongLongValue];</span><br><span class="line">    [<span class="keyword">self</span>.bodyStream appendHTTPBodyPart:bodyPart];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据指定类型的数据流，把数据添加进入bodyStream中。以提供给后面构建request的body。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param inputStream 输入的数据流</span></span><br><span class="line"><span class="comment"> @param name 参数名称</span></span><br><span class="line"><span class="comment"> @param fileName 文件名称</span></span><br><span class="line"><span class="comment"> @param mimeType 文件类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)appendPartWithInputStream:(<span class="built_in">NSInputStream</span> *)inputStream</span><br><span class="line">                             name:(<span class="built_in">NSString</span> *)name</span><br><span class="line">                         fileName:(<span class="built_in">NSString</span> *)fileName</span><br><span class="line">                           length:(int64_t)length</span><br><span class="line">                         mimeType:(<span class="built_in">NSString</span> *)mimeType</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(name);</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(fileName);</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(mimeType);</span><br><span class="line">    <span class="comment">//添加`Content-Disposition`和`Content-Type`这两个请求体域</span></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *mutableHeaders = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    [mutableHeaders setValue:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"form-data; name=\"%@\"; filename=\"%@\""</span>, name, fileName] forKey:<span class="string">@"Content-Disposition"</span>];</span><br><span class="line">    [mutableHeaders setValue:mimeType forKey:<span class="string">@"Content-Type"</span>];</span><br><span class="line">    <span class="comment">//把一个完整的请求体域封装进一个`AFHTTPBodyPart`对象中</span></span><br><span class="line">    AFHTTPBodyPart *bodyPart = [[AFHTTPBodyPart alloc] init];</span><br><span class="line">    bodyPart.stringEncoding = <span class="keyword">self</span>.stringEncoding;</span><br><span class="line">    bodyPart.headers = mutableHeaders;</span><br><span class="line">    bodyPart.boundary = <span class="keyword">self</span>.boundary;</span><br><span class="line">    bodyPart.body = inputStream;</span><br><span class="line">    bodyPart.bodyContentLength = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)length;</span><br><span class="line">    [<span class="keyword">self</span>.bodyStream appendHTTPBodyPart:bodyPart];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据指定的data添加到请求体域中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param data 数据</span></span><br><span class="line"><span class="comment"> @param name 名称</span></span><br><span class="line"><span class="comment"> @param fileName 文件名称</span></span><br><span class="line"><span class="comment"> @param mimeType mimeType</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)appendPartWithFileData:(<span class="built_in">NSData</span> *)data</span><br><span class="line">                          name:(<span class="built_in">NSString</span> *)name</span><br><span class="line">                      fileName:(<span class="built_in">NSString</span> *)fileName</span><br><span class="line">                      mimeType:(<span class="built_in">NSString</span> *)mimeType</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(name);</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(fileName);</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(mimeType);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *mutableHeaders = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    [mutableHeaders setValue:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"form-data; name=\"%@\"; filename=\"%@\""</span>, name, fileName] forKey:<span class="string">@"Content-Disposition"</span>];</span><br><span class="line">    [mutableHeaders setValue:mimeType forKey:<span class="string">@"Content-Type"</span>];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> appendPartWithHeaders:mutableHeaders body:data];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据指定的key和value拼接到`Content-Disposition`属性中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param data 参数值</span></span><br><span class="line"><span class="comment"> @param name 参数名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)appendPartWithFormData:(<span class="built_in">NSData</span> *)data</span><br><span class="line">                          name:(<span class="built_in">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(name);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *mutableHeaders = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    [mutableHeaders setValue:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"form-data; name=\"%@\""</span>, name] forKey:<span class="string">@"Content-Disposition"</span>];</span><br><span class="line">    <span class="comment">//把处理好的数据加入对应的request的请求体中`Content-Disposition`部分</span></span><br><span class="line">    [<span class="keyword">self</span> appendPartWithHeaders:mutableHeaders body:data];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 给一个multipartForm的`Content-Disposition`添加boundary</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param headers 请求头域</span></span><br><span class="line"><span class="comment"> @param body 值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)appendPartWithHeaders:(<span class="built_in">NSDictionary</span> *)headers</span><br><span class="line">                         body:(<span class="built_in">NSData</span> *)body</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(body);</span><br><span class="line"></span><br><span class="line">    AFHTTPBodyPart *bodyPart = [[AFHTTPBodyPart alloc] init];</span><br><span class="line">    bodyPart.stringEncoding = <span class="keyword">self</span>.stringEncoding;</span><br><span class="line">    bodyPart.headers = headers;</span><br><span class="line">    bodyPart.boundary = <span class="keyword">self</span>.boundary;</span><br><span class="line">    bodyPart.bodyContentLength = [body length];</span><br><span class="line">    bodyPart.body = body;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span>.bodyStream appendHTTPBodyPart:bodyPart];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)throttleBandwidthWithPacketSize:(<span class="built_in">NSUInteger</span>)numberOfBytes</span><br><span class="line">                                  delay:(<span class="built_in">NSTimeInterval</span>)delay</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span>.bodyStream.numberOfBytesInPacket = numberOfBytes;</span><br><span class="line">    <span class="keyword">self</span>.bodyStream.delay = delay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据一个request对应的`AFStreamingMultipartFormData`对象获取封装好的request对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return multipart/form的request对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSMutableURLRequest</span> *)requestByFinalizingMultipartFormData &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.bodyStream isEmpty]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.request;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Reset the initial and final boundaries to ensure correct Content-Length</span></span><br><span class="line">    <span class="comment">//重置boundary，从而确保`Content-Length`正确</span></span><br><span class="line">    [<span class="keyword">self</span>.bodyStream setInitialAndFinalBoundaries];</span><br><span class="line">    <span class="comment">//把拼接好的bodyStream添加进入request中</span></span><br><span class="line">    [<span class="keyword">self</span>.request setHTTPBodyStream:<span class="keyword">self</span>.bodyStream];</span><br><span class="line">    <span class="comment">//给requst的请求头添加Content-Type属性指定为`multipart/form-data`类型的request。同时设置请求体的长度Content-Length。</span></span><br><span class="line">    [<span class="keyword">self</span>.request setValue:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"multipart/form-data; boundary=%@"</span>, <span class="keyword">self</span>.boundary] forHTTPHeaderField:<span class="string">@"Content-Type"</span>];</span><br><span class="line">    [<span class="keyword">self</span>.request setValue:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%llu"</span>, [<span class="keyword">self</span>.bodyStream contentLength]] forHTTPHeaderField:<span class="string">@"Content-Length"</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.request;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-AFJSONRequestSerializer和AFPropertyListRequestSerializer"><a href="#4-AFJSONRequestSerializer和AFPropertyListRequestSerializer" class="headerlink" title="4 AFJSONRequestSerializer和AFPropertyListRequestSerializer"></a>4 <code>AFJSONRequestSerializer</code>和<code>AFPropertyListRequestSerializer</code></h2><p>这两个类继承自<code>AFHTTPRequestSerializer</code>。他们的基本实现都是继承自父类。但是也根据自身不同情况，做了处理。</p><p>对于<code>AFJSONRequestSerializer</code>。需要把<code>Content-Type</code>指定为<code>&quot;application/json</code>。同时HTTPBody<br>需要使用JSON序列化：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSURLRequest</span> *)requestBySerializingRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                               withParameters:(<span class="keyword">id</span>)parameters</span><br><span class="line">                                        error:(<span class="built_in">NSError</span> *__autoreleasing *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(request);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     对于`GET`,`HEAD`,`DELETE`等方法中。直接使用父类的处理方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.HTTPMethodsEncodingParametersInURI containsObject:[[request HTTPMethod] uppercaseString]]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> requestBySerializingRequest:request withParameters:parameters error:error];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *mutableRequest = [request mutableCopy];</span><br><span class="line">    <span class="comment">//把`HTTPRequestHeaders`中的值添加进入请求头中。</span></span><br><span class="line">    [<span class="keyword">self</span>.HTTPRequestHeaders enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span> field, <span class="keyword">id</span> value, <span class="built_in">BOOL</span> * __unused stop) &#123;</span><br><span class="line">        <span class="keyword">if</span> (![request valueForHTTPHeaderField:field]) &#123;</span><br><span class="line">            [mutableRequest setValue:value forHTTPHeaderField:field];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="keyword">if</span> (parameters) &#123;</span><br><span class="line">        <span class="comment">//设置请求头的`Content-Type`类型</span></span><br><span class="line">        <span class="keyword">if</span> (![mutableRequest valueForHTTPHeaderField:<span class="string">@"Content-Type"</span>]) &#123;</span><br><span class="line">            [mutableRequest setValue:<span class="string">@"application/json"</span> forHTTPHeaderField:<span class="string">@"Content-Type"</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (![<span class="built_in">NSJSONSerialization</span> isValidJSONObject:parameters]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                <span class="built_in">NSDictionary</span> *userInfo = @&#123;<span class="built_in">NSLocalizedFailureReasonErrorKey</span>: <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"The `parameters` argument is not valid JSON."</span>, <span class="string">@"AFNetworking"</span>, <span class="literal">nil</span>)&#125;;</span><br><span class="line">                *error = [[<span class="built_in">NSError</span> alloc] initWithDomain:AFURLRequestSerializationErrorDomain code:<span class="built_in">NSURLErrorCannotDecodeContentData</span> userInfo:userInfo];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把parameters转换为JSON序列化的data</span></span><br><span class="line">        <span class="built_in">NSData</span> *jsonData = [<span class="built_in">NSJSONSerialization</span> dataWithJSONObject:parameters options:<span class="keyword">self</span>.writingOptions error:error];</span><br><span class="line">        <span class="keyword">if</span> (!jsonData) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//JSON序列化的数据设置为httpbody</span></span><br><span class="line">        [mutableRequest setHTTPBody:jsonData];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mutableRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>AFPropertyListRequestSerializer</code>也是同样的道理：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSURLRequest</span> *)requestBySerializingRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                               withParameters:(<span class="keyword">id</span>)parameters</span><br><span class="line">                                        error:(<span class="built_in">NSError</span> *__autoreleasing *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(request);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     对于`GET`,`HEAD`,`DELETE`等方法中。直接使用父类的处理方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.HTTPMethodsEncodingParametersInURI containsObject:[[request HTTPMethod] uppercaseString]]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> requestBySerializingRequest:request withParameters:parameters error:error];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *mutableRequest = [request mutableCopy];</span><br><span class="line">    <span class="comment">//把`HTTPRequestHeaders`中的值添加进入请求头中。</span></span><br><span class="line">    [<span class="keyword">self</span>.HTTPRequestHeaders enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span> field, <span class="keyword">id</span> value, <span class="built_in">BOOL</span> * __unused stop) &#123;</span><br><span class="line">        <span class="keyword">if</span> (![request valueForHTTPHeaderField:field]) &#123;</span><br><span class="line">            [mutableRequest setValue:value forHTTPHeaderField:field];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="keyword">if</span> (parameters) &#123;</span><br><span class="line">        <span class="comment">//设置请求头的`Content-Type`类型</span></span><br><span class="line">        <span class="keyword">if</span> (![mutableRequest valueForHTTPHeaderField:<span class="string">@"Content-Type"</span>]) &#123;</span><br><span class="line">            [mutableRequest setValue:<span class="string">@"application/x-plist"</span> forHTTPHeaderField:<span class="string">@"Content-Type"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把parameters转换为Plist序列化的data</span></span><br><span class="line">        <span class="built_in">NSData</span> *plistData = [<span class="built_in">NSPropertyListSerialization</span> dataWithPropertyList:parameters format:<span class="keyword">self</span>.format options:<span class="keyword">self</span>.writeOptions error:error];</span><br><span class="line">        <span class="keyword">if</span> (!plistData) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Plist序列化的数据设置为httpbody</span></span><br><span class="line">        [mutableRequest setHTTPBody:plistData];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mutableRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><p>这个类主要实现了对于不同情况的请求的request对象的封装。尤其是对于<code>multipart/form-data</code>类型的request的封装，简化了我们自己封装过程的痛苦。如果我们要使用<code>multipart/form-data</code>类型的请求。强烈推荐使用<code>AFHTTPSessionManager</code>对象的<code>AFHTTPRequestSerialization</code>来处理参数的序列化过程。下面就是使用<code>AFHTTPRequestSerailization</code>序列化和自己拼装的不同：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)updatePic:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="comment">//请求头参数</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *dic = @&#123;</span><br><span class="line">                          <span class="string">@"businessType"</span>:<span class="string">@"CC_USER_CENTER"</span>,</span><br><span class="line">                          <span class="string">@"fileType"</span>:<span class="string">@"image"</span>,</span><br><span class="line">                          <span class="string">@"file"</span>:<span class="string">@"img.jpeg"</span></span><br><span class="line">                          &#125;;</span><br><span class="line">    <span class="comment">//请求体图片数据</span></span><br><span class="line">    <span class="built_in">NSData</span> *imageData = <span class="built_in">UIImagePNGRepresentation</span>([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"1.png"</span>]);</span><br><span class="line">    <span class="comment">//创建request</span></span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *request = [[<span class="built_in">NSMutableURLRequest</span> alloc]initWithURL:[<span class="built_in">NSURL</span> URLWithString:url]];</span><br><span class="line">    <span class="comment">//post方法</span></span><br><span class="line">    [request setHTTPMethod:<span class="string">@"POST"</span>];</span><br><span class="line">    AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc]initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line">    <span class="built_in">NSURLSessionDataTask</span> *task = [manager POST:url parameters:dic constructingBodyWithBlock:^(<span class="keyword">id</span>&lt;AFMultipartFormData&gt;  _Nonnull formData) &#123;</span><br><span class="line">        <span class="comment">//请求体里面的参数</span></span><br><span class="line">        <span class="built_in">NSDictionary</span> *bodyDic = @&#123;</span><br><span class="line">                                  <span class="string">@"Content-Disposition"</span>:<span class="string">@"form-data;name=\"file\";filename=\"img.jpeg\""</span>,</span><br><span class="line">                                  <span class="string">@"Content-Type"</span>:<span class="string">@"image/png"</span>,</span><br><span class="line">                                  &#125;;</span><br><span class="line">        [formData appendPartWithHeaders:bodyDic body:imageData];</span><br><span class="line">    &#125; progress:^(<span class="built_in">NSProgress</span> * _Nonnull uploadProgress) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"下载进度"</span>);</span><br><span class="line">    &#125; success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"下载成功:%@"</span>,responseObject);</span><br><span class="line">    &#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"下载失败%@"</span>,error);</span><br><span class="line">    &#125;];</span><br><span class="line">    [task resume];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">IBAction</span>)multipartformPost3:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="comment">//参数</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *dic = @&#123;</span><br><span class="line">                          <span class="string">@"businessType"</span>:<span class="string">@"CC_USER_CENTER"</span>,</span><br><span class="line">                          <span class="string">@"fileType"</span>:<span class="string">@"image"</span>,</span><br><span class="line">                          <span class="string">@"file"</span>:<span class="string">@"img.jpeg"</span></span><br><span class="line">                          &#125;;</span><br><span class="line">    <span class="built_in">NSString</span> *boundaryString = <span class="string">@"xxxxx"</span>;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *str = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    [dic enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span>  _Nonnull key, <span class="keyword">id</span>  _Nonnull obj, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        [str appendFormat:<span class="string">@"--%@\r\n"</span>,boundaryString];</span><br><span class="line">        [str appendFormat:<span class="string">@"%@name=\"%@\"\r\n\r\n"</span>,<span class="string">@"Content-Disposition: form-data;"</span>,key];</span><br><span class="line">        [str appendFormat:<span class="string">@"%@\r\n"</span>,obj];</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableData</span> *requestMutableData=[<span class="built_in">NSMutableData</span> data];</span><br><span class="line">    </span><br><span class="line">    [str appendFormat:<span class="string">@"--%@\r\n"</span>,boundaryString];</span><br><span class="line">    [str appendFormat:<span class="string">@"%@:%@"</span>,<span class="string">@"Content-Disposition"</span>,<span class="string">@"form-data;"</span>];</span><br><span class="line">    [str appendFormat:<span class="string">@"%@=\"%@\";"</span>,<span class="string">@"name"</span>,<span class="string">@"file"</span>];</span><br><span class="line">    [str appendFormat:<span class="string">@"%@=\"%@\"\r\n"</span>,<span class="string">@"filename"</span>,<span class="string">@"img1.jpeg"</span>];</span><br><span class="line">    [str appendFormat:<span class="string">@"%@:%@\r\n\r\n"</span>,<span class="string">@"Content-Type"</span>,<span class="string">@"image/png"</span>];</span><br><span class="line">    <span class="comment">//转换成为二进制数据</span></span><br><span class="line">    [requestMutableData appendData:[str dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]];</span><br><span class="line">    <span class="built_in">NSData</span> *imageData = <span class="built_in">UIImagePNGRepresentation</span>([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"1.png"</span>]);</span><br><span class="line">    <span class="comment">//文件数据部分</span></span><br><span class="line">    [requestMutableData appendData:imageData];</span><br><span class="line">    <span class="comment">//添加结尾boundary</span></span><br><span class="line">    [requestMutableData appendData:[[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"\r\n--%@--\r\n"</span>,boundaryString] dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *request = [[<span class="built_in">NSMutableURLRequest</span> alloc]initWithURL:[<span class="built_in">NSURL</span> URLWithString:url]];</span><br><span class="line">    <span class="comment">//post方法</span></span><br><span class="line">    [request setHTTPMethod:<span class="string">@"POST"</span>];</span><br><span class="line">    <span class="comment">// 设置请求头格式为Content-Type:multipart/form-data; boundary=xxxxx</span></span><br><span class="line">    [request setValue:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"multipart/form-data; boundary=%@"</span>,boundaryString] forHTTPHeaderField:<span class="string">@"Content-Type"</span>];</span><br><span class="line">    request.HTTPBody = requestMutableData;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line">    <span class="built_in">NSURLSessionDataTask</span> *task = [session dataTaskWithRequest:request completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *result = [[<span class="built_in">NSString</span> alloc]initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,result);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    [task resume];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后<a href="https://huang303513.github.io/2017/04/25/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BAFURLRequestSerialization.html" target="_blank" rel="noopener">原文地址</a>,<a href="https://github.com/huang303513/iOSSourceCodeStudy">demo地址</a>。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AFNetWorking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AFNetWorking源码之AFHTTPSessionManager</title>
      <link href="/2017/04/20/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BAFHTTPSessionManager/"/>
      <url>/2017/04/20/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BAFHTTPSessionManager/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p><code>AFHTTPSessionManager</code>是<code>AFURLSessionManager</code>的子类。我们可以通过这个类做HTTP请求。其实整个<code>AFHTTPSessionManager</code>逻辑很简单，只是用HTTP的方式拼接了请求，并且调用父类的方式做处理。我会通过<code>AFHTTPSessionManager</code>api来讲一下POST上传数据的几种基本格式,然后我再随便分析一下<code>AFHTTPSessionManager</code>。</p><h2 id="2-POST请求的常用格式"><a href="#2-POST请求的常用格式" class="headerlink" title="2 POST请求的常用格式"></a>2 POST请求的常用格式</h2><p>HTTP/1.1协议规定的HTTP请求方法有OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、CONNECT 这几种。其中POST一般用来向服务端提交数据，接下来要讨论POST提交数据的几种方式。协议规定POST提交的数据必须放在消息主体中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p><p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如php、python等，以及它们的framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的Content-Type字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到POST提交数据方案，包含了Content-Type和消息主体编码方式两部分。</p><h4 id="2-1-application-x-www-form-urlencoded格式的POST请求"><a href="#2-1-application-x-www-form-urlencoded格式的POST请求" class="headerlink" title="2.1 application/x-www-form-urlencoded格式的POST请求"></a>2.1 application/x-www-form-urlencoded格式的POST请求</h4><p>这应该是最常见的 POST 提交数据的方式了。浏览器的原生表单，如果不设置enctype属性，那么最终就会以application/x-www-form-urlencoded方式提交数据。Content-Type被指定为application/x-www-form-urlencoded，提交的数据按照 key1=val1&amp;key2=val2的方式进行编码，key和val都进行了URL转码。</p><p>下面这个请求是简书进入一篇文章页面的时候，会自动往服务器POST一个请求，估计是统计文章被阅读的次数等功能。具体看下面：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送的请求，删除了cookie相关的部分</span></span><br><span class="line">POST /notes/e15592ce40ae/mark_viewed.json HTTP/<span class="number">1.1</span></span><br><span class="line">Host: www.jianshu.com</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10.11</span>; rv:<span class="number">52.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">52.0</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">X-CSRF-Token: vJvptva4Tqou/V3dd3nFCrcvRsb78FReHuIYZke5PVAnfR/tIAAMCfuaB2Z2/gaEohIZAsiEksUYyPqzg3DpSA==</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span></span><br><span class="line"><span class="comment">X-Requested-With: XMLHttpRequest</span></span><br><span class="line"><span class="comment">Referer: http://www.jianshu.com/p/e15592ce40ae</span></span><br><span class="line"><span class="comment">Content-Length: 98</span></span><br><span class="line"><span class="comment">Connection: keep-alive</span></span><br><span class="line"><span class="comment">Cache-Control: max-age=0</span></span><br><span class="line"><span class="comment">//请求体</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">uuid=4e3abc0f-1824-4a5d-982f-7d9dee92d9cd&amp;referrer=http%3A%2F%2Fwww.jianshu.com%2Fu%2Fad726ba6935d</span></span><br></pre></td></tr></table></figure><p>用<code>AFHTTPSessionManager</code>实现上面这个<code>application/x-www-form-urlencoded</code>请求。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc]initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line"><span class="built_in">NSDictionary</span> *params = @&#123;</span><br><span class="line">                         <span class="string">@"uuid"</span>:<span class="string">@"4e3abc0f-1824-4a5d-982f-7d9dee92d9cd"</span>,</span><br><span class="line">                         <span class="string">@"referrer"</span>:<span class="string">@"http://www.jianshu.com/p/e15592ce40ae"</span></span><br><span class="line">                         &#125;;</span><br><span class="line"><span class="built_in">NSURLSessionDataTask</span> *task = [manager POST:<span class="string">@"http://www.jianshu.com//notes/e15592ce40ae/mark_viewed.json"</span> parameters:params progress:^(<span class="built_in">NSProgress</span> * _Nonnull uploadProgress) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"进度更新"</span>);</span><br><span class="line">&#125; success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"返回数据：%@"</span>,responseObject);</span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"返回错误：%@"</span>,error);</span><br><span class="line">&#125;];</span><br><span class="line">[task resume];</span><br></pre></td></tr></table></figure><h4 id="2-2-multipart-form-data格式的POST请求"><a href="#2-2-multipart-form-data格式的POST请求" class="headerlink" title="2.2 multipart/form-data格式的POST请求"></a>2.2 multipart/form-data格式的POST请求</h4><p>Multipart/form-data的基础方法是POST , 也就是说是由POST方法来组合实现的.<br>Multipart/form-data与POST方法的不同之处在于请求头和请求体.<br>Multipart/form-data的请求头必须包含一个特殊的头信息 : Content-Type , 且其值也必须规定为multipart/form-data , 同时还需要规定一个内容分割符用于分割请求体中的多个POST的内容 , 如文件内容和文本内容自然需要分割开来 , 不然接收方就无法正常解析和还原这个文件了.<br>Multipart/form-data的请求体也是一个字符串 , 不过和post的请求体不同的是它的构造方式 , post是简单的name=value值连接 , 而Multipart/form-data则是添加了分隔符等内容的构造体.</p><p>请求的头部信息如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中xxxxx是我自定义的分隔符，每个人都可以选择自己的分隔符</span></span><br><span class="line">Content-Type: multipart/form-data; boundary=xxxxx</span><br></pre></td></tr></table></figure><p>下面我们来看一下一个我的Multipart/form-data请求体:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">POST /uploadFile HTTP/<span class="number">1.1</span></span><br><span class="line">Host: 这里是url,就不暴露了^_^</span><br><span class="line">Content-Type: multipart/form-data; boundary=xxxxx</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">User-Agent: AFNetWorking3.X%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/1 CFNetwork/808.2.16 Darwin/15.6.0</span></span><br><span class="line"><span class="comment">Content-Length: 32175</span></span><br><span class="line"><span class="comment">Accept-Language: en-us</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--xxxxx</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data;name="file"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">img.jpeg</span></span><br><span class="line"><span class="comment">--xxxxx</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data;name="businessType"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CC_USER_CENTER</span></span><br><span class="line"><span class="comment">--xxxxx</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data;name="fileType"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">image</span></span><br><span class="line"><span class="comment">--xxxxx</span></span><br><span class="line"><span class="comment">Content-Disposition:form-data;name="file";filename="img1.jpeg"</span></span><br><span class="line"><span class="comment">Content-Type:image/png</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这里是图片数据,太长了.我就删了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--xxxxx--</span></span><br></pre></td></tr></table></figure><p>这个请求有三个参数<code>file</code>,<code>businessType</code>,<code>fileType</code>。比如<code>file</code>参数和他的值就通过如下格式传输：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--xxxxx</span><br><span class="line">Content-Disposition: form-data;name=<span class="string">"file"</span></span><br><span class="line"></span><br><span class="line">img.jpeg</span><br></pre></td></tr></table></figure><p>上面这种就是一个参数与之对应的值。协议规定的就是这个格式，没有为什么。我们可以看看图片数据部分：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--xxxxx</span><br><span class="line">Content-Disposition:form-data;name=<span class="string">"file"</span>;filename=<span class="string">"img1.jpeg"</span></span><br><span class="line">Content-Type:image/png</span><br><span class="line"></span><br><span class="line">这里是图片数据,太长了.我就删了</span><br><span class="line"></span><br><span class="line">--xxxxx--</span><br></pre></td></tr></table></figure><p>其中name=”参数名” filename=”文件名” 其中参数名这个要和接收方那边相对应 正常开发中可以去问服务器那边 , 文件名是说在服务器端保存成文件的名字 , 这个参数然并卵 , 因为一般服务端会按照他们自己的要求去处理文件的存储.</p><p>下一行是指定类型 , 我这里示例中写的是PNG图片类型 , 这个可以根据你的实际需求的写。如果我们要上传多分图片或者文件，则只需要按照指定格式就可以了，比如下面就是上传两张图片的请求：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">POST /uploadFile HTTP/<span class="number">1.1</span></span><br><span class="line">Host: 这里是url,就不暴露了^_^</span><br><span class="line">Content-Type: multipart/form-data; boundary=xxxxx</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">User-Agent: AFNetWorking3.X%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/1 CFNetwork/808.2.16 Darwin/15.6.0</span></span><br><span class="line"><span class="comment">Content-Length: 32175</span></span><br><span class="line"><span class="comment">Accept-Language: en-us</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--xxxxx</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data;name="file"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">img.jpeg</span></span><br><span class="line"><span class="comment">--xxxxx</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data;name="businessType"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CC_USER_CENTER</span></span><br><span class="line"><span class="comment">--xxxxx</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data;name="fileType"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">image</span></span><br><span class="line"><span class="comment">--xxxxx</span></span><br><span class="line"><span class="comment">Content-Disposition:form-data;name="file";filename="img1.jpeg"</span></span><br><span class="line"><span class="comment">Content-Type:image/png</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这里是图片1数据,太长了.我就删了</span></span><br><span class="line"><span class="comment">--xxxxx</span></span><br><span class="line"><span class="comment">Content-Disposition:form-data;name="file";filename="img2.jpeg"</span></span><br><span class="line"><span class="comment">Content-Type:image/png</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这里是图片1数据,太长了.我就删了</span></span><br><span class="line"><span class="comment">--xxxxx--</span></span><br></pre></td></tr></table></figure><p>下面是我Demo中一个<code>multipart/form-data</code>请求的实现代码,分别用<code>NSRULDataTask</code>和<code>AFHTTPSessionManager</code>实现,我们可以发现用第二种方法简便了很多，因为AFN已经帮我们做好了拼接工作：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)updatePic:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="comment">//请求头参数</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *dic = @&#123;</span><br><span class="line">                          <span class="string">@"businessType"</span>:<span class="string">@"CC_USER_CENTER"</span>,</span><br><span class="line">                          <span class="string">@"fileType"</span>:<span class="string">@"image"</span>,</span><br><span class="line">                          <span class="string">@"file"</span>:<span class="string">@"img.jpeg"</span></span><br><span class="line">                          &#125;;</span><br><span class="line">    <span class="comment">//请求体图片数据</span></span><br><span class="line">    <span class="built_in">NSData</span> *imageData = <span class="built_in">UIImagePNGRepresentation</span>([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"1.png"</span>]);</span><br><span class="line">    <span class="comment">//创建request</span></span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *request = [[<span class="built_in">NSMutableURLRequest</span> alloc]initWithURL:[<span class="built_in">NSURL</span> URLWithString:url]];</span><br><span class="line">    <span class="comment">//post方法</span></span><br><span class="line">    [request setHTTPMethod:<span class="string">@"POST"</span>];</span><br><span class="line">    <span class="comment">// 设置请求头格式为Content-Type:multipart/form-data; boundary=xxxxx</span></span><br><span class="line">    <span class="comment">//[request setValue:@"multipart/form-data; boundary=xxxxx" forHTTPHeaderField:@"Content-Type"];</span></span><br><span class="line">    AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc]initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line">    <span class="built_in">NSURLSessionDataTask</span> *task = [manager POST:url parameters:dic constructingBodyWithBlock:^(<span class="keyword">id</span>&lt;AFMultipartFormData&gt;  _Nonnull formData) &#123;</span><br><span class="line">        <span class="comment">//请求体里面的参数</span></span><br><span class="line">        <span class="built_in">NSDictionary</span> *bodyDic = @&#123;</span><br><span class="line">                                  <span class="string">@"Content-Disposition"</span>:<span class="string">@"form-data;name=\"file\";filename=\"img.jpeg\""</span>,</span><br><span class="line">                                  <span class="string">@"Content-Type"</span>:<span class="string">@"image/png"</span>,</span><br><span class="line">                                  &#125;;</span><br><span class="line">        [formData appendPartWithHeaders:bodyDic body:imageData];</span><br><span class="line">    &#125; progress:^(<span class="built_in">NSProgress</span> * _Nonnull uploadProgress) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"下载进度"</span>);</span><br><span class="line">    &#125; success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"下载成功:%@"</span>,responseObject);</span><br><span class="line">    &#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"下载失败%@"</span>,error);</span><br><span class="line">    &#125;];</span><br><span class="line">    [task resume];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)multipartformPost2:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="comment">//参数</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *dic = @&#123;</span><br><span class="line">                          <span class="string">@"businessType"</span>:<span class="string">@"CC_USER_CENTER"</span>,</span><br><span class="line">                          <span class="string">@"fileType"</span>:<span class="string">@"image"</span>,</span><br><span class="line">                          <span class="string">@"file"</span>:<span class="string">@"img.jpeg"</span></span><br><span class="line">                          &#125;;</span><br><span class="line">    <span class="built_in">NSString</span> *boundaryString = <span class="string">@"xxxxx"</span>;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *str = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    [dic enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span>  _Nonnull key, <span class="keyword">id</span>  _Nonnull obj, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        [str appendFormat:<span class="string">@"--%@\r\n"</span>,boundaryString];</span><br><span class="line">        [str appendFormat:<span class="string">@"%@name=\"%@\"\r\n\r\n"</span>,<span class="string">@"Content-Disposition: form-data;"</span>,key];</span><br><span class="line">        [str appendFormat:<span class="string">@"%@\r\n"</span>,obj];</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">     <span class="built_in">NSMutableData</span> *requestMutableData=[<span class="built_in">NSMutableData</span> data];</span><br><span class="line"></span><br><span class="line">    [str appendFormat:<span class="string">@"--%@\r\n"</span>,boundaryString];</span><br><span class="line">    [str appendFormat:<span class="string">@"%@:%@"</span>,<span class="string">@"Content-Disposition"</span>,<span class="string">@"form-data;"</span>];</span><br><span class="line">    [str appendFormat:<span class="string">@"%@=\"%@\";"</span>,<span class="string">@"name"</span>,<span class="string">@"file"</span>];</span><br><span class="line">    [str appendFormat:<span class="string">@"%@=\"%@\"\r\n"</span>,<span class="string">@"filename"</span>,<span class="string">@"img1.jpeg"</span>];</span><br><span class="line">    [str appendFormat:<span class="string">@"%@:%@\r\n\r\n"</span>,<span class="string">@"Content-Type"</span>,<span class="string">@"image/png"</span>];</span><br><span class="line">    <span class="comment">//转换成为二进制数据</span></span><br><span class="line">    [requestMutableData appendData:[str dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]];</span><br><span class="line">    <span class="built_in">NSData</span> *imageData = <span class="built_in">UIImagePNGRepresentation</span>([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"1.png"</span>]);</span><br><span class="line">    <span class="comment">//文件数据部分</span></span><br><span class="line">    [requestMutableData appendData:imageData];</span><br><span class="line">    <span class="comment">//添加结尾boundary</span></span><br><span class="line">    [requestMutableData appendData:[[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"\r\n--%@--\r\n"</span>,boundaryString] dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]];</span><br><span class="line">    <span class="comment">//创建一个请求对象</span></span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *request = [[<span class="built_in">NSMutableURLRequest</span> alloc]initWithURL:[<span class="built_in">NSURL</span> URLWithString:url]];</span><br><span class="line">    <span class="comment">//post方法</span></span><br><span class="line">    [request setHTTPMethod:<span class="string">@"POST"</span>];</span><br><span class="line">    <span class="comment">// 设置请求头格式为Content-Type:multipart/form-data; boundary=xxxxx</span></span><br><span class="line">    [request setValue:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"multipart/form-data; boundary=%@"</span>,boundaryString] forHTTPHeaderField:<span class="string">@"Content-Type"</span>];</span><br><span class="line">    <span class="comment">//session</span></span><br><span class="line">    <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line">    <span class="built_in">NSURLSessionDataTask</span> *task = [session uploadTaskWithRequest:request fromData:requestMutableData completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *result = [[<span class="built_in">NSString</span> alloc]initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,result);</span><br><span class="line">    &#125;];</span><br><span class="line">    [task resume];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Multipart/form-data</code>格式的POST请求总结：</p><ul><li>文件类型参数中<code>name=&quot;参数名&quot;</code>一定要和服务端对应, 开发的时候 , 可以问服务端人员，我这里是<code>file</code>。</li><li>上传文件的数据部分使用二进制数据<code>(NSData)</code>拼接。</li><li>上边界部分和下边界部分的字符串 , 最后都要转换成二进制数据(NSData) , 和文件部分的二进制数据拼接在一起 , 作为请求体发送给服务器。</li><li>每一行末尾需要有一定的`\r\n·。</li></ul><h4 id="2-3-application-json格式的POST请求"><a href="#2-3-application-json格式的POST请求" class="headerlink" title="2.3 application/json格式的POST请求"></a>2.3 application/json格式的POST请求</h4><p>接下来我将常使用<code>NSURLSessionDataTask</code>做一个<code>application/json</code>的POST请求。并且请求体数据我存储在一个<code>test.txt</code>文件中，从文件中读取出来然后上传。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.txt文件内容</span></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"huang"</span>,<span class="string">"phone"</span>:<span class="string">"124"</span>&#125;</span><br></pre></td></tr></table></figure><p>通过抓包软件我的请求如下，和其他POST请求原理一样，只是拼接请求体的方式不一样，并且更具不同格式的请求体，设置不同的<code>Content-Type</code>：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /posts HTTP/<span class="number">1.1</span></span><br><span class="line">Host: jsonplaceholder.typicode.com</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Accept: application/json</span><br><span class="line">User-Agent: AFNetWorking3.X%E6%BA%<span class="number">90</span>%E7%A0%<span class="number">81</span>%E9%<span class="number">98</span>%<span class="number">85</span>%E8%AF%BB/<span class="number">1</span> <span class="built_in">CFNetwork</span>/<span class="number">808.2</span><span class="number">.16</span> Darwin/<span class="number">15.6</span><span class="number">.0</span></span><br><span class="line">Content-Length: <span class="number">31</span></span><br><span class="line">Accept-Language: en-us</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"huang"</span>,<span class="string">"phone"</span>:<span class="string">"124"</span>&#125;</span><br></pre></td></tr></table></figure><p>下面是我Demo的具体实现</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)applicationjsonPOST2:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> * request = [<span class="built_in">NSMutableURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://jsonplaceholder.typicode.com/posts"</span>]];</span><br><span class="line">    <span class="comment">//指请求体的类型。由于我们test.txt里面的文件是json格式的字符串。所以我这里指定为`application/json`</span></span><br><span class="line">    [request addValue:<span class="string">@"application/json"</span> forHTTPHeaderField:<span class="string">@"Content-Type"</span>];</span><br><span class="line">    [request addValue:<span class="string">@"application/json"</span> forHTTPHeaderField:<span class="string">@"Accept"</span>];</span><br><span class="line">    [request setHTTPMethod:<span class="string">@"POST"</span>];</span><br><span class="line">    [request setCachePolicy:<span class="built_in">NSURLRequestReloadIgnoringCacheData</span>];</span><br><span class="line">    [request setTimeoutInterval:<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"test"</span> ofType:<span class="string">@"txt"</span>];</span><br><span class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:[path stringByAddingPercentEscapesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]];</span><br><span class="line">    <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line">    <span class="comment">//使用Block来处理返回数据</span></span><br><span class="line">    <span class="built_in">NSURLSessionDataTask</span> *task = [session uploadTaskWithRequest:request fromFile:url completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *result = [[<span class="built_in">NSString</span> alloc]initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,result);</span><br><span class="line">    &#125;];</span><br><span class="line">    [task resume];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AFHTTPSessionManager分析"><a href="#AFHTTPSessionManager分析" class="headerlink" title="AFHTTPSessionManager分析"></a>AFHTTPSessionManager分析</h2><p>上面主要讲了对POST请求的分析，主要是<code>AFHTTPSessionManager</code>并没有多少逻辑,他主要是调用<code>AFURLSessionManager</code>的实现。另外就是通过<code>baseURL</code>改变了url的拼接过程。下面我就抽出他们的不同点分析一下：</p><p>1 首先多了一个属性</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) AFHTTPRequestSerializer &lt;AFURLRequestSerialization&gt; * requestSerializer;</span><br></pre></td></tr></table></figure><p>这个属性的主要作用就是帮我们拼接请求头和请求体，从上面的Demo我们发现很多请求的拼接工作都通过<code>requestSerializer</code>处理了。如果我们不手动设置，默认是一个<code>AFHTTPRequestSerializer</code>对象。具体可以去初始化方法里面看到。</p><p>2 重写了<code>securityPolicy</code>这个属性的<code>setter</code>方法,增加对于<code>SSLPinningMode</code>的异常处理。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setSecurityPolicy:(AFSecurityPolicy *)securityPolicy &#123;</span><br><span class="line">    <span class="comment">//增加对于SSLPinningMode的异常处理。</span></span><br><span class="line">    <span class="keyword">if</span> (securityPolicy.SSLPinningMode != AFSSLPinningModeNone &amp;&amp; ![<span class="keyword">self</span>.baseURL.scheme isEqualToString:<span class="string">@"https"</span>]) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *pinningMode = <span class="string">@"Unknown Pinning Mode"</span>;</span><br><span class="line">        <span class="keyword">switch</span> (securityPolicy.SSLPinningMode) &#123;</span><br><span class="line">            <span class="keyword">case</span> AFSSLPinningModeNone:        pinningMode = <span class="string">@"AFSSLPinningModeNone"</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> AFSSLPinningModeCertificate: pinningMode = <span class="string">@"AFSSLPinningModeCertificate"</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> AFSSLPinningModePublicKey:   pinningMode = <span class="string">@"AFSSLPinningModePublicKey"</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSString</span> *reason = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"A security policy configured with `%@` can only be applied on a manager with a secure base URL (i.e. https)"</span>, pinningMode];</span><br><span class="line">        <span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName:<span class="string">@"Invalid Security Policy"</span> reason:reason userInfo:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用`AFURLSessionManager`的`securityPolicy`属性的setter方法。</span></span><br><span class="line">    [<span class="keyword">super</span> setSecurityPolicy:securityPolicy];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 NSCopying和NSSecureCoding协议的实现过程</p><p><code>NSCopying</code>和<code>NSSecureCoding</code>协议的实现过程添加了对<code>requestSerializer</code>,<code>responseSerializer</code>,<code>securityPolicy</code>这三个属性的复制。也就是说，用copy方法复制的manager，这三个属性的配置跟着一起复制。而父类<code>AFURSSessionManager</code>只实现了对<code>configuration</code>的复制。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)supportsSecureCoding &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)decoder &#123;</span><br><span class="line">    <span class="built_in">NSURL</span> *baseURL = [decoder decodeObjectOfClass:[<span class="built_in">NSURL</span> <span class="keyword">class</span>] forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(baseURL))];</span><br><span class="line">    <span class="comment">//获取当前manager的NSURLSessionConfiguration</span></span><br><span class="line">    <span class="built_in">NSURLSessionConfiguration</span> *configuration = [decoder decodeObjectOfClass:[<span class="built_in">NSURLSessionConfiguration</span> <span class="keyword">class</span>] forKey:<span class="string">@"sessionConfiguration"</span>];</span><br><span class="line">    <span class="keyword">if</span> (!configuration) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *configurationIdentifier = [decoder decodeObjectOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>] forKey:<span class="string">@"identifier"</span>];</span><br><span class="line">        <span class="keyword">if</span> (configurationIdentifier) &#123;</span><br><span class="line">        <span class="comment">//iOS7和iOS8初始化NSURLSessionConfiguration方法不一样。所以要分开处理</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) &amp;&amp; __IPHONE_OS_VERSION_MIN_REQUIRED &gt;= 80000) || (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) &amp;&amp; __MAC_OS_X_VERSION_MIN_REQUIRED &gt;= 1100)</span></span><br><span class="line">            configuration = [<span class="built_in">NSURLSessionConfiguration</span> backgroundSessionConfigurationWithIdentifier:configurationIdentifier];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            configuration = [<span class="built_in">NSURLSessionConfiguration</span> backgroundSessionConfiguration:configurationIdentifier];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化一个新的manager</span></span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">self</span> initWithBaseURL:baseURL sessionConfiguration:configuration];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加了对`requestSerializer`,`responseSerializer`,`securityPolicy`这三个属性的接档。</span></span><br><span class="line">    <span class="keyword">self</span>.requestSerializer = [decoder decodeObjectOfClass:[AFHTTPRequestSerializer <span class="keyword">class</span>] forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(requestSerializer))];</span><br><span class="line">    <span class="keyword">self</span>.responseSerializer = [decoder decodeObjectOfClass:[AFHTTPResponseSerializer <span class="keyword">class</span>] forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(responseSerializer))];</span><br><span class="line">    AFSecurityPolicy *decodedPolicy = [decoder decodeObjectOfClass:[AFSecurityPolicy <span class="keyword">class</span>] forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(securityPolicy))];</span><br><span class="line">    <span class="keyword">if</span> (decodedPolicy) &#123;</span><br><span class="line">        <span class="keyword">self</span>.securityPolicy = decodedPolicy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)coder &#123;</span><br><span class="line">    [<span class="keyword">super</span> encodeWithCoder:coder];</span><br><span class="line">    <span class="comment">//添加对baseURL属性的归档</span></span><br><span class="line">    [coder encodeObject:<span class="keyword">self</span>.baseURL forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(baseURL))];</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.session.configuration conformsToProtocol:<span class="class"><span class="keyword">@protocol</span>(<span class="title">NSCoding</span>)]) </span>&#123;</span><br><span class="line">        [coder encodeObject:<span class="keyword">self</span>.session.configuration forKey:<span class="string">@"sessionConfiguration"</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [coder encodeObject:<span class="keyword">self</span>.session.configuration.identifier forKey:<span class="string">@"identifier"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加了对`requestSerializer`,`responseSerializer`,`securityPolicy`这三个属性的归档。</span></span><br><span class="line">    [coder encodeObject:<span class="keyword">self</span>.requestSerializer forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(requestSerializer))];</span><br><span class="line">    [coder encodeObject:<span class="keyword">self</span>.responseSerializer forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(responseSerializer))];</span><br><span class="line">    [coder encodeObject:<span class="keyword">self</span>.securityPolicy forKey:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(securityPolicy))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - NSCopying</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone &#123;</span><br><span class="line">    AFHTTPSessionManager *HTTPClient = [[[<span class="keyword">self</span> <span class="keyword">class</span>] allocWithZone:zone] initWithBaseURL:<span class="keyword">self</span>.baseURL sessionConfiguration:<span class="keyword">self</span>.session.configuration];</span><br><span class="line">    <span class="comment">//添加了对`requestSerializer`,`responseSerializer`,`securityPolicy`这三个属性的复制。</span></span><br><span class="line">    HTTPClient.requestSerializer = [<span class="keyword">self</span>.requestSerializer copyWithZone:zone];</span><br><span class="line">    HTTPClient.responseSerializer = [<span class="keyword">self</span>.responseSerializer copyWithZone:zone];</span><br><span class="line">    HTTPClient.securityPolicy = [<span class="keyword">self</span>.securityPolicy copyWithZone:zone];</span><br><span class="line">    <span class="keyword">return</span> HTTPClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 HEAD和PUT等方法的实现</p><p>我在这里不准备深入讲这两个方法是如何实现的，因为<code>AFHTTPSessionManager</code>主要通过他的<code>requestSerializer</code>属性来实现对<code>HEAD</code>和<code>PUT</code>等请求的拼接。我准备分析<code>AFHTTPRequestSerializer</code>的时候再看这一块是如何实现的。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//通过requestSerializer属性来拼接request对象。</span></span><br><span class="line"><span class="built_in">NSMutableURLRequest</span> *request = [<span class="keyword">self</span>.requestSerializer requestWithMethod:method URLString:[[<span class="built_in">NSURL</span> URLWithString:URLString relativeToURL:<span class="keyword">self</span>.baseURL] absoluteString] parameters:parameters error:&amp;serializationError];</span><br></pre></td></tr></table></figure><p>最后<a href="https://huang303513.github.io/2017/04/20/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BAFHTTPSessionManager.html" target="_blank" rel="noopener">原文地址</a>,<a href="https://github.com/huang303513/iOSSourceCodeStudy">demo地址</a>。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AFNetWorking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AFNetWorking源码之AFURLSessionManager</title>
      <link href="/2017/04/18/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BAFURLSessionManager/"/>
      <url>/2017/04/18/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BAFURLSessionManager/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><p><code>AFNetWorking</code>基本上是所有iOS项目的标配。现在升级带最新版的3.X了。得益于苹果从<code>NSURLConnection</code>升级到<code>NSURLSession</code>,AFN也实现了api的简化，同时功能却一点没少。我们来看一下AFN3.X的目录结构：</p><ul><li>AFNetWorking 这个文件是一个头文件。啥也没做，就是引入了其他文件方便使用。</li><li>AFURLSessionManager 这个文件是核心类，基本上通过它来实现了大部分核心功能。负责请求的建立、管理、销毁、安全、请求重定向、请求重启等各种功能。他主要实现了<code>NSURLSession</code>和<code>NSRULSessionTask</code>的封装。</li><li>AFHTTPSessionManager 这个文件是<code>AFURLSessionManager</code>的子类。主要实现了对HTTP请求的优化。</li><li>AFURLRequestSerialization 这个主要用于请求头的编码解码、序列化、优化处理、简化请求拼接过程等。</li><li>AFURLResponseSerialization 这个主要用于网络返回数据的序列化、编码解码、序列化、数据处理等。</li><li>AFSecurityPolicy 这个主要用于请求的认证功能。比如https的认证模式等。</li><li>AFNetworkReachabilityManager 这个主要用于监听网络请求状态变化功能。</li></ul><p>首先说明，看AFN源码之前一定要搞清楚<code>NSURLSession</code>系列的api，这样能让你事半功倍，具体可以看<a href="https://huang303513.github.io/2017/04/14/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BNSURLSession%E7%B3%BB%E5%88%97%E6%A6%82%E8%BF%B0.html" target="_blank" rel="noopener">AFNetWorking源码之NSRULSession系列概述</a>。在这篇文章里，我们主要讲解<code>AFURLSessionManager</code>的实现原理和封装过程。首先我们通过一个简单的网络请求看一下他的基本用法(大部分都是非必须的，这里为了掩饰写出来)：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)clickButton:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="comment">//通过默认配置初始化Session</span></span><br><span class="line">    <span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line">    AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];</span><br><span class="line">    <span class="comment">//设置网络请求序列化对象</span></span><br><span class="line">    AFHTTPRequestSerializer *requestSerializer = [AFHTTPRequestSerializer serializer];</span><br><span class="line">    [requestSerializer setValue:<span class="string">@"test"</span> forHTTPHeaderField:<span class="string">@"requestHeader"</span>];</span><br><span class="line">    requestSerializer.timeoutInterval = <span class="number">60</span>;</span><br><span class="line">    requestSerializer.stringEncoding = <span class="built_in">NSUTF8StringEncoding</span>;</span><br><span class="line">    <span class="comment">//设置返回数据序列化对象</span></span><br><span class="line">    AFHTTPResponseSerializer *responseSerializer = [AFHTTPResponseSerializer serializer];</span><br><span class="line">    manager.responseSerializer = responseSerializer;</span><br><span class="line">    <span class="comment">//网络请求安全策略</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        AFSecurityPolicy *securityPolicy;</span><br><span class="line">        securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModePublicKey];</span><br><span class="line">        securityPolicy.allowInvalidCertificates = <span class="literal">false</span>;</span><br><span class="line">        securityPolicy.validatesDomainName = <span class="literal">YES</span>;</span><br><span class="line">        manager.securityPolicy = securityPolicy;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        manager.securityPolicy.allowInvalidCertificates = <span class="literal">true</span>;</span><br><span class="line">        manager.securityPolicy.validatesDomainName = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是否允许请求重定向</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        [manager setTaskWillPerformHTTPRedirectionBlock:^<span class="built_in">NSURLRequest</span> *(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionTask</span> *task, <span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSURLRequest</span> *request) &#123;</span><br><span class="line">            <span class="keyword">if</span> (response) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> request;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//监听网络状态</span></span><br><span class="line">    [manager.reachabilityManager setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,(<span class="keyword">long</span>)status);</span><br><span class="line">    &#125;];</span><br><span class="line">    [manager.reachabilityManager startMonitoring];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSURL</span> *URL = [<span class="built_in">NSURL</span> URLWithString:bigPic];</span><br><span class="line">    <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:URL];</span><br><span class="line">    <span class="built_in">NSURLSessionDownloadTask</span> *downloadTask = [manager downloadTaskWithRequest:request progress:^(<span class="built_in">NSProgress</span> *downloadProgress)&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"下载进度:%lld"</span>,downloadProgress.completedUnitCount);</span><br><span class="line">    &#125; destination:^<span class="built_in">NSURL</span> *(<span class="built_in">NSURL</span> *targetPath, <span class="built_in">NSURLResponse</span> *response) &#123;</span><br><span class="line">        <span class="built_in">NSURL</span> *documentsDirectoryURL = [[<span class="built_in">NSFileManager</span> defaultManager] URLForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomain:<span class="built_in">NSUserDomainMask</span> appropriateForURL:<span class="literal">nil</span> create:<span class="literal">NO</span> error:<span class="literal">nil</span>];</span><br><span class="line">        <span class="built_in">NSURL</span> *fileURL = [documentsDirectoryURL URLByAppendingPathComponent:[response suggestedFilename]];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"fileURL:%@"</span>,[fileURL absoluteString]);</span><br><span class="line">        <span class="keyword">return</span> fileURL;</span><br><span class="line">    &#125; completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSURL</span> *filePath, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">        <span class="keyword">self</span>.imageView.image = [<span class="built_in">UIImage</span> imageWithData:[<span class="built_in">NSData</span> dataWithContentsOfURL:filePath]];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"File downloaded to: %@"</span>, filePath);</span><br><span class="line">    &#125;];</span><br><span class="line">    [downloadTask resume];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个请求，我们发现<code>AFURLSessionManager</code>要负责以下几块功能。</p><ul><li>初始化和管理<code>NSURLSession</code>,通过它来建立和管理各种Task。</li><li>初始化和管理<code>NSRULSessionTask</code>,通过不同task来发送不同请求。</li><li>管理各种认证功能、安全功能、请求重定向、数据处理。</li><li>管理和组织每个task的各种状态管理和通知管理。不同task的回调处理。</li><li>帮我们管理和处理了<code>NSRULSession</code>系列api的各种代理方法。简化了我们的处理。</li></ul><h2 id="2-AFURLSessionManager的声明分析"><a href="#2-AFURLSessionManager的声明分析" class="headerlink" title="2 AFURLSessionManager的声明分析"></a>2 AFURLSessionManager的声明分析</h2><p> <code>AFURLSessionManager</code>根据一个指定的<code>NSURLSessionConfiguration</code>创建和管理一个<code>NSURLSession</code>对象。并且这个对象实现了<code>&lt;NSURLSessionTaskDelegate&gt;</code>, <code>&lt;NSURLSessionDataDelegate&gt;</code>, <code>&lt;NSURLSessionDownloadDelegate&gt;</code>, 和 <code>&lt;NSURLSessionDelegate&gt;</code>这几个协议的协议方法。同时实现<code>NSSecureCoding</code>和<code>NSCopying</code>来实现归档解档和copy功能。</p><h4 id="2-1-AFURLSessionManager的初始化api"><a href="#2-1-AFURLSessionManager的初始化api" class="headerlink" title="2.1 AFURLSessionManager的初始化api"></a>2.1 <code>AFURLSessionManager</code>的初始化api</h4><p>这些api主要用于初始化、安全策略、网络状态监听等:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface AFURLSessionManager : <span class="built_in">NSObject</span> &lt;<span class="built_in">NSURLSessionDelegate</span>, <span class="built_in">NSURLSessionTaskDelegate</span>, <span class="built_in">NSURLSessionDataDelegate</span>, <span class="built_in">NSURLSessionDownloadDelegate</span>, <span class="built_in">NSSecureCoding</span>, <span class="built_in">NSCopying</span>&gt;</span><br><span class="line"><span class="comment">//指定的初始化方法、通过他来初始化一个Manager对象。</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithSessionConfiguration:(<span class="keyword">nullable</span> <span class="built_in">NSURLSessionConfiguration</span> *)configuration </span><br><span class="line"><span class="comment">//AFURLSessionManager通过session来管理和创建网络请求。一个manager就实现了对这个session的管理，他们是一一对应的关系。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLSession</span> *session;</span><br><span class="line"><span class="comment">//处理网络请求回调的操作队列,就是我们初始化session的时候传入的那个OperationQueue参数。如果不传入，默认是MainOperationQueue。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSOperationQueue</span> *operationQueue;</span><br><span class="line"><span class="comment">//对返回数据的处理都通过这个属性来处理，比如数据的提取、转换等。默认是一个`AFJSONResponseSerializer`对象用JSON的方式解析。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> &lt;AFURLResponseSerialization&gt; responseSerializer;</span><br><span class="line"><span class="comment">//用于指定session的安全策略。用于处理信任主机和证书认证等。默认是`defaultPolicy`。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) AFSecurityPolicy *securityPolicy;</span><br><span class="line"><span class="comment">//观测网络状态的变化，具体可以看我的Demo用法。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readwrite</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) AFNetworkReachabilityManager *reachabilityManager;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h4 id="2-2-AFURLSessionManager获取Task的api"><a href="#2-2-AFURLSessionManager获取Task的api" class="headerlink" title="2.2 AFURLSessionManager获取Task的api"></a>2.2 <code>AFURLSessionManager</code>获取Task的api</h4><p> 这部分api主要是任务的创建、任务的分类、任务完成队列处理、特殊情况的任务重新创建等：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前session创建的所有Task，这个是下面三种task的总和。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> &lt;<span class="built_in">NSURLSessionTask</span> *&gt; *tasks;</span><br><span class="line"><span class="comment">//当前session创建的DataTask</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> &lt;<span class="built_in">NSURLSessionDataTask</span> *&gt; *dataTasks;</span><br><span class="line"><span class="comment">//当前session创建的uploadTask</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> &lt;<span class="built_in">NSURLSessionUploadTask</span> *&gt; *uploadTasks;</span><br><span class="line"><span class="comment">//当前session创建的downloadTask</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> &lt;<span class="built_in">NSURLSessionDownloadTask</span> *&gt; *downloadTasks;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于处理任务回调的GCD对象，默认是dispatch_main_queue。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">dispatch_queue_t</span> completionQueue;</span><br><span class="line"><span class="comment">//用于处理任务回调的GCD的group对象，如果不初始化、则一个默认的Group被使用。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) dispatch_group_t completionGroup;</span><br><span class="line"><span class="comment">//在iOS7的环境下，我们通过background模式的session创建的uploadTask有时会是nil，如果这个属性是yes，AFN会尝试再次创建uploadTask。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> attemptsToRecreateUploadTasksForBackgroundSessions;</span><br><span class="line"><span class="comment">//废除manager对应的Session。通过传入的参数来决定是否立即取消已经用session发出去的任务。</span></span><br><span class="line">- (<span class="keyword">void</span>)invalidateSessionCancelingTasks:(<span class="built_in">BOOL</span>)cancelPendingTasks;</span><br></pre></td></tr></table></figure><h4 id="2-3-AFURLSessionManager为管理Task创建Block"><a href="#2-3-AFURLSessionManager为管理Task创建Block" class="headerlink" title="2.3 AFURLSessionManager为管理Task创建Block"></a>2.3 <code>AFURLSessionManager</code>为管理Task创建Block</h4><p><code>AFURLSessionManager</code>提供了很多创建Task的api。并且提供了很多处理Task的Block。应该说着几个api就是AFN为我们提供的最大价值，他把所有delegate方法细节都处理好。直接提供给我们一些最实用的api，我们就不用去管理session系列繁琐的delegate方法了。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个NSURLSessionDataTask</span></span><br><span class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)dataTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                            completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> _Nullable responseObject,  <span class="built_in">NSError</span> * _Nullable error))completionHandler;</span><br><span class="line"><span class="comment">//创建一个NSURLSessionDataTask,并且能获取上传或者下载进度</span></span><br><span class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)dataTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                               uploadProgress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *uploadProgress))uploadProgressBlock</span><br><span class="line">                             downloadProgress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *downloadProgress))downloadProgressBlock</span><br><span class="line">                            completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> _Nullable responseObject,  <span class="built_in">NSError</span> * _Nullable error))completionHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个上传Task，并且指定上传文件的路径。</span></span><br><span class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                                         fromFile:(<span class="built_in">NSURL</span> *)fileURL</span><br><span class="line">                                         progress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *uploadProgress))uploadProgressBlock</span><br><span class="line">                                completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> _Nullable responseObject, <span class="built_in">NSError</span>  * _Nullable error))completionHandler;</span><br><span class="line"><span class="comment">////创建一个上传Task，并且指定上传的数据。</span></span><br><span class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                                         fromData:(<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)bodyData</span><br><span class="line">                                         progress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *uploadProgress))uploadProgressBlock</span><br><span class="line">                                completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> _Nullable responseObject, <span class="built_in">NSError</span> * _Nullable error))completionHandler;</span><br><span class="line"><span class="comment">//创建一个uploadTask，然后上传数据</span></span><br><span class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithStreamedRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                                                 progress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *uploadProgress))uploadProgressBlock</span><br><span class="line">                                        completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> _Nullable responseObject, <span class="built_in">NSError</span> * _Nullable error))completionHandler;</span><br><span class="line"><span class="comment">//新建一个download任务，destination表示的下载文件的缓存路径</span></span><br><span class="line">- (<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                                             progress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *downloadProgress))downloadProgressBlock</span><br><span class="line">                                          destination:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> * (^)(<span class="built_in">NSURL</span> *targetPath, <span class="built_in">NSURLResponse</span> *response))destination</span><br><span class="line">                                    completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSURL</span> * _Nullable filePath, <span class="built_in">NSError</span> * _Nullable error))completionHandler;</span><br><span class="line"><span class="comment">//继续恢复一个download任务。resumeData参数表示的是恢复下载的时候初始化数据，比如前面已经下载好的部分数据。</span></span><br><span class="line">- (<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTaskWithResumeData:(<span class="built_in">NSData</span> *)resumeData</span><br><span class="line">                                                progress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *downloadProgress))downloadProgressBlock</span><br><span class="line">                                             destination:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> * (^)(<span class="built_in">NSURL</span> *targetPath, <span class="built_in">NSURLResponse</span> *response))destination</span><br><span class="line">                                       completionHandler:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSURL</span> * _Nullable filePath, <span class="built_in">NSError</span> * _Nullable error))completionHandler;</span><br><span class="line"><span class="comment">//获取指定Task的上传进度</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSProgress</span> *)uploadProgressForTask:(<span class="built_in">NSURLSessionTask</span> *)task;</span><br><span class="line"><span class="comment">//获取指定Task的下载进度</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSProgress</span> *)downloadProgressForTask:(<span class="built_in">NSURLSessionTask</span> *)task;</span><br></pre></td></tr></table></figure><p>注意：上面所有Task的progress都不在主线程、所以要在progress中做UI更新，都必须手动在主线程操作。</p><h4 id="2-4-AFURLSessionManager设置各种情况的代理回调"><a href="#2-4-AFURLSessionManager设置各种情况的代理回调" class="headerlink" title="2.4 AFURLSessionManager设置各种情况的代理回调"></a>2.4 <code>AFURLSessionManager</code>设置各种情况的代理回调</h4><p>这些回调Block主要是用于处理网络请求过程或者结束以后的数据处理、认证、通知、缓存等。我们可以通过设置这些Block来获取或者检测各种状态。相当于就是钩子函数。通过下面的这些Block，我们基本可以获取请求过程中的所有状态以及需要做的各种处理。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置Session出错或者无效的手的回调Block。这个Block主要在`NSURLSessionDelegate`代理的`URLSession:didBecomeInvalidWithError:`方法中执行。</span></span><br><span class="line">- (<span class="keyword">void</span>)setSessionDidBecomeInvalidBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSError</span> *error))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当网络请需要的认证信息比如用户名密码已经发送了的时候，就可以通过这个Block来处理。这个Block是在`NSURLSessionDelegate`代理里面的`URLSession:didReceiveChallenge:completionHandler:`方法中被执行。注意这个是针对Session</span></span><br><span class="line">- (<span class="keyword">void</span>)setSessionDidReceiveAuthenticationChallengeBlock:(<span class="keyword">nullable</span> <span class="built_in">NSURLSessionAuthChallengeDisposition</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLAuthenticationChallenge</span> *challenge, <span class="built_in">NSURLCredential</span> * _Nullable __autoreleasing * _Nullable credential))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////当网络请需要的认证信息比如用户名密码已经发送了的时候，就可以通过这个Block来处理。这个Block是在`NSURLSessionTaskDelegate`代理里面的`URLSession:task:didReceiveChallenge:completionHandler:`方法中被执行。注意这个是针对Task。</span></span><br><span class="line">- (<span class="keyword">void</span>)setTaskDidReceiveAuthenticationChallengeBlock:(<span class="keyword">nullable</span> <span class="built_in">NSURLSessionAuthChallengeDisposition</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionTask</span> *task, <span class="built_in">NSURLAuthenticationChallenge</span> *challenge, <span class="built_in">NSURLCredential</span> * _Nullable __autoreleasing * _Nullable credential))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当请求需要一个新的bodystream的时候，就可以通过这个Block来设置。这个Block在`NSURLSessionTaskDelegate` 代理协议的`URLSession:task:needNewBodyStream:`方法里面设置。</span></span><br><span class="line">- (<span class="keyword">void</span>)setTaskNeedNewBodyStreamBlock:(<span class="keyword">nullable</span> <span class="built_in">NSInputStream</span> * (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionTask</span> *task))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当一个网络请求需要重定向的时候。就会调用这个Block。这个Block是在`NSURLSessionTaskDelegate`协议的`URLSession:willPerformHTTPRedirection:newRequest:completionHandler:`方法中调用的。</span></span><br><span class="line">- (<span class="keyword">void</span>)setTaskWillPerformHTTPRedirectionBlock:(<span class="keyword">nullable</span> <span class="built_in">NSURLRequest</span> * (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionTask</span> *task, <span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSURLRequest</span> *request))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以通过设置这个Block来获取上传进度。这个Block主要在`NSURLSessionTaskDelegate`协议的 `URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:`方法中调用.</span></span><br><span class="line">- (<span class="keyword">void</span>)setTaskDidSendBodyDataBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionTask</span> *task, int64_t bytesSent, int64_t totalBytesSent, int64_t totalBytesExpectedToSend))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置一个Task完成以后执行的Block，这个Block在`NSURLSessionTaskDelegate`协议的 `URLSession:task:didCompleteWithError:`方法中执行。</span></span><br><span class="line">- (<span class="keyword">void</span>)setTaskDidCompleteBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionTask</span> *task, <span class="built_in">NSError</span> * _Nullable error))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当接收到网络请求返回以后，可以调用这个Block。这个Block是在`NSURLSessionDataDelegate`协议的 `URLSession:dataTask:didReceiveResponse:completionHandler:`</span></span><br><span class="line">- (<span class="keyword">void</span>)setDataTaskDidReceiveResponseBlock:(<span class="keyword">nullable</span> <span class="built_in">NSURLSessionResponseDisposition</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDataTask</span> *dataTask, <span class="built_in">NSURLResponse</span> *response))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果一个dataTask转换为downLoadTask以后，就可以设置这个Block来调用。在`NSURLSessionDataDelegate` 协议的`URLSession:dataTask:didBecomeDownloadTask:`方法中调用。</span></span><br><span class="line">- (<span class="keyword">void</span>)setDataTaskDidBecomeDownloadTaskBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDataTask</span> *dataTask, <span class="built_in">NSURLSessionDownloadTask</span> *downloadTask))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当dataTask接收到数据以后，可以设置调用这个Block。具体在`NSURLSessionDataDelegate`协议的`URLSession:dataTask:didReceiveData:`方法。</span></span><br><span class="line">- (<span class="keyword">void</span>)setDataTaskDidReceiveDataBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDataTask</span> *dataTask, <span class="built_in">NSData</span> *data))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置一个Block来决定是否处理或者换成网络请求缓存。具体在`NSURLSessionDataDelegate`协议的`URLSession:dataTask:willCacheResponse:completionHandler:`方法中。</span></span><br><span class="line">- (<span class="keyword">void</span>)setDataTaskWillCacheResponseBlock:(<span class="keyword">nullable</span> <span class="built_in">NSCachedURLResponse</span> * (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDataTask</span> *dataTask, <span class="built_in">NSCachedURLResponse</span> *proposedResponse))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当session所有的任务都发送出去以后，就可以通过这个Block来获取。具体在`NSURLSessionDataDelegate`协议的 `URLSessionDidFinishEventsForBackgroundURLSession:`方法中。</span></span><br><span class="line">- (<span class="keyword">void</span>)setDidFinishEventsForBackgroundURLSessionBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当一个downloadTask执行完毕以后，可以通过这个Block来获取下载信息，我们可以通过这个Block获取下载文件的位置。具体在`NSURLSessionDownloadDelegate`协议的`URLSession:downloadTask:didFinishDownloadingToURL:`方法中被调用。</span></span><br><span class="line">- (<span class="keyword">void</span>)setDownloadTaskDidFinishDownloadingBlock:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> * _Nullable  (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDownloadTask</span> *downloadTask, <span class="built_in">NSURL</span> *location))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以通过这个Block获取一个downloadTask的下载进度。这个Block会在下载过程中多次被调用。具体是在`NSURLSessionDownloadDelegate`协议中的`URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesWritten:totalBytesExpectedToWrite:`方法中被调用。</span></span><br><span class="line">- (<span class="keyword">void</span>)setDownloadTaskDidWriteDataBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDownloadTask</span> *downloadTask, int64_t bytesWritten, int64_t totalBytesWritten, int64_t totalBytesExpectedToWrite))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当一个downloadTask重新开始以后，我们可以通过这个Block获取fileOffSet等信息获取已经下载的部分以及总共有多少要下载。具体是在`NSURLSessionDownloadDelegate`协议的`URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:`方法中被调用。</span></span><br><span class="line">- (<span class="keyword">void</span>)setDownloadTaskDidResumeBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDownloadTask</span> *downloadTask, int64_t fileOffset, int64_t expectedTotalBytes))block&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了上面的部分，<code>AFURLSessionManager</code>的头文件还提供了很多<code>notification</code>的声明。通过这些通知，我们可以获取Task是否开始、是否完成、是否挂起、是否无效等各种通知。具体可以去文件里看。</p><h2 id="3-AFURLSessionManager的实现分析"><a href="#3-AFURLSessionManager的实现分析" class="headerlink" title="3 AFURLSessionManager的实现分析"></a>3 AFURLSessionManager的实现分析</h2><p><code>AFURLSessionManager.m</code>文件里面除了有<code>AFURLSessionManager.h</code>定义的各种接口的实现意外，还有处理不同iOS版本下<code>NSRULSession</code>不同的部分，以及多个全局<code>dispatch_queue_t</code>的定义、以及处理<code>NSURLSeesionTash</code>的各种代理方法的实现和处理。具体划分如下：</p><ul><li><code>NSURLSessionManager</code>的实现。主要实现了接口文件定义的各种api的实现，比如Task的创建、Task的获取、Task的各种代理方法的实现、NSCoping和NSCoding协议、以及各种Block的实现。<ul><li>基本属性的初始化。比如<code>sessionConfiguration</code>、<code>operationQueue</code>、<code>session</code>、<code>mutableTaskDelegatesKeyedByTaskIdentifier</code>等属性。以及用于实现task和<code>AFURLSessionManagerTaskDelegate</code>的绑定的<code>taskDescriptionForSessionTasks</code>、还有关键操作的锁属性lock。</li><li>接口文件的各种Block对应的属性，一个Block对应一个属性。</li><li>处理Task暂停与重启操作的方法。</li><li>给Task设置<code>AFURLSessionManagerTaskDelegate</code>代理的方法。</li><li>初始化Task的各种方法。</li><li>设置B接口文件定义的各种Block。</li><li><code>NSURLSession</code>系列代理方法。</li></ul></li><li><code>_AFURLSessionTaskSwizzling</code>私有类。主要实现了iOS7和iOS8系统上<code>NSURLSession</code>差别的处理。让不同系统版本<code>NSURLSession</code>版本基本一致。</li><li><code>AFURLSessionManagerTaskDelegate</code>这个类主要是把<code>NSURLSeesion</code>的部分代理方法让他处理。从而达到简化代码的目的。<ul><li>处理Task的上传或者下载进度。</li><li>处理封装<code>NSURLSeesion</code>返回的数据。</li><li>Task完成等的通知封装。</li></ul></li><li>全局<code>dispatch_queue_t</code>和<code>dispatch_group_t</code>的定义。各种通知名称的初始化，各种Block的类型定义。</li></ul><h4 id="3-1-AFURLSessionManager一个网络请求实现过程"><a href="#3-1-AFURLSessionManager一个网络请求实现过程" class="headerlink" title="3.1 AFURLSessionManager一个网络请求实现过程"></a>3.1 AFURLSessionManager一个网络请求实现过程</h4><p>我们通过一个网络请求过程来分析<code>AFURLSessionManager.m</code>的实现。我们通过<code>initWithSessionConfiguration</code>方法初始化一个manager。在这个方法里会初始化各种属性、以及为session属性设置代理：</p><p>接口文件中的代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br></pre></td></tr></table></figure><p>实现文件中对应的处理如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 初始化方法</span></span><br><span class="line"><span class="comment"> @return 返回一个manager对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithSessionConfiguration:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 默认初始化方法、通过这个方法来做manager的具体化初始化动作</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param configuration NSURLSession的配置</span></span><br><span class="line"><span class="comment"> @return 返回一个manager对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithSessionConfiguration:(<span class="built_in">NSURLSessionConfiguration</span> *)configuration &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果用户没有手动指定，则使用默认的configuration来初始化</span></span><br><span class="line">    <span class="keyword">if</span> (!configuration) &#123;</span><br><span class="line">        configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//赋值给属性</span></span><br><span class="line">    <span class="keyword">self</span>.sessionConfiguration = configuration;</span><br><span class="line">    <span class="comment">//初始化NSURLSession的task代理方法执行的队列。</span></span><br><span class="line">    <span class="comment">//这里有一个很关键的点是task的代理执行的queque一次性只能执行一个task。这样就避免了task的代理方法执行的混乱。</span></span><br><span class="line">    <span class="keyword">self</span>.operationQueue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</span><br><span class="line">    <span class="keyword">self</span>.operationQueue.maxConcurrentOperationCount = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//出丝滑NSURLSession对象，最核心的对象。</span></span><br><span class="line">    <span class="keyword">self</span>.session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:<span class="keyword">self</span>.sessionConfiguration delegate:<span class="keyword">self</span> delegateQueue:<span class="keyword">self</span>.operationQueue];</span><br><span class="line">    <span class="comment">//如果用户没有手动指定，则返回的数据是JSON格式序列化。</span></span><br><span class="line">    <span class="keyword">self</span>.responseSerializer = [AFJSONResponseSerializer serializer];</span><br><span class="line">    <span class="comment">//指定https处理的安全策略。</span></span><br><span class="line">    <span class="keyword">self</span>.securityPolicy = [AFSecurityPolicy defaultPolicy];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !TARGET_OS_WATCH</span></span><br><span class="line">    <span class="comment">//初始化网络状态监听属性</span></span><br><span class="line">    <span class="keyword">self</span>.reachabilityManager = [AFNetworkReachabilityManager sharedManager];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">//用于记录Task与他的`AFURLSessionManagerTaskDelegate`代理对象的一一对应关系。通过这个</span></span><br><span class="line">    <span class="keyword">self</span>.mutableTaskDelegatesKeyedByTaskIdentifier = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</span><br><span class="line">    <span class="comment">//初始化一个锁对象,关键操作加锁。</span></span><br><span class="line">    <span class="keyword">self</span>.lock = [[<span class="built_in">NSLock</span> alloc] init];</span><br><span class="line">    <span class="keyword">self</span>.lock.name = AFURLSessionManagerLockName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     获取当前session正在执行的所有Task。同时为每一个Task添加`AFURLSessionManagerTaskDelegate`代理对象，这个代理对象主要用于管理uplaodTak和downloadTask的进度管理。并且在Task执行完毕以后调用相应的Block。同时发送相应的notification对象，实现对task数据或者状态改变的检测。</span></span><br><span class="line"><span class="comment">     @param dataTasks dataTask列表</span></span><br><span class="line"><span class="comment">     @param uploadTasks uplaodTask列表</span></span><br><span class="line"><span class="comment">     @param downloadTasks downloadTask列表</span></span><br><span class="line"><span class="comment">     @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    [<span class="keyword">self</span>.session getTasksWithCompletionHandler:^(<span class="built_in">NSArray</span> *dataTasks, <span class="built_in">NSArray</span> *uploadTasks, <span class="built_in">NSArray</span> *downloadTasks) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSURLSessionDataTask</span> *task <span class="keyword">in</span> dataTasks) &#123;</span><br><span class="line">            [<span class="keyword">self</span> addDelegateForDataTask:task uploadProgress:<span class="literal">nil</span> downloadProgress:<span class="literal">nil</span> completionHandler:<span class="literal">nil</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSURLSessionUploadTask</span> *uploadTask <span class="keyword">in</span> uploadTasks) &#123;</span><br><span class="line">            [<span class="keyword">self</span> addDelegateForUploadTask:uploadTask progress:<span class="literal">nil</span> completionHandler:<span class="literal">nil</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSURLSessionDownloadTask</span> *downloadTask <span class="keyword">in</span> downloadTasks) &#123;</span><br><span class="line">            [<span class="keyword">self</span> addDelegateForDownloadTask:downloadTask progress:<span class="literal">nil</span> destination:<span class="literal">nil</span> completionHandler:<span class="literal">nil</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求执行，接口文件如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURLSessionDownloadTask</span> *downloadTask = [manager downloadTaskWithRequest:request progress:^(<span class="built_in">NSProgress</span> *downloadProgress)&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"下载进度:%lld"</span>,downloadProgress.completedUnitCount);</span><br><span class="line">&#125; destination:^<span class="built_in">NSURL</span> *(<span class="built_in">NSURL</span> *targetPath, <span class="built_in">NSURLResponse</span> *response) &#123;</span><br><span class="line">    <span class="built_in">NSURL</span> *documentsDirectoryURL = [[<span class="built_in">NSFileManager</span> defaultManager] URLForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomain:<span class="built_in">NSUserDomainMask</span> appropriateForURL:<span class="literal">nil</span> create:<span class="literal">NO</span> error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSURL</span> *fileURL = [documentsDirectoryURL URLByAppendingPathComponent:[response suggestedFilename]];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"fileURL:%@"</span>,[fileURL absoluteString]);</span><br><span class="line">    <span class="keyword">return</span> fileURL;</span><br><span class="line">&#125; completionHandler:^(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSURL</span> *filePath, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">    <span class="keyword">self</span>.imageView.image = [<span class="built_in">UIImage</span> imageWithData:[<span class="built_in">NSData</span> dataWithContentsOfURL:filePath]];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"File downloaded to: %@"</span>, filePath);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>实现文件则调用了很多方法：</p><p>1 首先是初始化一个<code>NSURLSessionDownLoadTask</code>对象</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过session创建一个downloadTask，</span></span><br><span class="line">__block <span class="built_in">NSURLSessionDownloadTask</span> *downloadTask = <span class="literal">nil</span>;</span><br><span class="line"><span class="comment">//url_session_manager_create_task_safely作用是修复在iOS8下面的系统bug。</span></span><br><span class="line">url_session_manager_create_task_safely(^&#123;</span><br><span class="line">    downloadTask = [<span class="keyword">self</span>.session downloadTaskWithRequest:request];</span><br><span class="line">&#125;);</span><br><span class="line">[<span class="keyword">self</span> addDelegateForDownloadTask:downloadTask progress:downloadProgressBlock destination:destination completionHandler:completionHandler];</span><br><span class="line"><span class="keyword">return</span> downloadTask;</span><br></pre></td></tr></table></figure><p>2 通过<code>[self addDelegateForDownloadTask:downloadTask progress:downloadProgressBlock destination:destination completionHandler:completionHandler];</code>这句话来为Task设置一个<code>AFURLSessionManagerTaskDelegate</code>代理对象。从而可以实现对进度处理、Block调用、Task完成返回数据的拼装的功能。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据指定的Task，初始化一个AFURLSessionManagerTaskDelegate</span></span><br><span class="line">AFURLSessionManagerTaskDelegate *delegate = [[AFURLSessionManagerTaskDelegate alloc] initWithTask:downloadTask];</span><br><span class="line">delegate.manager = <span class="keyword">self</span>;</span><br><span class="line"><span class="comment">//设置Task完成的回调Block</span></span><br><span class="line">delegate.completionHandler = completionHandler;</span><br><span class="line"><span class="keyword">if</span> (destination) &#123;</span><br><span class="line">    <span class="comment">//任务完成以后，调用destination这个Block</span></span><br><span class="line">    delegate.downloadTaskDidFinishDownloading = ^<span class="built_in">NSURL</span> * (<span class="built_in">NSURLSession</span> * __unused session, <span class="built_in">NSURLSessionDownloadTask</span> *task, <span class="built_in">NSURL</span> *location) &#123;</span><br><span class="line">        <span class="keyword">return</span> destination(location, task.response);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定Task与taskDescriptionForSessionTasks的关联关系，方便后面的通知中做对应的处理。</span></span><br><span class="line">downloadTask.taskDescription = <span class="keyword">self</span>.taskDescriptionForSessionTasks;</span><br><span class="line"><span class="comment">//添加通知</span></span><br><span class="line">[<span class="keyword">self</span> setDelegate:delegate forTask:downloadTask];</span><br><span class="line"><span class="comment">//设置一个下载进度的Block，以便在后面代理方法中调用。</span></span><br><span class="line">delegate.downloadProgressBlock = downloadProgressBlock;</span><br></pre></td></tr></table></figure><p>3 初始化一个AFURLSessionManagerTaskDelegate对象。在这个对象中对Task的请求过程进行处理和控制。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 初始化一个AFURLSessionManagerTaskDelegate对象</span></span><br><span class="line"><span class="comment"> @param task 对象绑定的Task</span></span><br><span class="line"><span class="comment"> @return 返回对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithTask:(<span class="built_in">NSURLSessionTask</span> *)task &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这个属性用于存储Task下载过程中的数据</span></span><br><span class="line">    _mutableData = [<span class="built_in">NSMutableData</span> data];</span><br><span class="line">    <span class="comment">//存储Task上传和下载的进度</span></span><br><span class="line">    _uploadProgress = [[<span class="built_in">NSProgress</span> alloc] initWithParent:<span class="literal">nil</span> userInfo:<span class="literal">nil</span>];</span><br><span class="line">    _downloadProgress = [[<span class="built_in">NSProgress</span> alloc] initWithParent:<span class="literal">nil</span> userInfo:<span class="literal">nil</span>];</span><br><span class="line">    __<span class="keyword">weak</span> __typeof__(task) weakTask = task;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSProgress</span> *progress <span class="keyword">in</span> @[ _uploadProgress, _downloadProgress ])</span><br><span class="line">    &#123;</span><br><span class="line">        progress.totalUnitCount = <span class="built_in">NSURLSessionTransferSizeUnknown</span>;</span><br><span class="line">        progress.cancellable = <span class="literal">YES</span>;</span><br><span class="line">        <span class="comment">//当progress对象取消的时候，取消Task</span></span><br><span class="line">        progress.cancellationHandler = ^&#123;</span><br><span class="line">            [weakTask cancel];</span><br><span class="line">        &#125;;</span><br><span class="line">        progress.pausable = <span class="literal">YES</span>;</span><br><span class="line">        progress.pausingHandler = ^&#123;</span><br><span class="line">            <span class="comment">//挂起Task</span></span><br><span class="line">            [weakTask suspend];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> ([progress respondsToSelector:<span class="keyword">@selector</span>(setResumingHandler:)]) &#123;</span><br><span class="line">            progress.resumingHandler = ^&#123;</span><br><span class="line">                <span class="comment">//重启Task</span></span><br><span class="line">                [weakTask resume];</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更具progress的进度来获取Task的进度。fractionCompleted方法在请求过程中多次执行。</span></span><br><span class="line">        [progress addObserver:<span class="keyword">self</span></span><br><span class="line">                   forKeyPath:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(fractionCompleted))</span><br><span class="line">                      options:<span class="built_in">NSKeyValueObservingOptionNew</span></span><br><span class="line">                      context:<span class="literal">NULL</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上面通过对fractionCompleted方法KVO。则会调用下面的方法，从而执行manager的</span></span><br><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">   <span class="keyword">if</span> ([object isEqual:<span class="keyword">self</span>.downloadProgress]) &#123;</span><br><span class="line">       <span class="comment">//更新下载进度Block</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.downloadProgressBlock) &#123;</span><br><span class="line">            <span class="keyword">self</span>.downloadProgressBlock(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([object isEqual:<span class="keyword">self</span>.uploadProgress]) &#123;</span><br><span class="line">        <span class="comment">//更新上传进度Bloc</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.uploadProgressBlock) &#123;</span><br><span class="line">            <span class="keyword">self</span>.uploadProgressBlock(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 在<code>AFURLSessionManagerTaskDelegate</code>设置Task状态改变的监听。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置指定task的`AFURLSessionManagerTaskDelegate`对象。并且添加task挂起或者重启的监听。</span></span><br><span class="line"><span class="comment"> @param delegate 代理对象</span></span><br><span class="line"><span class="comment"> @param task task</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setDelegate:(AFURLSessionManagerTaskDelegate *)delegate</span><br><span class="line">            forTask:(<span class="built_in">NSURLSessionTask</span> *)task</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(task);</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(delegate);</span><br><span class="line">    <span class="comment">//加锁操作</span></span><br><span class="line">    [<span class="keyword">self</span>.lock lock];</span><br><span class="line">    <span class="comment">//为Task设置与之代理方法关联关系。通过一个字典</span></span><br><span class="line">    <span class="keyword">self</span>.mutableTaskDelegatesKeyedByTaskIdentifier[@(task.taskIdentifier)] = delegate;</span><br><span class="line">    <span class="comment">//添加对Task开始、重启、挂起状态的通知的接收。</span></span><br><span class="line">    [<span class="keyword">self</span> addNotificationObserverForTask:task];</span><br><span class="line">    [<span class="keyword">self</span>.lock unlock];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 给Task添加任务开始、重启、挂起的通知</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param task 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)addNotificationObserverForTask:(<span class="built_in">NSURLSessionTask</span> *)task &#123;</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(taskDidResume:) name:AFNSURLSessionTaskDidResumeNotification object:task];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(taskDidSuspend:) name:AFNSURLSessionTaskDidSuspendNotification object:task];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5 从下面开始，任务就正式开始执行。其实就是<code>[downloadTask resume];</code>执行以后开始。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 在网络请求正式开始以后，这个方法会在数据接收的过程中多次调用。我们可以通过这个方法获取数据下载的大小、总得大小、还有多少么有下载</span></span><br><span class="line"><span class="comment"> @param session session</span></span><br><span class="line"><span class="comment"> @param downloadTask 对应的Task</span></span><br><span class="line"><span class="comment"> @param bytesWritten 已经下载的字节</span></span><br><span class="line"><span class="comment"> @param totalBytesWritten 总的字节大小</span></span><br><span class="line"><span class="comment"> @param totalBytesExpectedToWrite nil</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</span><br><span class="line">      downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask</span><br><span class="line">      didWriteData:(int64_t)bytesWritten</span><br><span class="line"> totalBytesWritten:(int64_t)totalBytesWritten</span><br><span class="line">totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取Task对应的`AFURLSessionManagerTaskDelegate`对象。从而可以调用对应的代理方法</span></span><br><span class="line">    AFURLSessionManagerTaskDelegate *delegate = [<span class="keyword">self</span> delegateForTask:downloadTask];</span><br><span class="line">    <span class="keyword">if</span> (delegate) &#123;</span><br><span class="line">        <span class="comment">//调用`AFURLSessionManagerTaskDelegate`类中的代理方法。从而实现对于进度更新等功能。</span></span><br><span class="line">        <span class="comment">//会调用下面的那个方法</span></span><br><span class="line">        [delegate URLSession:session downloadTask:downloadTask didWriteData:bytesWritten totalBytesWritten:totalBytesWritten totalBytesExpectedToWrite:totalBytesExpectedToWrite];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.downloadTaskDidWriteData) &#123;</span><br><span class="line">        <span class="comment">//如果有`downloadTaskDidWriteData`Block的实现，则在这个调用Block从而实现对下载进度过程的控制。</span></span><br><span class="line">        <span class="keyword">self</span>.downloadTaskDidWriteData(session, downloadTask, bytesWritten, totalBytesWritten, totalBytesExpectedToWrite);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AFURLSessionManagerTaskDelegate里面的这个代理方法实现对进度的更新。</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask</span><br><span class="line">      didWriteData:(int64_t)bytesWritten</span><br><span class="line"> totalBytesWritten:(int64_t)totalBytesWritten</span><br><span class="line">totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite&#123;</span><br><span class="line">    <span class="comment">//AFURLSessionManagerTaskDelegate代理方法实现对下载进度的记录</span></span><br><span class="line">    <span class="keyword">self</span>.downloadProgress.totalUnitCount = totalBytesExpectedToWrite;</span><br><span class="line">    <span class="keyword">self</span>.downloadProgress.completedUnitCount = totalBytesWritten;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6 Task完成以后，会调用<code>AFURLSessionManagerTaskDelegate</code>对象的方法对返回的数据封装。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AFURLSessionManagerTaskDelegate里面的这个代理方法实现对数据的具体处理。</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(__unused <span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task didCompleteWithError:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取Task对应的manager对象</span></span><br><span class="line">    __<span class="keyword">strong</span> AFURLSessionManager *manager = <span class="keyword">self</span>.manager;</span><br><span class="line">    <span class="comment">//要封装的responseObject对象。</span></span><br><span class="line">    __block <span class="keyword">id</span> responseObject = <span class="literal">nil</span>;</span><br><span class="line">    __block <span class="built_in">NSMutableDictionary</span> *userInfo = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    userInfo[AFNetworkingTaskDidCompleteResponseSerializerKey] = manager.responseSerializer;</span><br><span class="line">    <span class="comment">//返回的数据。</span></span><br><span class="line">    <span class="built_in">NSData</span> *data = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.mutableData) &#123;</span><br><span class="line">        data = [<span class="keyword">self</span>.mutableData <span class="keyword">copy</span>];</span><br><span class="line">        <span class="comment">//We no longer need the reference, so nil it out to gain back some memory.</span></span><br><span class="line">        <span class="keyword">self</span>.mutableData = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是downloadTask，则封装downloadFileURL</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.downloadFileURL) &#123;</span><br><span class="line">        userInfo[AFNetworkingTaskDidCompleteAssetPathKey] = <span class="keyword">self</span>.downloadFileURL;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data) &#123;<span class="comment">//如果是其他Task，则封装返回的data。</span></span><br><span class="line">        userInfo[AFNetworkingTaskDidCompleteResponseDataKey] = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有错封装</span></span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        userInfo[AFNetworkingTaskDidCompleteErrorKey] = error;</span><br><span class="line">        dispatch_group_async(manager.completionGroup ?: url_session_manager_completion_group(), manager.completionQueue ?: dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            <span class="comment">//如果Task有completionHandler。则调用这个Block</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">self</span>.completionHandler) &#123;</span><br><span class="line">                <span class="keyword">self</span>.completionHandler(task.response, responseObject, error);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//发送一个指定Task结束的通知</span></span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:AFNetworkingTaskDidCompleteNotification object:task userInfo:userInfo];</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//正确数据封装</span></span><br><span class="line">        <span class="comment">//在一个并行的dispat_queuq_t对象里面异步处理。</span></span><br><span class="line">        <span class="built_in">dispatch_async</span>(url_session_manager_processing_queue(), ^&#123;</span><br><span class="line">            <span class="built_in">NSError</span> *serializationError = <span class="literal">nil</span>;</span><br><span class="line">            <span class="comment">//封装responseBojct</span></span><br><span class="line">            responseObject = [manager.responseSerializer responseObjectForResponse:task.response data:data error:&amp;serializationError];</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">self</span>.downloadFileURL) &#123;</span><br><span class="line">                responseObject = <span class="keyword">self</span>.downloadFileURL;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (responseObject) &#123;</span><br><span class="line">                userInfo[AFNetworkingTaskDidCompleteSerializedResponseKey] = responseObject;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (serializationError) &#123;</span><br><span class="line">                userInfo[AFNetworkingTaskDidCompleteErrorKey] = serializationError;</span><br><span class="line">            &#125;</span><br><span class="line">            dispatch_group_async(manager.completionGroup ?: url_session_manager_completion_group(), manager.completionQueue ?: dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                <span class="comment">//如果Task有完成Block。则调用这个Block</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">self</span>.completionHandler) &#123;</span><br><span class="line">                    <span class="keyword">self</span>.completionHandler(task.response, responseObject, serializationError);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//发送通知</span></span><br><span class="line">                <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:AFNetworkingTaskDidCompleteNotification object:task userInfo:userInfo];</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7 移除Task对应的通知和对应的<code>AFURLSessionManagerTaskDelegate</code>代理对象。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)removeDelegateForTask:(<span class="built_in">NSURLSessionTask</span> *)task &#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(task);</span><br><span class="line">    [<span class="keyword">self</span>.lock lock];</span><br><span class="line">    <span class="comment">//移除Task对应的通知</span></span><br><span class="line">    [<span class="keyword">self</span> removeNotificationObserverForTask:task];</span><br><span class="line">    <span class="comment">//移除Task对应的`AFURLSessionManagerTaskDelegate`代理对象。</span></span><br><span class="line">    [<span class="keyword">self</span>.mutableTaskDelegatesKeyedByTaskIdentifier removeObjectForKey:@(task.taskIdentifier)];</span><br><span class="line">    [<span class="keyword">self</span>.lock unlock];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除通知监听</span></span><br><span class="line">- (<span class="keyword">void</span>)removeNotificationObserverForTask:(<span class="built_in">NSURLSessionTask</span> *)task &#123;</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:AFNSURLSessionTaskDidSuspendNotification object:task];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:AFNSURLSessionTaskDidResumeNotification object:task];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//`AFURLSessionManagerTaskDelegate`对象回收。</span></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    [<span class="keyword">self</span>.downloadProgress removeObserver:<span class="keyword">self</span> forKeyPath:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(fractionCompleted))];</span><br><span class="line">    [<span class="keyword">self</span>.uploadProgress removeObserver:<span class="keyword">self</span> forKeyPath:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(fractionCompleted))];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的过程，我们发现核心流程都是围绕了<code>NSRULSessionTask</code>对象以及与之绑定的<code>AFURLSessionManagerTaskDelegate</code>对象执行的。我们通过在<code>NSRULSessionTask</code>对象的代理方法里面手动调用<code>AFURLSessionManagerTaskDelegate</code>对应的代理方法来实现对数据的处理和简化代码的作用，这个设计思路的确吊吊的。还有一些方法没有涉及到，不过大同小异，基本过程就是这样，就不一一解释了。</p><h4 id="3-2-AFURLSessionManager一些特殊模块的说明"><a href="#3-2-AFURLSessionManager一些特殊模块的说明" class="headerlink" title="3.2 AFURLSessionManager一些特殊模块的说明"></a>3.2 AFURLSessionManager一些特殊模块的说明</h4><p><code>AFURLSeeesionManager</code>实现了<code>NSSecureCoding</code>协议。让manager可以归档解档。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 在iOS8以及以上环境下，supportsSecureCoding必须重写并且返回true。</span></span><br><span class="line"><span class="comment"> @return bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)supportsSecureCoding &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解档</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)decoder &#123;</span><br><span class="line">    <span class="built_in">NSURLSessionConfiguration</span> *configuration = [decoder decodeObjectOfClass:[<span class="built_in">NSURLSessionConfiguration</span> <span class="keyword">class</span>] forKey:<span class="string">@"sessionConfiguration"</span>];</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">self</span> initWithSessionConfiguration:configuration];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 我们发现对象归档的时候，只归档了`NSURLSessionConfiguration`属性。所以说归档接档的时候所有Block设置、operation设置都会失效。</span></span><br><span class="line"><span class="comment"> @param coder coder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)coder &#123;</span><br><span class="line">    [coder encodeObject:<span class="keyword">self</span>.session.configuration forKey:<span class="string">@"sessionConfiguration"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，<code>AFURLSessionManager</code>也实现了<code>NSCopying</code>协议。通过协议的实现过程，我们发现也是只使用了<code>NSURLSessionConfiguration</code>属性。和归档解档一样。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 实现NSCopying协议。copy的NAURLSessionManager没有复制任何与代理处理相关的Block</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone &#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="keyword">self</span> <span class="keyword">class</span>] allocWithZone:zone] initWithSessionConfiguration:<span class="keyword">self</span>.session.configuration];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有的时候，我们的请求会返回302这个状态码，这个表示需要请求重定向到另一个url，我们可以下面这个代理方法里面决定对于重定向的处理,如果对<code>completionHandler</code>传入nil,则会把response传入重定向请求。另外，backgroundSession的Task不会调用下面这个代理方法，而是直接调用。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 有的时候，我们的请求会返回302这个状态码，这个表示需要请求重定向到另一个url，我们可以在这个代理方法里面绝定对于重定向的处理。</span></span><br><span class="line"><span class="comment"> @param session session</span></span><br><span class="line"><span class="comment"> @param task task</span></span><br><span class="line"><span class="comment"> @param response response</span></span><br><span class="line"><span class="comment"> @param request 重定向的request。</span></span><br><span class="line"><span class="comment"> @param completionHandler 请求完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task willPerformHTTPRedirection:(<span class="built_in">NSHTTPURLResponse</span> *)response newRequest:(<span class="built_in">NSURLRequest</span> *)request completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLRequest</span> *))completionHandler</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//重定向的request对象</span></span><br><span class="line">    <span class="built_in">NSURLRequest</span> *redirectRequest = request;</span><br><span class="line">    <span class="comment">//如果用户指定了taskWillPerformHTTPRedirection这个Block,我们就通过这个Block的调用返回处理完成的request对象。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.taskWillPerformHTTPRedirection) &#123;</span><br><span class="line">        redirectRequest = <span class="keyword">self</span>.taskWillPerformHTTPRedirection(session, task, response, request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这个调用是必须的，执行重定向操作。</span></span><br><span class="line">    <span class="keyword">if</span> (completionHandler) &#123;</span><br><span class="line">        completionHandler(redirectRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>NSRULSessionUplaodTask</code>的时候，在某些系统上会出现bug。AFN已经帮我们处理好：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request fromFile:(<span class="built_in">NSURL</span> *)fileURL progress:(<span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *uploadProgress)) uploadProgressBlock completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> responseObject, <span class="built_in">NSError</span> *error))completionHandler</span><br><span class="line">&#123;</span><br><span class="line">    __block <span class="built_in">NSURLSessionUploadTask</span> *uploadTask = <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">//用线程安全的方式创建一个dataTask。修复iOS8下面的bug。</span></span><br><span class="line">    url_session_manager_create_task_safely(^&#123;</span><br><span class="line">        uploadTask = [<span class="keyword">self</span>.session uploadTaskWithRequest:request fromFile:fileURL];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//用于处理uploadTask在iOS7环境下面有可能创建失败的情况。如果attemptsToRecreateUploadTasksForBackgroundSessions为true。则尝试重新创建Task。如果三次都没有成功，则放弃。</span></span><br><span class="line">    <span class="keyword">if</span> (!uploadTask &amp;&amp; <span class="keyword">self</span>.attemptsToRecreateUploadTasksForBackgroundSessions &amp;&amp; <span class="keyword">self</span>.session.configuration.identifier) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> attempts = <span class="number">0</span>; !uploadTask &amp;&amp; attempts &lt; AFMaximumNumberOfAttemptsToRecreateBackgroundSessionUploadTask; attempts++) &#123;</span><br><span class="line">            uploadTask = [<span class="keyword">self</span>.session uploadTaskWithRequest:request fromFile:fileURL];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为Task添加`AFURLSessionManagerTaskDelegate`代理方法</span></span><br><span class="line">    [<span class="keyword">self</span> addDelegateForUploadTask:uploadTask progress:uploadProgressBlock completionHandler:completionHandler];</span><br><span class="line">    <span class="keyword">return</span> uploadTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用<code>dispatch_semaphore_t</code>来控制对异步处理返回结果的控制。非常有借鉴意义。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark -  获取当前session对应的task列表。通过dispatch_semaphore_t来控制访问过程。</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)tasksForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    __block <span class="built_in">NSArray</span> *tasks = <span class="literal">nil</span>;</span><br><span class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</span><br><span class="line">    [<span class="keyword">self</span>.session getTasksWithCompletionHandler:^(<span class="built_in">NSArray</span> *dataTasks, <span class="built_in">NSArray</span> *uploadTasks, <span class="built_in">NSArray</span> *downloadTasks) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(dataTasks))]) &#123;</span><br><span class="line">            tasks = dataTasks;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(uploadTasks))]) &#123;</span><br><span class="line">            tasks = uploadTasks;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(downloadTasks))]) &#123;</span><br><span class="line">            tasks = downloadTasks;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(tasks))]) &#123;</span><br><span class="line">            tasks = [@[dataTasks, uploadTasks, downloadTasks] valueForKeyPath:<span class="string">@"@unionOfArrays.self"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里发送一个信号量，让semaphore变为1。此时表示tasks已经成功获取。</span></span><br><span class="line">        dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="comment">//这里会一直等待信号量变为1。</span></span><br><span class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">    <span class="comment">//返回Task。通过信号量控制，避免了方法结束的时候，tasks还没有正常获取的情况。</span></span><br><span class="line">    <span class="keyword">return</span> tasks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-AFURLSessionTaskSwizzling私有类的说明"><a href="#4-AFURLSessionTaskSwizzling私有类的说明" class="headerlink" title="4 _AFURLSessionTaskSwizzling私有类的说明"></a>4 _AFURLSessionTaskSwizzling私有类的说明</h2><p>在iOS7和iOS8及以上的系统，<code>NSRULSessionTask</code>的具体实现是不同的。我们目前知道的不同有:</p><ul><li><code>NSURLSessionTasks</code>是一个类簇。所以我们初始化一个Task的时候，我们并不只到初始化的到底是哪个子类。</li><li>简单的通过<code>[NSURLSessionTask class]</code>并不会起作用。必须通过<code>NSURLSession</code>创建一个task对象。然后获取他所在的类。</li><li>iOS7下面,下面代码中的<code>localDataTask</code>对象的继承关系是<code>__NSCFLocalDataTask</code> -&gt; <code>__NSCFLocalSessionTask</code> -&gt; <code>__NSCFURLSessionTask</code>。</li><li>在iOS8以及以上系统。下面代码中的<code>localDataTask</code>对象的继承关系是<code>__NSCFLocalDataTask</code> -&gt; <code>__NSCFLocalSessionTask</code> -&gt; <code>NSURLSessionTask</code>。</li><li>在iOS7下面<code>__NSCFLocalSessionTask</code>和<code>__NSCFURLSessionTask</code>实现了<code>resume</code>和<code>suspend</code>方法，同时最重要的是他不调用父类的实现。但是iOS8下面，只有<code>NSURLSessionTask</code>实现了<code>resume</code>和<code>suspend</code>。所以在iOS7的环境下，我们需要想办法让<code>resume</code>和<code>suspend</code>调用<code>NSURLSessionTask</code>的具体实现。</li></ul><p>下面的代码完美的向我们展示了一个向类添加方法，并且swizzle方法实现的过程。值得仔细琢磨。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 切换theClass类的`originalSelector`和`swizzledSelector`的实现</span></span><br><span class="line"><span class="comment"> @param theClass 类</span></span><br><span class="line"><span class="comment"> @param originalSelector 方法一</span></span><br><span class="line"><span class="comment"> @param swizzledSelector 方法2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> af_swizzleSelector(Class theClass, SEL originalSelector, SEL swizzledSelector) &#123;</span><br><span class="line">    Method originalMethod = class_getInstanceMethod(theClass, originalSelector);</span><br><span class="line">    Method swizzledMethod = class_getInstanceMethod(theClass, swizzledSelector);</span><br><span class="line">    method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 动态给一个类添加方法</span></span><br><span class="line"><span class="comment"> @param theClass 类</span></span><br><span class="line"><span class="comment"> @param selector 方法名字</span></span><br><span class="line"><span class="comment"> @param method 方法体</span></span><br><span class="line"><span class="comment"> @return bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">BOOL</span> af_addMethod(Class theClass, SEL selector, Method method) &#123;</span><br><span class="line">    <span class="keyword">return</span> class_addMethod(theClass, selector,  method_getImplementation(method),  method_getTypeEncoding(method));</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_AFURLSessionTaskSwizzling</span></span></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">NSClassFromString</span>(<span class="string">@"NSURLSessionTask"</span>)) &#123;</span><br><span class="line">        <span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> ephemeralSessionConfiguration];</span><br><span class="line">        <span class="built_in">NSURLSession</span> * session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:configuration];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC diagnostic push</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC diagnostic ignored <span class="meta-string">"-Wnonnull"</span></span></span><br><span class="line">        <span class="comment">//初始化一个dataTask对象</span></span><br><span class="line">        <span class="built_in">NSURLSessionDataTask</span> *localDataTask = [session dataTaskWithURL:<span class="literal">nil</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic pop</span></span><br><span class="line">        <span class="comment">//获取af_resume这个方法的实现。</span></span><br><span class="line">        IMP originalAFResumeIMP = method_getImplementation(class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(af_resume)));</span><br><span class="line">        <span class="comment">//获取dataTask的具体类</span></span><br><span class="line">        Class currentClass = [localDataTask <span class="keyword">class</span>];</span><br><span class="line">        <span class="comment">//如果父类有resume方法。则改变方法的具体实现。</span></span><br><span class="line">        <span class="keyword">while</span> (class_getInstanceMethod(currentClass, <span class="keyword">@selector</span>(resume))) &#123;</span><br><span class="line">            Class superClass = [currentClass superclass];</span><br><span class="line">            <span class="comment">//找到类和父类的resume方法实现</span></span><br><span class="line">            IMP classResumeIMP = method_getImplementation(class_getInstanceMethod(currentClass, <span class="keyword">@selector</span>(resume)));</span><br><span class="line">            IMP superclassResumeIMP = method_getImplementation(class_getInstanceMethod(superClass, <span class="keyword">@selector</span>(resume)));</span><br><span class="line">            <span class="keyword">if</span> (classResumeIMP != superclassResumeIMP &amp;&amp;</span><br><span class="line">                originalAFResumeIMP != classResumeIMP) &#123;</span><br><span class="line">                <span class="comment">//添加方法、然后转换方法的实现</span></span><br><span class="line">                [<span class="keyword">self</span> swizzleResumeAndSuspendMethodForClass:currentClass];</span><br><span class="line">            &#125;</span><br><span class="line">            currentClass = [currentClass superclass];</span><br><span class="line">        &#125;</span><br><span class="line">        [localDataTask cancel];</span><br><span class="line">        [session finishTasksAndInvalidate];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 主要是实现了为一个类添加方法、并且转换添加方法和原来对应方法的实现。</span></span><br><span class="line"><span class="comment"> @param theClass 要操作的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>)swizzleResumeAndSuspendMethodForClass:(Class)theClass &#123;</span><br><span class="line">    Method afResumeMethod = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(af_resume));</span><br><span class="line">    Method afSuspendMethod = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(af_suspend));</span><br><span class="line">    <span class="comment">//为theClass类添加一个af_resume方法。</span></span><br><span class="line">    <span class="keyword">if</span> (af_addMethod(theClass, <span class="keyword">@selector</span>(af_resume), afResumeMethod)) &#123;</span><br><span class="line">        <span class="comment">//把dataTask的resume和afresume方法的实现互换。</span></span><br><span class="line">        af_swizzleSelector(theClass, <span class="keyword">@selector</span>(resume), <span class="keyword">@selector</span>(af_resume));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为theClass类添加一个af_suspend方法</span></span><br><span class="line">    <span class="keyword">if</span> (af_addMethod(theClass, <span class="keyword">@selector</span>(af_suspend), afSuspendMethod)) &#123;</span><br><span class="line">        <span class="comment">//把dataTask的suspend和af_suspend方法的实现互换。</span></span><br><span class="line">        af_swizzleSelector(theClass, <span class="keyword">@selector</span>(suspend), <span class="keyword">@selector</span>(af_suspend));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSURLSessionTaskState</span>)state &#123;</span><br><span class="line">    <span class="built_in">NSAssert</span>(<span class="literal">NO</span>, <span class="string">@"State method should never be called in the actual dummy class"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NSURLSessionTaskStateCanceling</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 在iOS7下面，`NSURLSessionDataTask`调用resume方法其实就是执行`af_resume`的具体实现。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)af_resume &#123;</span><br><span class="line">    <span class="built_in">NSAssert</span>([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(state)], <span class="string">@"Does not respond to state"</span>);</span><br><span class="line">    <span class="built_in">NSURLSessionTaskState</span> state = [<span class="keyword">self</span> state];</span><br><span class="line">    <span class="comment">//这里其实就是调用dataTask的resume实现</span></span><br><span class="line">    [<span class="keyword">self</span> af_resume];</span><br><span class="line">    <span class="keyword">if</span> (state != <span class="built_in">NSURLSessionTaskStateRunning</span>) &#123;</span><br><span class="line">        <span class="comment">//这里的self其实就是`NSRULSessionDataTask`对象</span></span><br><span class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:AFNSURLSessionTaskDidResumeNotification object:<span class="keyword">self</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 在iOS7下面，`NSURLSessionDataTask`调用suspend方法其实就是执行`af_suspend`的具体实现。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)af_suspend &#123;</span><br><span class="line">    <span class="built_in">NSAssert</span>([<span class="keyword">self</span> respondsToSelector:<span class="keyword">@selector</span>(state)], <span class="string">@"Does not respond to state"</span>);</span><br><span class="line">    <span class="built_in">NSURLSessionTaskState</span> state = [<span class="keyword">self</span> state];</span><br><span class="line">    <span class="comment">//这里其实就是调用dataTask的suspend具体实现</span></span><br><span class="line">    [<span class="keyword">self</span> af_suspend];</span><br><span class="line">    <span class="keyword">if</span> (state != <span class="built_in">NSURLSessionTaskStateSuspended</span>) &#123;</span><br><span class="line">        <span class="comment">//这里的self其实就是`NSRULSessionDataTask`对象</span></span><br><span class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:AFNSURLSessionTaskDidSuspendNotification object:<span class="keyword">self</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h2><p><code>AFURLSessionManager</code>通过对task设置一个<code>AFURLSessionManagerTaskDelegate</code>代理来处理繁杂的请求进度管理。从而降低了代码的负责度。是代理模式的一个很好的实践。</p><p><code>AFURLSessionManager</code>通过私有类<code>_AFURLSessionTaskSwizzling</code>来修改iOS7和iOS8系统上面不同。是对于方法swizzle的一个成功和完整的实践。</p><p><code>AFURLSessionManager</code>通过添加各种Block，让我们对请求过程有全方位的控制和处理。同时提供简洁的api，把负责的处理全部封装好。</p><p>具体源码在<a href="https://github.com/huang303513/iOSSourceCodeStudy">iOSSourceCodeStudy</a>。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AFNetWorking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UIViewController和UIView不同加载方式的生命周期函数</title>
      <link href="/2017/04/15/UIViewController%E5%92%8CUIView%E4%B8%8D%E5%90%8C%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"/>
      <url>/2017/04/15/UIViewController%E5%92%8CUIView%E4%B8%8D%E5%90%8C%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本说明"><a href="#1-基本说明" class="headerlink" title="1 基本说明"></a>1 基本说明</h2><p>话说做了iOS几年，对于UIViewController和UIView的生命周期函数一直不是很重视，导致了很多模糊的地方。今天专门写一个Demo来验证一下，发现不同加载方式差别还是蛮大的。具体Demo地址<a href="https://github.com/huang303513/iOSKeyPointExploration/tree/master/UIViewController%E5%92%8CUIView%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8A%A0%E8%BD%BD%E5%92%8C%E5%8D%B8%E8%BD%BD">UIViewController和UIView生命周期加载和卸载</a>。</p><h2 id="2-加载UIViewController"><a href="#2-加载UIViewController" class="headerlink" title="2 加载UIViewController"></a>2 加载UIViewController</h2><p>每一种加载方式所调用的加载方法不同，而且还有一些细节地方不同。苹果为我们提供了四种默认的加载方式,不过我是纯代码党，AutoLayout以后，我们通过Masonry这个第三方布局利器来布局，在我Git上也有专门总结的不同布局解决方案。接下来我们看看系统的四种方式，犹豫没有什么理论性的东西，我就直接上代码为主了：</p><ul><li>通过XIB加载。</li><li>通过StoryBoard加载。</li><li>通过NSCoding协议加载。</li><li>通过代码加载。</li></ul><h4 id="2-1-用XIB加载UIViewController"><a href="#2-1-用XIB加载UIViewController" class="headerlink" title="2.1 用XIB加载UIViewController"></a>2.1 用XIB加载UIViewController</h4><p>首先看初始化代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)loadControllerFromXIB:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    XIBViewController *xibVC = [[XIBViewController alloc]initWithNibName:<span class="string">@"XIBViewController"</span> bundle:[<span class="built_in">NSBundle</span> mainBundle]];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController pushViewController:xibVC animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们不实现<code>loadView</code>的时候打印结果:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">05</span>:<span class="number">32.974</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59883</span>:<span class="number">1192231</span>] initWithNibName</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">05</span>:<span class="number">32.987</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59883</span>:<span class="number">1192231</span>] viewDidLoad</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">05</span>:<span class="number">32.987</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59883</span>:<span class="number">1192231</span>] viewWillAppear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">05</span>:<span class="number">32.996</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59883</span>:<span class="number">1192231</span>] viewWillLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">05</span>:<span class="number">32.997</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59883</span>:<span class="number">1192231</span>] viewDidLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">05</span>:<span class="number">33.002</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59883</span>:<span class="number">1192231</span>] viewWillLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">05</span>:<span class="number">33.002</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59883</span>:<span class="number">1192231</span>] viewDidLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">05</span>:<span class="number">33.506</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59883</span>:<span class="number">1192231</span>] viewDidAppear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">05</span>:<span class="number">37.142</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59883</span>:<span class="number">1192231</span>] clickButton</span><br><span class="line"><span class="comment">//pop以后</span></span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">05</span>:<span class="number">42.334</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59883</span>:<span class="number">1192231</span>] viewWillDisappear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">05</span>:<span class="number">42.837</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59883</span>:<span class="number">1192231</span>] viewDidDisappear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">05</span>:<span class="number">42.838</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59883</span>:<span class="number">1192231</span>] dealloc</span><br></pre></td></tr></table></figure><p>我发现一个很奇怪的现象。如果用XIB加载的控制器，并且实现了一个空<code>loadView</code>,那么我们在XIB设置的视图都失效了，应该是系统返回了一个默认的视图覆盖了。但是用Storyboard加载的视图，实现一个空的<code>loadView</code>则不会丢失Storyboard里面的视图，<code>这个是用XIB和Storyboard的一个注意点</code>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)loadView&#123;</span><br><span class="line">    [<span class="keyword">super</span> loadView];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"loadView"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-用Storyboard加载UIViewController"><a href="#2-2-用Storyboard加载UIViewController" class="headerlink" title="2.2 用Storyboard加载UIViewController"></a>2.2 用Storyboard加载UIViewController</h4><p>初始化代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)laodControllerFromSB:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="built_in">UIStoryboard</span> *sb = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"Second"</span> bundle:[<span class="built_in">NSBundle</span> mainBundle]];</span><br><span class="line">    SBViewController *sbVC = [sb instantiateViewControllerWithIdentifier:<span class="string">@"SBViewController"</span>];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController pushViewController:sbVC animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">45.364</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] initWithCoder</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">45.365</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] awakeFromNib</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">45.368</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] loadView</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">45.368</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidLoad</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">45.368</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewWillAppear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">45.372</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewWillLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">45.373</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">45.877</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidAppear</span><br><span class="line"><span class="comment">//pop以后</span></span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">50.669</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewWillDisappear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">51.172</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidDisappear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">51.172</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] dealloc</span><br></pre></td></tr></table></figure><p>对于Storyboard，使用一个空的<code>loadView</code>没有影响。</p><h4 id="2-3-用NSCodeing加载UIViewController"><a href="#2-3-用NSCodeing加载UIViewController" class="headerlink" title="2.3 用NSCodeing加载UIViewController"></a>2.3 用NSCodeing加载UIViewController</h4><p>初始化代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里我就不实现NSCoding协议了，直接传入一个nil参数。</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)loadControllerFromCoder:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    CoderViewController *coderVC = [[CoderViewController alloc]initWithCoder:<span class="literal">nil</span>];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController pushViewController:coderVC animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">25.962</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] initWithCoder</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">25.963</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] loadView</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">25.963</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidLoad</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">25.963</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewWillAppear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">25.967</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewWillLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">25.967</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">25.968</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewWillLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">25.968</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">26.470</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidAppear</span><br><span class="line"><span class="comment">//pop以后</span></span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">28.034</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewWillDisappear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">28.537</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidDisappear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">28.537</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] dealloc</span><br></pre></td></tr></table></figure><h4 id="2-4-用代码加载UIViewController"><a href="#2-4-用代码加载UIViewController" class="headerlink" title="2.4 用代码加载UIViewController"></a>2.4 用代码加载UIViewController</h4><p>初始化代码:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)loadControllerWithNone:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    CodeViewController *codeVC = [[CodeViewController alloc]init];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController pushViewController:codeVC animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">48.785</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] initWithNibName</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">48.786</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] init</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">48.787</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] loadView</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">48.787</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidLoad</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">48.788</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewWillAppear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">48.792</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewWillLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">48.792</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">48.792</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewWillLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">48.792</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidLayoutSubviews</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">49.293</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidAppear</span><br><span class="line"><span class="comment">//pop以后</span></span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">55.594</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewWillDisappear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">56.098</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] viewDidDisappear</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">56.098</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] dealloc</span><br></pre></td></tr></table></figure><h2 id="3-加载UIView"><a href="#3-加载UIView" class="headerlink" title="3 加载UIView"></a>3 加载UIView</h2><h4 id="3-1-用XIB加载UIView"><a href="#3-1-用XIB加载UIView" class="headerlink" title="3.1 用XIB加载UIView"></a>3.1 用XIB加载UIView</h4><p>初始化代码:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)loadViewFromXib:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    XibView *xibView = [[[<span class="built_in">NSBundle</span> mainBundle]loadNibNamed:<span class="string">@"XIBView"</span> owner:<span class="keyword">self</span> options:<span class="literal">nil</span>] lastObject];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:xibView];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">22.194</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] initWithCoder</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">22.195</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] awakeFromNib</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">22.195</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] willMoveToWindow</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">22.195</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] willMoveToSuperview</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">22.196</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] didMoveToWindow</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">22.196</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] didMoveToSuperview</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">22.197</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] layoutSubviews</span><br><span class="line"><span class="comment">//这里是点击移除以后</span></span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">25.769</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] willMoveToSuperview</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">25.770</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] willMoveToWindow</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">25.771</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] didMoveToWindow</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">25.771</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] didMoveToSuperview</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">25.771</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">59932</span>:<span class="number">1194239</span>] dealloc</span><br></pre></td></tr></table></figure><h4 id="3-2-用代码加载UIView"><a href="#3-2-用代码加载UIView" class="headerlink" title="3.2 用代码加载UIView"></a>3.2 用代码加载UIView</h4><p>初始化代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)loadViewWithNone:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    CodeView *codeView = [[CodeView alloc]init];</span><br><span class="line">    codeView.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</span><br><span class="line">    codeView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">500</span>, <span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:codeView];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">38</span>:<span class="number">57.562</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] initWithFrame</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">38</span>:<span class="number">57.562</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] init</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">38</span>:<span class="number">57.562</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] willMoveToWindow</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">38</span>:<span class="number">57.563</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] willMoveToSuperview</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">38</span>:<span class="number">57.563</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] didMoveToWindow</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">38</span>:<span class="number">57.563</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] didMoveToSuperview</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">38</span>:<span class="number">57.564</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] layoutSubviews</span><br><span class="line"><span class="comment">//点击移除以后</span></span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">02.751</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] willMoveToSuperview</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">02.752</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] willMoveToWindow</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">02.752</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] didMoveToWindow</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">02.752</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] didMoveToSuperview</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">02.752</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] 点击移除</span><br><span class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-15</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">02.753</span> <span class="built_in">UIViewController</span>和<span class="built_in">UIView</span>生命周期加载和卸载[<span class="number">60323</span>:<span class="number">1208772</span>] dealloc</span><br></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>UIViewController不同加载方式钩子函数总结：</p><ul><li>XIB加载方式<ul><li>initWithNibName</li><li>loadView(<code>注意：如果实现一个空的方法，则XIB设置的属性无效，会覆盖XIB中的设置</code>)</li><li>viewDidLoad</li></ul></li><li>Storyboard加载方式<ul><li>initWithCoder</li><li>awakeFromNib</li><li>loadView(<code>实现是一个空方法或者不实现没有影响</code>) </li><li>viewDidLoad</li></ul></li><li>NSCoding加载方式<ul><li>initWithCoder</li><li>loadView</li><li>viewDidLoad</li></ul></li><li>代码加载方式<ul><li>initWithNibName</li><li>init(<code>这个是我初始化的时候主动调用,如果用initWithNibName传入nil参数则不会调用</code>)</li><li>loadView</li><li>viewDidLoad</li></ul></li></ul><p>我们可以发现，代码加载方式和XIB加载方式一模一样，如果有XIB则加载XIB，如果没有XIB则可以代码添加视图。</p><p>UIView不同加载方式钩子函数总结：</p><ul><li>XIB加载方式<ul><li>initWithCoder</li><li>awakeFromNib</li><li>willMoveToWindow</li></ul></li><li>代码加载方式<ul><li>initWithFrame(<code>设置frame。</code>)</li><li>init(<code>init方法调用</code>)</li><li>willMoveToWindow</li></ul></li></ul><p>我们发现，如果通过init初始化，然后手动设置Frame。则会导致上面的调用顺序。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AFNetWorking源码之NSURLSession系列概述</title>
      <link href="/2017/04/14/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BNSURLSession%E7%B3%BB%E5%88%97%E6%A6%82%E8%BF%B0/"/>
      <url>/2017/04/14/AFNetWorking%E6%BA%90%E7%A0%81%E4%B9%8BNSURLSession%E7%B3%BB%E5%88%97%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本说明"><a href="#1-基本说明" class="headerlink" title="1 基本说明"></a>1 基本说明</h2><p>记得我刚做iOS的时候，那时候还是ASI和AFN共存，甚至ASI使用比例还多点，一转眼几年过去，ASI基本已经消失了，AFN基本成了iOS项目的标配。我虽然以前也有看过AFN2.x的源码，但是对于AFN3.x的源码一直没有自己阅读。接下来我会对AFN3.x学习并且写博客记录。得益于<code>NSURLSession</code>的强大功能，ANF3.0放弃了<code>NSURLConnection</code>这一部分，让代码简化了很多，但是功能却更加丰富。我觉得在学习AFN之前，有必要仔细了解<code>NSURLSession</code>和<code>https</code>相关，不然会有很多地方迷惑不解,具体可以看我的git仓库<a href="https://github.com/huang303513/iOSSourceCodeStudy">iOSSourceCodeStudy</a>。同时我强烈推荐浏览一下<code>NSURLSession.h</code>这个文件。</p><h2 id="2-相互关系"><a href="#2-相互关系" class="headerlink" title="2 相互关系"></a>2 相互关系</h2><p>我们首先来看一下一个简单的<code>NSURLSession</code>请求代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration] delegate:<span class="keyword">self</span> delegateQueue:[[<span class="built_in">NSOperationQueue</span> alloc] init]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURLRequest</span> *request = [[<span class="built_in">NSURLRequest</span> alloc]initWithURL:[<span class="built_in">NSURL</span> URLWithString:bigPic]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURLSessionDataTask</span> *dataTask = [session dataTaskWithRequest:request];</span><br><span class="line">[dataTask resume];</span><br></pre></td></tr></table></figure><p>从上面我们发现，我们要发送一个网络请求，需要新建一个<code>NSURLSession</code>,新建一个<code>NSURLSession</code>又需要一个<code>NSURLSessionConfiguration</code>,并且还需要一些代理方法。同时我们需要一个<code>NSURLSessionDataTask</code>。所以说，我们的<code>NSRULSession</code><br>网络请求系统包括一个session、一个configuration、一个Task已经Task附带的delegate。</p><ul><li>一个<code>NSURLSession</code>,总共只有一个类，也是最核心的类，他有一个对应的代理<code>NSURLSessionDelegate</code>。</li><li>一个<code>NSURLSessionConfiguration</code>,总共有三种模式。</li><li>一个<code>NSURLSessionTask</code>。<code>NSURLSessionTask</code>是抽闲类,对应的代理<code>NSURLSessionTaskDelegate</code>。我们具体使用的时候，会使用他的三种子类，而且每个子类都有对应的delegate。</li></ul><h2 id="3-一个NSURLSession"><a href="#3-一个NSURLSession" class="headerlink" title="3 一个NSURLSession"></a>3 一个NSURLSession</h2><p>首先我们看一下<code>NSRULSession.h</code>里面关于<code>NSURLSession</code>的部分。我们把它分为初始化部分、属性部分、dataTask部分、uploadTask部分、downloadTask部分。也就是说其他很多类都是围绕着下面这几个api衍生的。后面我们会每个部分分析。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化部分</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLSession</span> *sharedSession;</span><br><span class="line">+ (<span class="built_in">NSURLSession</span> *)sessionWithConfiguration:(<span class="built_in">NSURLSessionConfiguration</span> *)configuration;</span><br><span class="line">+ (<span class="built_in">NSURLSession</span> *)sessionWithConfiguration:(<span class="built_in">NSURLSessionConfiguration</span> *)configuration delegate:(<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">NSURLSessionDelegate</span>&gt;)delegate delegateQueue:(<span class="keyword">nullable</span> <span class="built_in">NSOperationQueue</span> *)queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性部分</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">retain</span>) <span class="built_in">NSOperationQueue</span> *delegateQueue;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readonly</span>, <span class="keyword">retain</span>) <span class="keyword">id</span> &lt;<span class="built_in">NSURLSessionDelegate</span>&gt; delegate;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSURLSessionConfiguration</span> *configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dataTask部分</span></span><br><span class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)dataTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request;</span><br><span class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)dataTaskWithURL:(<span class="built_in">NSURL</span> *)url;</span><br><span class="line"></span><br><span class="line"><span class="comment">//uploadTask部分</span></span><br><span class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request fromFile:(<span class="built_in">NSURL</span> *)fileURL;</span><br><span class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request fromData:(<span class="built_in">NSData</span> *)bodyData;</span><br><span class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithStreamedRequest:(<span class="built_in">NSURLRequest</span> *)request;</span><br><span class="line"></span><br><span class="line"><span class="comment">//downloadTask部分</span></span><br><span class="line">- (<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request;</span><br><span class="line">- (<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTaskWithURL:(<span class="built_in">NSURL</span> *)url;</span><br><span class="line">- (<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTaskWithResumeData:(<span class="built_in">NSData</span> *)resumeData;</span><br></pre></td></tr></table></figure><h3 id="3-1-Block的NSURLSession的api"><a href="#3-1-Block的NSURLSession的api" class="headerlink" title="3.1 Block的NSURLSession的api"></a>3.1 Block的NSURLSession的api</h3><p>我们都知道，<code>NSRULConnection</code>除了一套使用代理的API，还有一套对应的使用Block的api。<code>NSURLSession</code>也不列外。使用这一套api就不用实现代理方法。和delegate一样，Block也有dataTask系列、downloadTask系列、uploadTask系列。具体看下面：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dataTask系列</span></span><br><span class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)dataTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)dataTaskWithURL:(<span class="built_in">NSURL</span> *)url completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//unloadTast系列</span></span><br><span class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request fromFile:(<span class="built_in">NSURL</span> *)fileURL completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request fromData:(<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)bodyData completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//downloadTask系列</span></span><br><span class="line">- (<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURL</span> * _Nullable location, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTaskWithURL:(<span class="built_in">NSURL</span> *)url completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURL</span> * _Nullable location, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTaskWithResumeData:(<span class="built_in">NSData</span> *)resumeData completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURL</span> * _Nullable location, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-Block的NSURLSession使用"><a href="#3-2-Block的NSURLSession使用" class="headerlink" title="3.2 Block的NSURLSession使用"></a>3.2 Block的NSURLSession使用</h3><p>用dataTask下载一张图片，然后用imageView显示。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">IBAction</span>)requestBlockTaskTest:(<span class="keyword">id</span>)sender&#123;</span><br><span class="line">    [<span class="keyword">self</span> clear];</span><br><span class="line">    <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sharedSession];</span><br><span class="line">    <span class="built_in">NSURLRequest</span> *request = [[<span class="built_in">NSURLRequest</span> alloc]initWithURL:[<span class="built_in">NSURL</span> URLWithString:bigPic]];</span><br><span class="line">    <span class="built_in">NSURLSessionDataTask</span> *dataTask = [session dataTaskWithRequest:request completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc]initWithData:data];</span><br><span class="line">        <span class="keyword">self</span>.imageView.image = image;</span><br><span class="line">    &#125;];</span><br><span class="line">    [dataTask resume];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-一个NSURLSessionConfiguration"><a href="#4-一个NSURLSessionConfiguration" class="headerlink" title="4 一个NSURLSessionConfiguration"></a>4 一个NSURLSessionConfiguration</h2><p>首先看一下<code>NSURLSessionConfiguration</code>部分。从这个名字，我们可以预感到这个是与session的配置相关的，的确也是这样。总共有三种类型的configuratin,另外还有很多属性，比如配置缓存策略的<code>requestCachePolicy</code>,请求超时的<code>timeoutIntervalForRequest</code>,添加额外请求头的<code>HTTPAdditionalHeaders</code>,其他还有很多属性这里就不一一说了,具体看源码:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认的配置会将缓存存储在磁盘上</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLSessionConfiguration</span> *defaultSessionConfiguration;</span><br><span class="line"><span class="comment">//第二种瞬时会话模式不会创建持久性存储的缓存.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLSessionConfiguration</span> *ephemeralSessionConfiguration;</span><br><span class="line"><span class="comment">//第三种后台会话模式允许程序在后台进行上传下载工作</span></span><br><span class="line">+ (<span class="built_in">NSURLSessionConfiguration</span> *)backgroundSessionConfigurationWithIdentifier:(<span class="built_in">NSString</span> *)identifier;</span><br><span class="line"><span class="comment">//各种属性</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSURLRequestCachePolicy</span> requestCachePolicy;</span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSTimeInterval</span> timeoutIntervalForRequest;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSDictionary</span> *HTTPAdditionalHeaders;</span><br></pre></td></tr></table></figure><h2 id="5-一个NSURLSessionTask"><a href="#5-一个NSURLSessionTask" class="headerlink" title="5 一个NSURLSessionTask"></a>5 一个NSURLSessionTask</h2><p>从上面<code>NSURLSession</code>初始化一个请求的时候，我们发现<code>NSURLSessionTask</code>并不能直接使用，只能使用他的子类。具体如下：</p><ul><li><code>NSURLSessionTask</code>抽象类。有对应的代理<code>NSURLSessionTaskDelegate</code>,而且这个代理继承了<code>NSURLSessionDelegate</code>代理。</li><li><code>NSURLSessionDataTask</code>是<code>NSURLSessionTask</code>的子类。有对应的代理<code>NSURLSessionTaskDelegate</code>,而且这个代理继承了<code>NSURLSessionTaskDelegate</code>代理。我们一般网络请求，就用这个类。</li><li><code>NSURLSessionDownloadTask</code>是<code>NSURLSessionTask</code>的子类。有对应的代理<code>NSURLSessionDownloadDelegate</code>,而且这个代理继承了<code>NSURLSessionTaskDelegate</code>代理。这个主要用于下载大文件等。</li><li><code>NSURLSessionUploadTask</code>是<code>NSURLSessionDataTask</code>的子类。有对应的代理及时父类代理<code>NSURLSessionDownloadDelegate</code>。这个主要用于处理上传请求如上传图片。</li></ul><p>从上面我们发现Task和delegate有一套对应的继承关系：</p><ul><li><p>NSURLSessionTask (抽象类,<code>NSURLSessionTaskDelegate</code>)</p><ul><li>NSURLSessionDataTask (<code>NSURLSessionDataDelegate</code>)<ul><li>NSURLSessionUploadTask (<code>NSURLSessionDataDelegate</code>)</li></ul></li><li>NSURLSessionDownloadTask (<code>NSURLSessionDownloadDelegate</code>)</li></ul></li><li><p>NSURLSessionDelegate</p><ul><li>NSURLSessionTaskDelegate<ul><li>NSURLSessionDataDelegate</li><li>NSURLSessionDownloadDelegate</li></ul></li></ul></li></ul><p>从继承关系上，我们就可以理解在初始化的时候，只通过设置<code>NSURLSession</code>对象的delegate就可以了。因为根据不同的task，其实就是设置了不同的delegate。这个设计避免了多次设置delegate的情况，同时也根据不同的task实现不同的delegate方法。真是一个很绝妙的设计。</p><h2 id="6-代理说明"><a href="#6-代理说明" class="headerlink" title="6 代理说明"></a>6 代理说明</h2><h3 id="6-1-NSURLSessionDelegate"><a href="#6-1-NSURLSessionDelegate" class="headerlink" title="6.1 NSURLSessionDelegate"></a>6.1 NSURLSessionDelegate</h3><p>接下来我们看看<code>NSURLSession</code>的delegate对象<code>NSURLSessionDelegate</code>的方法,当一个session遇到错误、或者需要认证、应用进入后台都会调用下面的代理方法:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当一个session遇到系统错误或者未检测到的错误的时候，就会调用这个方法。</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session didBecomeInvalidWithError:(<span class="keyword">nullable</span> <span class="built_in">NSError</span> *)error&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当请求需要认证、或者https证书认证的时候，我们就需要在这个方法里面处理。</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session didReceiveChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition, <span class="built_in">NSURLCredential</span> * _Nullable credential))completionHandler&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果应用进入后台、这个方法会被调用。我们在这里可以对session发起的请求做各种操作比如请求完成的回调等。</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSessionDidFinishEventsForBackgroundURLSession:(<span class="built_in">NSURLSession</span> *)session &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-NSURLSessionTaskDelegate"><a href="#6-2-NSURLSessionTaskDelegate" class="headerlink" title="6.2 NSURLSessionTaskDelegate"></a>6.2 NSURLSessionTaskDelegate</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当请求重定向的时候调用这个方法。我们必须设置一个新的`NSURLRequest`对象传入completionHandler来重定向新的请求，但是当`session`是background模式的时候，这个方法不会被调用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task</span><br><span class="line">willPerformHTTPRedirection:(<span class="built_in">NSHTTPURLResponse</span> *)response</span><br><span class="line">        newRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLRequest</span> * _Nullable))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当请求需要认证的时候调用这个方法。如果没有实现这个代理，那么请求认证这个过程不会被调用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task</span><br><span class="line">didReceiveChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition, <span class="built_in">NSURLCredential</span> * _Nullable credential))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果请求需要一个新的请求体时，这个方法就会被调用。比如认证失败的时候，我们可以通过这个机会从新认证。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task</span><br><span class="line"> needNewBodyStream:(<span class="keyword">void</span> (^)(<span class="built_in">NSInputStream</span> * _Nullable bodyStream))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当我们上传数据的时候，我们可以通过这个代理方法获取上传进度。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task</span><br><span class="line">   didSendBodyData:(int64_t)bytesSent</span><br><span class="line">    totalBytesSent:(int64_t)totalBytesSent</span><br><span class="line">totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当task的统计信息收集好了以后，调用这个方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task didFinishCollectingMetrics:(<span class="built_in">NSURLSessionTaskMetrics</span> *)metrics &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当一个task出错的时候，会调用这个方法。如果error是nil，也会调用这个方法，表示task完成。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task</span><br><span class="line">didCompleteWithError:(<span class="keyword">nullable</span> <span class="built_in">NSError</span> *)error&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"数据返回以后，不管有错没错都回调用，如果没错，error及时nil"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-NSURLSessionDataDelegate"><a href="#6-3-NSURLSessionDataDelegate" class="headerlink" title="6.3 NSURLSessionDataDelegate"></a>6.3 NSURLSessionDataDelegate</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当一个task接收到返回信息。当所有信息都接收完毕以后，completionHandler会被调用。我们可以在这里取消一个网络请求或者把一个datatask转换为downloadtask。如果没有实现这个代理方法，我们也可以通过task的response属性获取到对应的数据。background模式的uploadtask不会调用这个方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line">didReceiveResponse:(<span class="built_in">NSURLResponse</span> *)response</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionResponseDisposition</span> disposition))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当一个datatask转换为一个downloadtask以后会调用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line">didBecomeDownloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask&#123;</span><br><span class="line"><span class="comment">// 允许处理服务器的响应，才会继续接收服务器返回的数据</span></span><br><span class="line">    completionHandler(<span class="built_in">NSURLSessionResponseAllow</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 暂时忽略，这个是和数据流相关的。不管了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line">didBecomeStreamTask:(<span class="built_in">NSURLSessionStreamTask</span> *)streamTask&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当data可以使用的时候，调用这个方法。我们可以在这里获取data。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line">    didReceiveData:(<span class="built_in">NSData</span> *)data&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 允许我们在这里调用completionHandler缓存data，或者传入nil来禁止缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line"> willCacheResponse:(<span class="built_in">NSCachedURLResponse</span> *)proposedResponse</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSCachedURLResponse</span> * _Nullable cachedResponse))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-NSURLSessionDownloadDelegate"><a href="#6-4-NSURLSessionDownloadDelegate" class="headerlink" title="6.4 NSURLSessionDownloadDelegate"></a>6.4 NSURLSessionDownloadDelegate</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    当一个下载task任务完成以后，这个方法会被调用。我们可以在这里移动或者复制download的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask</span><br><span class="line">didFinishDownloadingToURL:(<span class="built_in">NSURL</span> *)location&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 获取下载进度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask</span><br><span class="line">      didWriteData:(int64_t)bytesWritten</span><br><span class="line"> totalBytesWritten:(int64_t)totalBytesWritten</span><br><span class="line">totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 重启一个下载任务(比如下载一半后停止然后过一点时间继续)。如果下载出错，`NSURLSessionDownloadTaskResumeData`里面包含重新开始下载的数据。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask</span><br><span class="line"> didResumeAtOffset:(int64_t)fileOffset</span><br><span class="line">expectedTotalBytes:(int64_t)expectedTotalBytes&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-NSURLSession的综合使用案列"><a href="#7-NSURLSession的综合使用案列" class="headerlink" title="7 NSURLSession的综合使用案列"></a>7 NSURLSession的综合使用案列</h2><p>分别用三种不同方式下载一张图片然后在imageView上显示。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> bigPic = <span class="string">@"http://i1.piimg.com/4851/d1498fea89ae3bc1.png"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> smallPic = <span class="string">@"http://i1.piimg.com/4851/97aef4680d359905.png"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">NSURLSessionDelegate</span>&gt;</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)<span class="built_in">NSMutableData</span> *data;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)requestDataTest:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">     [<span class="keyword">self</span> clear];</span><br><span class="line">    <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration] delegate:<span class="keyword">self</span> delegateQueue:[[<span class="built_in">NSOperationQueue</span> alloc] init]];</span><br><span class="line">    <span class="built_in">NSURLRequest</span> *request = [[<span class="built_in">NSURLRequest</span> alloc]initWithURL:[<span class="built_in">NSURL</span> URLWithString:bigPic]];</span><br><span class="line">    <span class="built_in">NSURLSessionDataTask</span> *dataTask = [session dataTaskWithRequest:request];</span><br><span class="line">    [dataTask resume];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)requestDownloadTest:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">     [<span class="keyword">self</span> clear];</span><br><span class="line">    <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration] delegate:<span class="keyword">self</span> delegateQueue:[[<span class="built_in">NSOperationQueue</span> alloc] init]];</span><br><span class="line">    <span class="built_in">NSURLRequest</span> *request = [[<span class="built_in">NSURLRequest</span> alloc]initWithURL:[<span class="built_in">NSURL</span> URLWithString:bigPic]];</span><br><span class="line">    <span class="built_in">NSURLSessionDownloadTask</span> *dataTask = [session downloadTaskWithRequest:request];</span><br><span class="line">    [dataTask resume];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">IBAction</span>)requestBlockTaskTest:(<span class="keyword">id</span>)sender&#123;</span><br><span class="line">    [<span class="keyword">self</span> clear];</span><br><span class="line">    <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sharedSession];</span><br><span class="line">    <span class="built_in">NSURLRequest</span> *request = [[<span class="built_in">NSURLRequest</span> alloc]initWithURL:[<span class="built_in">NSURL</span> URLWithString:bigPic]];</span><br><span class="line">    <span class="built_in">NSURLSessionDataTask</span> *dataTask = [session dataTaskWithRequest:request completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc]initWithData:data];</span><br><span class="line">        <span class="keyword">self</span>.imageView.image = image;</span><br><span class="line">    &#125;];</span><br><span class="line">    [dataTask resume];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)clear&#123;</span><br><span class="line">    <span class="keyword">self</span>.imageView.image = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==============================NSURLSessionDelegate========================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> NSURLSessionDelegate</span></span><br><span class="line"><span class="comment">//当一个session遇到系统错误或者未检测到的错误的时候，就会调用这个方法。</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session didBecomeInvalidWithError:(<span class="keyword">nullable</span> <span class="built_in">NSError</span> *)error&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当请求需要认证、或者https证书认证的时候，我们就需要在这个方法里面处理。</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session didReceiveChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition, <span class="built_in">NSURLCredential</span> * _Nullable credential))completionHandler&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果应用进入后台、这个方法会被调用。我们在这里可以对session发起的请求做各种操作比如请求完成的回调等。</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSessionDidFinishEventsForBackgroundURLSession:(<span class="built_in">NSURLSession</span> *)session &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==================================NSURLSessionTaskDelegate====================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> NSURLSessionTaskDelegate</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当请求重定向的时候调用这个方法。我们必须设置一个新的`NSURLRequest`对象传入completionHandler来重定向新的请求，但是当`session`是background模式的时候，这个方法不会被调用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task</span><br><span class="line">willPerformHTTPRedirection:(<span class="built_in">NSHTTPURLResponse</span> *)response</span><br><span class="line">        newRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLRequest</span> * _Nullable))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当请求需要认证的时候调用这个方法。如果没有实现这个代理，那么请求认证这个过程不会被调用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task</span><br><span class="line">didReceiveChallenge:(<span class="built_in">NSURLAuthenticationChallenge</span> *)challenge</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionAuthChallengeDisposition</span> disposition, <span class="built_in">NSURLCredential</span> * _Nullable credential))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果请求需要一个新的请求体时，这个方法就会被调用。比如认证失败的时候，我们可以通过这个机会从新认证。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task</span><br><span class="line"> needNewBodyStream:(<span class="keyword">void</span> (^)(<span class="built_in">NSInputStream</span> * _Nullable bodyStream))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当我们上传数据的时候，我们可以通过这个代理方法获取上传进度。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task</span><br><span class="line">   didSendBodyData:(int64_t)bytesSent</span><br><span class="line">    totalBytesSent:(int64_t)totalBytesSent</span><br><span class="line">totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当task的统计信息收集好了以后，调用这个方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task didFinishCollectingMetrics:(<span class="built_in">NSURLSessionTaskMetrics</span> *)metrics &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当一个task出错的时候，会调用这个方法。如果error是nil，也会调用这个方法，表示task完成。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task</span><br><span class="line">didCompleteWithError:(<span class="keyword">nullable</span> <span class="built_in">NSError</span> *)error&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"数据返回以后，不管有错没错都回调用，如果没错，error及时nil"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.data) &#123;</span><br><span class="line">        <span class="keyword">self</span>.imageView.image = [<span class="built_in">UIImage</span> imageWithData:<span class="keyword">self</span>.data];</span><br><span class="line">        <span class="keyword">self</span>.data = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==================================NSURLSessionDataDelegate=====================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> NSURLSessionDataDelegate</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当一个task接收到返回信息。当所有信息都接收完毕以后，completionHandler会被调用。我们可以在这里取消一个网络请求或者把一个datatask转换为downloadtask。如果没有实现这个代理方法，我们也可以通过task的response属性获取到对应的数据。background模式的uploadtask不会调用这个方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line">didReceiveResponse:(<span class="built_in">NSURLResponse</span> *)response</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionResponseDisposition</span> disposition))completionHandler&#123;</span><br><span class="line">    <span class="keyword">self</span>.data = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">self</span>.data = [<span class="built_in">NSMutableData</span> data];</span><br><span class="line">    <span class="comment">// 允许处理服务器的响应，才会继续接收服务器返回的数据</span></span><br><span class="line">    completionHandler(<span class="built_in">NSURLSessionResponseAllow</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当一个datatask转换为一个downloadtask以后会调用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line">didBecomeDownloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 暂时忽略，这个是和数据流相关的。不管了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line">didBecomeStreamTask:(<span class="built_in">NSURLSessionStreamTask</span> *)streamTask&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 当data可以使用的时候，调用这个方法。我们可以在这里获取data。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line">    didReceiveData:(<span class="built_in">NSData</span> *)data&#123;</span><br><span class="line">    [<span class="keyword">self</span>.data appendData:data];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"具体数据在URLSession:(NSURLSession *)session task:(NSURLSessionTask *)taskdidCompleteWithError:(nullable NSError *)error处理"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 允许我们在这里调用completionHandler缓存data，或者传入nil来禁止缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line"> willCacheResponse:(<span class="built_in">NSCachedURLResponse</span> *)proposedResponse</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSCachedURLResponse</span> * _Nullable cachedResponse))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//==================================NSURLSessionDownloadTask=================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> NSURLSessionDownloadTask</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    当一个下载task任务完成以后，这个方法会被调用。我们可以在这里移动或者复制download的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask</span><br><span class="line">didFinishDownloadingToURL:(<span class="built_in">NSURL</span> *)location&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *path = location.absoluteString;</span><br><span class="line">    <span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc]initWithData:[<span class="built_in">NSData</span> dataWithContentsOfURL:location]];</span><br><span class="line">    <span class="keyword">self</span>.imageView.image = image;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"数据下载完成以后，会保存在一个location的地方。%@"</span>,location);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 获取下载进度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask</span><br><span class="line">      didWriteData:(int64_t)bytesWritten</span><br><span class="line"> totalBytesWritten:(int64_t)totalBytesWritten</span><br><span class="line">totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"总得数据大小%lld----"</span>,bytesWritten);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 重启一个下载任务(比如下载一半后停止然后过一点时间继续)。如果下载出错，`NSURLSessionDownloadTaskResumeData`里面包含重新开始下载的数据。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session downloadTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask</span><br><span class="line"> didResumeAtOffset:(int64_t)fileOffset</span><br><span class="line">expectedTotalBytes:(int64_t)expectedTotalBytes&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AFNetWorking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Block原理分析详解</title>
      <link href="/2017/04/11/Block%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E8%AF%A6%E8%A7%A3/"/>
      <url>/2017/04/11/Block%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本说明"><a href="#1-基本说明" class="headerlink" title="1 基本说明"></a>1 基本说明</h2><p>Block一直是OC的一个重点、难点、黑科技。Block在日常项目中经常使用，他的实现方式和一般的oc代码不一样。同时也很容易出现使用不慎的情况。我们知道OC的本质是<code>C语言+runtime</code>。<code>runtime</code>中的具体实现完全就是汇编加上C语言。而且我们发现大部分都是通过结构体实现的。我们可以通过<code>clang -rewrite-objc main.m</code>这种命令把包含Block的<code>main.m</code>函数反编译<code>(注意：这里所说的反编译并不是真正的反编译，只是把OC源码转换为对等的C++源码)</code>为为C++的具体实现。下面我就会通过这个命令来分析一下Block转换以后的源码。下面所有列子中转换前的代码都在<code>main.m</code>中，替换后的代码都在<code>mainX.cpp</code>中.</p><h2 id="2-void-block-void-类型解析"><a href="#2-void-block-void-类型解析" class="headerlink" title="2 void (*block)(void)类型解析"></a>2 void (*block)(void)类型解析</h2><p>我们先看一下转换以前的代码。顶一个一个block。只定义一个变量i并且赋值为1。对应的文件为<code>mainX.cpp</code>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^()&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    blk();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是转换以后的代码。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> __block_impl &#123;</span><br><span class="line">    <span class="keyword">void</span> *isa;</span><br><span class="line">    <span class="keyword">int</span> Flags;</span><br><span class="line">    <span class="keyword">int</span> Reserved;</span><br><span class="line">    <span class="keyword">void</span> *FuncPtr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">    <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">    <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line">    __main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">        impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">        impl.Flags = flags;</span><br><span class="line">        impl.FuncPtr = fp;</span><br><span class="line">        Desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> __main_block_desc_0 &#123;</span><br><span class="line">  size_t reserved;</span><br><span class="line">  size_t Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> __main_block_impl_0)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = (  (<span class="keyword">void</span> (*)())  &amp;  __main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA)  );</span><br><span class="line">    </span><br><span class="line">    ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是我截取的关键部分源码，其他还有很多辅助性的代码，这里我们就不用管了。看这段代码我们发现一个简单的block的转换成C++以后增加了很多代码：</p><ul><li>main函数入口，我们可以发现这个函数里面主要初始化了一个<code>__main_block_impl_0</code>的结构体。并且调用结构体的<code>FuncPtr</code>方法。</li><li><code>__main_block_impl_0</code>结构体。这个结构体有一个<code>__block_impl</code>和<code>__main_block_desc_0</code>结构体。以及一个初始化函数。</li><li><code>__block_impl</code>结构体。这个结构体有四个变量。其中我们可以发现有两个很关键的<code>isa</code>和<code>FuncPtr</code>。</li><li><code>__main_block_desc_0</code>结构体。这个结构体包含了两个<code>size_t</code>类型的属性，主要用于记录Block的内存大小。</li><li><code>__main_block_func_0</code>静态方法，我们发现这个方法就是BLock的具体实现。</li></ul><h3 id="2-1具体流程分析"><a href="#2-1具体流程分析" class="headerlink" title="2.1具体流程分析"></a>2.1具体流程分析</h3><p>首先<code>main</code>函数代码。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br><span class="line">    ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把它具体简化以后如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> __main_block_impl_0 tmp = __main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA);</span><br><span class="line"><span class="keyword">struct</span> __main_block_impl_0 *blk = &amp;tmp; </span><br><span class="line">(*blk-&gt;impl.FuncPtr)(blk);</span><br></pre></td></tr></table></figure><ul><li>1首先初始化一个<code>__main_block_impl_0</code>结构体变量。并且传入的参数是<code>__main_block_func_0</code>指向结构体的具体实现。<code>__main_block_desc_0_DATA</code>是<code>__main_block_desc_0</code>结构体的一个变量，主要目的是指定结构体的大小。</li><li>2 把<code>tmp</code>的地址赋值给<code>blk</code>指针。</li><li>3 通过<code>blk</code>找到他的<code>impl</code>属性，然后再通过<code>impl</code>这个<code>__block_impl</code>变量获取<code>FuncPtr</code>函数的地址。然后传入<code>blk</code>的指针作为参数。从而实现OC中的<code>blk();</code>这句话。</li></ul><p>接下来我们看一下<code>__main_block_impl_0</code>这个结构体。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">    <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">    <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line">    __main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">        impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">        impl.Flags = flags;</span><br><span class="line">        impl.FuncPtr = fp;</span><br><span class="line">        Desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个结构体主要有一个初始化函数，通过传入结构体具体实现的函数指针fp，记录大小描述信息的参数desc，已经一个标记为flags。通过他来初始化<code>__block_impl</code>和<code>__main_block_desc_0</code>。</p><p><code>__block_impl</code>这个结构体我们从他的结构发现和OC的类结构体有点像。他的<code>isa</code>属性其实就是OC的<code>isa</code>属性有异曲同工的作用，用于指向结构体的具体类型。<code>FuncPtr</code>函数指针就是指向Block具体实现的函数。</p><h2 id="3-int-block-int-类型解析"><a href="#3-int-block-int-类型解析" class="headerlink" title="3 int (*block)(int)类型解析"></a>3 int (*block)(int)类型解析</h2><p>废话少说，上代码。通过代码我们发现和上面那种没有什么区别。主要是<code>__main_block_func_0</code>函数的实现多了返回值和多了一个参数。具体看代码注释。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="keyword">int</span> (^blk)(<span class="keyword">int</span> i) = ^(<span class="keyword">int</span> i)&#123;</span><br><span class="line">        <span class="keyword">int</span> result =  i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">    blk(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//==============上面是反编译以前的代码==================</span></span><br><span class="line"><span class="keyword">struct</span> __block_impl &#123;</span><br><span class="line">    <span class="keyword">void</span> *isa;<span class="comment">//isa表明结构体类型。</span></span><br><span class="line">    <span class="keyword">int</span> Flags;</span><br><span class="line">    <span class="keyword">int</span> Reserved;</span><br><span class="line">    <span class="keyword">void</span> *FuncPtr;<span class="comment">//指向函数指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这个结构体及时Block反编译以后生成的主要结构。</span></span><br><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">  <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">  <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line">    <span class="comment">//初始化函数</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;<span class="comment">//表示这个Block是存储于栈上。</span></span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;<span class="comment">//函数指针赋值</span></span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这个函数就是Block的具体实现，并且添加了一个默认实现。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself, <span class="keyword">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">int</span> result = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Block的描述信息</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> __main_block_desc_0 &#123;</span><br><span class="line">  size_t reserved;</span><br><span class="line">  size_t Block_size;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//__main_block_desc_0的一个实例，其中Block_size初始化为__main_block_impl_0结构体的大小。</span></span><br><span class="line"><span class="keyword">struct</span> __main_block_desc_0 __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> __main_block_impl_0)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="comment">//int (*blk)(int i) = ((int (*)(int))&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span></span><br><span class="line">    <span class="comment">//上面一行转换为下面两行等价</span></span><br><span class="line">    <span class="keyword">struct</span> __main_block_impl_0 tmp = __main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA);</span><br><span class="line">    <span class="keyword">struct</span> __main_block_impl_0 *blk = &amp;tmp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//int blkRerurn = ((int (*)(__block_impl *, int))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk, 3);</span></span><br><span class="line">    <span class="comment">//下面一行是上面一行的简化版</span></span><br><span class="line">    (*blk-&gt;impl.FuncPtr)(blk,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-带-block变量的void-block-void-类型解析"><a href="#4-带-block变量的void-block-void-类型解析" class="headerlink" title="4 带__block变量的void (*block)(void)类型解析"></a>4 带__block变量的void (*block)(void)类型解析</h2><p>我们发现加入一个带__block标志位的变量以后，代码复杂了很多。具体如下：</p><ul><li>多了<code>__Block_byref_i_0</code>结构体。这个结构体就是__block变量i直接生成的。</li><li>多了两个函数<code>__main_block_copy_0</code>和<code>__main_block_dispose_0</code>。这两个函数主要用于处理block复制的时候，对应的__block变量i的处理。</li><li><code>__main_block_impl_0</code>结构体多了一个<code>__Block_byref_i_0</code>类型的属性i。这个i就是对应于block里面的变量。</li><li><code>__main_block_desc_0</code>结构体多了两个函数。<code>copy</code>和<code>dispose</code>。在初始化结构体的时候，传入上面新增的两个函数作为参数。</li><li>每个<strong>block变量都回生成一个对应的结构体，并且作为`</strong>main_block_impl_0`结构体的属性。</li></ul><p>通过对结构体<code>__main_block_impl_0</code>的初始化函数和<code>__main_block_func_0</code>方法的分析。我们可以得到如下结论：</p><ul><li><strong>block变量i在转换为c语言后直接转换为一个`</strong>Block_byref_i_0`类型的结构体。</li><li><code>__main_block_impl_0</code>结构体中的i指针用于存储__block结构体变量，也就是block里面的那个i对象。</li><li>block外面的那个i其实是block里面的i变量通过<code>i-&gt;__forwarding-&gt;i</code>来获取的。当我们在block里面改变i的值的时候，其实是间接的通过<code>i-&gt;__forwarding-&gt;i</code>来改变。其中第一个i是block里面的变量。第二个i是block外边的变量。这样就解释了为什么block里面改变i的值block外面的i改变的原因。</li><li>非block类型的变量在block里面是直接引用，不会生成专门的结构体。</li></ul><p>同时我们也注意到<code>__main_block_copy_0</code>和<code>__main_block_dispose_0</code>这两个函数，我们虽然不能找到他的具体实现，不过可以根据上下文做一下具体的猜测：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当我们复制block的时候。分别传入两个block的block变量的指针，然后做处理。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_0(<span class="keyword">struct</span> __main_block_impl_0*dst, <span class="keyword">struct</span> __main_block_impl_0*src) &#123;</span><br><span class="line">    _Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;one, (<span class="keyword">void</span>*)src-&gt;one, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当我们销毁一个block后，估计会调用这个函数的block变量的指针，做销毁操作</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_0(<span class="keyword">struct</span> __main_block_impl_0*src) &#123;</span><br><span class="line">    _Block_object_dispose((<span class="keyword">void</span>*)src-&gt;one, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NORMAL</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^Block)();</span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        __block <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        Block block1 = ^()&#123;</span><br><span class="line">            i =  <span class="number">2</span>;</span><br><span class="line">            printf(<span class="string">"%d"</span>,i);</span><br><span class="line">        &#125;;</span><br><span class="line">        block1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//==============上面是反编译以前的代码==================</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (*Block)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> __block_impl &#123;</span><br><span class="line">    <span class="keyword">void</span> *isa;</span><br><span class="line">    <span class="keyword">int</span> Flags;</span><br><span class="line">    <span class="keyword">int</span> Reserved;</span><br><span class="line">    <span class="keyword">void</span> *FuncPtr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这个结构体是专门为了__block变量i生成的。</span></span><br><span class="line"><span class="keyword">struct</span> __Block_byref_i_0 &#123;</span><br><span class="line">  <span class="keyword">void</span> *__isa;</span><br><span class="line">__Block_byref_i_0 *__forwarding;</span><br><span class="line"> <span class="keyword">int</span> __flags;</span><br><span class="line"> <span class="keyword">int</span> __size;</span><br><span class="line"> <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//多了一个__Block_byref_i_0变量</span></span><br><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">  <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">  <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line">  __Block_byref_i_0 *i; <span class="comment">// 多了一个i属性。block变量</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, __Block_byref_i_0 *_i, <span class="keyword">int</span> flags=<span class="number">0</span>) : i(_i-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Block的具体实现。从这里我们发现为啥改变i的值的猫腻。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  __Block_byref_i_0 *i = __cself-&gt;i; <span class="comment">// bound by ref</span></span><br><span class="line"></span><br><span class="line">            (i-&gt;__forwarding-&gt;i) = <span class="number">2</span>;</span><br><span class="line">            printf(<span class="string">"%d"</span>,(i-&gt;__forwarding-&gt;i));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//用于管理i变量的声明周期。复制一个block的时候，复制他对应的i变量。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_0(<span class="keyword">struct</span> __main_block_impl_0*dst, <span class="keyword">struct</span> __main_block_impl_0*src) &#123;</span><br><span class="line">    </span><br><span class="line">    _Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;i, (<span class="keyword">void</span>*)src-&gt;i, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于管理i变量的声明周期</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_0(<span class="keyword">struct</span> __main_block_impl_0*src) &#123;</span><br><span class="line">    _Block_object_dispose((<span class="keyword">void</span>*)src-&gt;i, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多了两个指针函数、</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> __main_block_desc_0 &#123;</span><br><span class="line">  size_t reserved;</span><br><span class="line">  size_t Block_size;</span><br><span class="line">  <span class="keyword">void</span> (*<span class="keyword">copy</span>)(<span class="keyword">struct</span> __main_block_impl_0*, <span class="keyword">struct</span> __main_block_impl_0*);</span><br><span class="line">  <span class="keyword">void</span> (*dispose)(<span class="keyword">struct</span> __main_block_impl_0*);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//实例变量</span></span><br><span class="line"> <span class="keyword">struct</span> __main_block_desc_0 __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class="line"><span class="comment">//入口</span></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="comment">//自动释放池，这里暂不管他</span></span><br><span class="line">     &#123;__AtAutoreleasePool __autoreleasepool;</span><br><span class="line">         </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> NORMAL</span></span><br><span class="line">     __attribute__((__blocks__(<span class="keyword">byref</span>))) __Block_byref_i_0 i;</span><br><span class="line">     i = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(__Block_byref_i_0 *)&amp;i, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_i_0), <span class="number">1</span>&#125;;</span><br><span class="line">         </span><br><span class="line">      Block block1 = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_i_0 *)&amp;i, <span class="number">570425344</span>));</span><br><span class="line">         </span><br><span class="line">         ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)block1)-&gt;FuncPtr)((__block_impl *)block1);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">         <span class="comment">//定义一个__Block_byref_i_0结构体变量。并且初始化</span></span><br><span class="line">         __Block_byref_i_0 i;</span><br><span class="line">         i = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(__Block_byref_i_0 *)&amp;i, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_i_0), <span class="number">1</span>&#125;;</span><br><span class="line">       <span class="comment">//定义一个__main_block_impl_0结构体变量，同时传入i的指针</span></span><br><span class="line">        __main_block_impl_0 tmp = __main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_i_0 *)&amp;i, <span class="number">570425344</span>);</span><br><span class="line">         <span class="comment">//把结构体变量的指针赋值给block1对象</span></span><br><span class="line">        Block block1 = &amp;tmp;</span><br><span class="line">         <span class="comment">//调用解耦固体。就是OC里面的`block1()`</span></span><br><span class="line">         ((*block1-&gt;impl)-&gt;FuncPrt)(block1);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-带全局变量、静态全局变量、局部全局变量类型的Block解析"><a href="#5-带全局变量、静态全局变量、局部全局变量类型的Block解析" class="headerlink" title="5 带全局变量、静态全局变量、局部全局变量类型的Block解析"></a>5 带全局变量、静态全局变量、局部全局变量类型的Block解析</h2><p>从转换以前和转换以后的代码比较。发现<strong>block变量和上面一样，这里就不做具体分析了。但是对于几个非</strong>block变量则有不同情况：</p><ul><li>全局变量<code>global_val</code>和静态全局变量<code>static_global_val</code>转换以前和转换以后调用方式没有任何区别。</li><li>局部静态变量<code>static_val</code>会作为结构体<code>__main_block_impl_0</code>的一个属性。并且这个属性是局部静态变量的一个指针。</li><li>当改变局部静态变量的值的时候，我们通过<code>__main_block_impl_0</code>结构体的<code>static_val</code>属性拿到静态局部变量的指针，然后直接赋值。</li><li>Block直接截取的值静态局部变量的指针。然后对指针操作。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> global_val = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_global_val = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        __block <span class="keyword">int</span> one = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> static_val = <span class="number">2</span>;</span><br><span class="line">        Block block1 = ^()&#123;</span><br><span class="line">            one =  <span class="number">2</span>;</span><br><span class="line">            global_val = global_val + <span class="number">1</span>;</span><br><span class="line">            static_global_val = static_global_val + <span class="number">1</span>;</span><br><span class="line">            static_val = static_val + <span class="number">1</span>;</span><br><span class="line">            printf(<span class="string">"%d--%d--%d--%d"</span>,one,global_val,static_global_val,static_val);</span><br><span class="line">        &#125;;</span><br><span class="line">        block1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//==============上面是反编译以前的代码==================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (*Block)();</span><br><span class="line"><span class="comment">//全局变量和静态全局变量的用法没有任何转变。</span></span><br><span class="line"><span class="keyword">int</span> global_val = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_global_val = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">struct</span> __block_impl &#123;</span><br><span class="line">    <span class="keyword">void</span> *isa;</span><br><span class="line">    <span class="keyword">int</span> Flags;</span><br><span class="line">    <span class="keyword">int</span> Reserved;</span><br><span class="line">    <span class="keyword">void</span> *FuncPtr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> __Block_byref_one_0 &#123;</span><br><span class="line">  <span class="keyword">void</span> *__isa;</span><br><span class="line">__Block_byref_one_0 *__forwarding;</span><br><span class="line"> <span class="keyword">int</span> __flags;</span><br><span class="line"> <span class="keyword">int</span> __size;</span><br><span class="line"> <span class="keyword">int</span> one;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">  <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">  <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line">  <span class="keyword">int</span> *static_val;<span class="comment">//局部静态变量的指针作为结构体的一个属性</span></span><br><span class="line">  __Block_byref_one_0 *one; <span class="comment">// by ref</span></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, <span class="keyword">int</span> *_static_val, __Block_byref_one_0 *_one, <span class="keyword">int</span> flags=<span class="number">0</span>) : static_val(_static_val), one(_one-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  __Block_byref_one_0 *one = __cself-&gt;one; <span class="comment">// bound by ref</span></span><br><span class="line">  <span class="keyword">int</span> *static_val = __cself-&gt;static_val; <span class="comment">// bound by copy</span></span><br><span class="line">    (one-&gt;__forwarding-&gt;one) = <span class="number">2</span>;</span><br><span class="line">    global_val = global_val + <span class="number">1</span>;</span><br><span class="line">    static_global_val = static_global_val + <span class="number">1</span>;</span><br><span class="line">    (*static_val) = (*static_val) + <span class="number">1</span>;</span><br><span class="line">    printf(<span class="string">"%d--%d--%d--%d"</span>,(one-&gt;__forwarding-&gt;one),global_val,static_global_val,(*static_val));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_0(<span class="keyword">struct</span> __main_block_impl_0*dst, <span class="keyword">struct</span> __main_block_impl_0*src) &#123;</span><br><span class="line">    _Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;one, (<span class="keyword">void</span>*)src-&gt;one, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_0(<span class="keyword">struct</span> __main_block_impl_0*src) &#123;</span><br><span class="line">    _Block_object_dispose((<span class="keyword">void</span>*)src-&gt;one, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> __main_block_desc_0 &#123;</span><br><span class="line">  size_t reserved;</span><br><span class="line">  size_t Block_size;</span><br><span class="line">  <span class="keyword">void</span> (*<span class="keyword">copy</span>)(<span class="keyword">struct</span> __main_block_impl_0*, <span class="keyword">struct</span> __main_block_impl_0*);</span><br><span class="line">  <span class="keyword">void</span> (*dispose)(<span class="keyword">struct</span> __main_block_impl_0*);</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="comment">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class="line">        __attribute__((__blocks__(<span class="keyword">byref</span>))) __Block_byref_one_0 one = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(__Block_byref_one_0 *)&amp;one, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_one_0), <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> static_val = <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Block block1 = ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, &amp;static_val, (__Block_byref_one_0 *)&amp;one, 570425344));</span></span><br><span class="line">        <span class="comment">//上面这行转换为下面这行</span></span><br><span class="line">        __main_block_impl_0 tmp = __main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, &amp;static_val, (__Block_byref_one_0 *)&amp;one, <span class="number">570425344</span>);</span><br><span class="line">        Block block1 = (<span class="keyword">void</span> (*)())&amp;tmp;</span><br><span class="line">        </span><br><span class="line">        ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)block1)-&gt;FuncPtr)((__block_impl *)block1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h2><p>通过测试、我发现同一种类型的Block实例变量，会分别生成对应的<code>__main_block_impl_X</code>,<code>__main_block_func_X</code>,<code>__main_block_desc_X</code>,<code>__main_block_copy_X</code>,<code>__main_block_dispose_X</code>。但是会共用相同的<code>__block_impl</code>。如果多个Block(不管是不是同一种类型)使用同一个<strong>block变量，则会共享相同的`</strong>Block_byref_YYY_X`结构体。</p><p>把一个Block变量赋值给另一个Block变量。则相当于被复制的Block变量有两个引用，并不会生成一套对应的结构体。</p><p>判断Block是不是同一种类型，只与返回变量、参数类型相关。与通过宏定义的名字无关。</p><p>具体源码位置<a href="https://github.com/huang303513/iOSKeyPointExploration/tree/master/Block%E5%8F%8D%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">源码地址</a>。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Block </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebViewJavascriptBridge原理解析</title>
      <link href="/2017/04/01/WebViewJavascriptBridge%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
      <url>/2017/04/01/WebViewJavascriptBridge%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h2><p>我们的项目是一个OC与javascript重度交互的app，OC与javascript交互的那部分是在<a href="https://github.com/marcuswestin/WebViewJavascriptBridge">WebViewJavascriptBridge的github地址</a>的基础上修改的，WebViewJavascriptBridge应该是当前最流行最成功的OC与Web交互实现了。最近看了一下他的实现原理，顺便也为后面项目扩展打下基础。<br>为了简化讲解过程，我忽略了UIWebView的实现过程，只解析WKWebView的实现过程。</p><p>我们可以在OC中调用javascript方法，但是反过来不能在javascript中调用OC方法。所以<code>WebViewJavascriptBridge</code>的实现过程就是在OC环境和javascript环境各自保存一个相互调用的信息。每一个调用之间都有id和callbackid来找到两个环境对应的处理。下图是我对于每个类的讲解：</p><p><img src="/assets/postImages/2017040501.png" alt="img"></p><ul><li>nouse文件夹下面的文件是与UIWebView相关的东西，我们暂时不管，基本原理和WKWebView一样。其中<code>WebViewJavascriptBridge_JS.m</code>中是javascript代码，为了方便理解，我直接新建了一个<code>WebViewJavascriptBridge_JS.js</code>文件来代替，方便后面解析。</li><li><code>WebViewJavascriptBridge_JS.js</code>文件中是javascript环境的bridge初始化和处理，里面负责接收oc发给javascript的消息，并且把javascript环境的消息发送给oc。</li><li><code>WKWebViewJavascriptBridge.m</code>主要负责OC环境的消息处理，并且把OC环境的消息发送给javascript环境。</li><li><code>WebViewJavascriptBridgeBase.m</code>主要实现了OC环境的bridge初始化和处理。</li><li><code>ExampleApp.html</code>主要用于模拟生产环境下的web端。</li></ul><h2 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h2><h3 id="1、OC环境初始化"><a href="#1、OC环境初始化" class="headerlink" title="1、OC环境初始化"></a>1、OC环境初始化</h3><p>我们从OC环境的初始化开始。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化一个OC环境的桥WKWebViewJavascriptBridge并且初始化。</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)bridgeForWebView:(<span class="built_in">WKWebView</span>*)webView &#123;</span><br><span class="line">    <span class="built_in">WKWebViewJavascriptBridge</span>* bridge = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">    <span class="comment">//调用下面那个方法</span></span><br><span class="line">    [bridge _setupInstance:webView];</span><br><span class="line">    [bridge reset];</span><br><span class="line">    <span class="keyword">return</span> bridge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">- (<span class="keyword">void</span>) _setupInstance:(<span class="built_in">WKWebView</span>*)webView &#123;</span><br><span class="line">    _webView = webView;</span><br><span class="line">    _webView.navigationDelegate = <span class="keyword">self</span>;</span><br><span class="line">    _base = [[WebViewJavascriptBridgeBase alloc] init];</span><br><span class="line">    _base.delegate = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//messageHandlers用于保存OC环境注册的方法，key是方法名，value是这个方法对应的回调block</span></span><br><span class="line"><span class="comment">//startupMessageQueue用于保存是实话过程中需要发送给javascirpt环境的消息。</span></span><br><span class="line"><span class="comment">//responseCallbacks用于保存OC于javascript环境相互调用的回调模块。通过_uniqueId加上时间戳来确定每个调用的回调。</span></span><br><span class="line">- (<span class="keyword">id</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.messageHandlers = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">        <span class="keyword">self</span>.startupMessageQueue = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">        <span class="keyword">self</span>.responseCallbacks = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">        _uniqueId = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有与javascript之间交互的信息都存储在<code>messageHandlers</code>和<code>responseCallbacks</code>中。这两个属性记录了OC环境与javascript交互的信息。</p><h3 id="2、OC环境注册方法"><a href="#2、OC环境注册方法" class="headerlink" title="2、OC环境注册方法"></a>2、OC环境注册方法</h3><p>注册一个OC方法<code>OC提供方法给JS调用</code>给javascript调用，并且把他的回调实现保存在<code>messageHandlers</code>中。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[_bridge registerHandler:<span class="string">@"OC提供方法给JS调用"</span> handler:^(<span class="keyword">id</span> data, WVJBResponseCallback responseCallback) &#123;</span><br><span class="line">    <span class="comment">//NSLog(@"testObjcCallback called: %@", data);</span></span><br><span class="line">    responseCallback(<span class="string">@"OC发给JS的返回值"</span>);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)registerHandler:(<span class="built_in">NSString</span> *)handlerName handler:(WVJBHandler)handler &#123;</span><br><span class="line">    _base.messageHandlers[handlerName] = [handler <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、Web环境初始化"><a href="#3、Web环境初始化" class="headerlink" title="3、Web环境初始化"></a>3、Web环境初始化</h3><p>加载Web环境的html,这里就是<code>ExampleAPP.html</code>文件,我删除了非关键部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupWebViewJavascriptBridge</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"> <span class="comment">//第一次调用这个方法的时候，为false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = callback(WebViewJavascriptBridge);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一次调用的时候，也是false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WVJBCallbacks) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="built_in">window</span>.WVJBCallbacks.push(callback);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把callback对象赋值给对象。</span></span><br><span class="line">    <span class="built_in">window</span>.WVJBCallbacks = [callback];</span><br><span class="line">    <span class="comment">//这段代码的意思就是执行加载WebViewJavascriptBridge_JS.js中代码的作用</span></span><br><span class="line">    <span class="keyword">var</span> WVJBIframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">    WVJBIframe.style.display = <span class="string">'none'</span>;</span><br><span class="line">    WVJBIframe.src = <span class="string">'https://__bridge_loaded__'</span>;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.appendChild(WVJBIframe);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.documentElement.removeChild(WVJBIframe)</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//setupWebViewJavascriptBridge执行的时候传入的参数，这是一个方法。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">bridge</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> uniqueId = <span class="number">1</span></span><br><span class="line"><span class="comment">//把WEB中要注册的方法注册到bridge里面</span></span><br><span class="line">bridge.registerHandler(<span class="string">'OC调用JS提供的方法'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</span><br><span class="line">log(<span class="string">'OC调用JS方法成功'</span>, data)</span><br><span class="line"><span class="keyword">var</span> responseData = &#123; <span class="string">'JS给OC调用的回调'</span>:<span class="string">'回调值!'</span> &#125;</span><br><span class="line">log(<span class="string">'OC调用JS的返回值'</span>, responseData)</span><br><span class="line">responseCallback(responseData)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//驱动所有hander的初始化</span></span><br><span class="line">setupWebViewJavascriptBridge(callback);</span><br></pre></td></tr></table></figure><p>我们调用<code>setupWebViewJavascriptBridge</code>函数，并且这个函数传入的callback也是一个函数。callback函数中有我们在javascript环境中注册的<code>OC调用JS提供的方法</code>方法。<code>setupWebViewJavascriptBridge</code>的实现过程中我们可以发现，如果不是第一次初始化，会通过<code>window.WebViewJavascriptBridge</code>或者<code>window.WVJBCallbacks</code>两个判断返回。</p><p>iframe可以理解为webview中的窗口，当我们改变iframe的src属性的时候，相当于我们浏览器实现了链接的跳转。比如从<code>www.baidu.com</code>跳转到<code>www.google.com</code>。下面这段代码的目的就是实现一个到<code>https://__bridge_loaded__</code>的跳转。从而达到初始化javascript环境的bridge的作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这段代码的意思就是执行加载WebViewJavascriptBridge_JS.js中代码的作用</span></span><br><span class="line"><span class="keyword">var</span> WVJBIframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">WVJBIframe.style.display = <span class="string">'none'</span>;</span><br><span class="line">WVJBIframe.src = <span class="string">'https://__bridge_loaded__'</span>;</span><br><span class="line"><span class="built_in">document</span>.documentElement.appendChild(WVJBIframe);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.removeChild(WVJBIframe)</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>我们知道只要webview有跳转，就会调用webview的代理方法。我们重点看下面这个代理方法。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler &#123;</span><br><span class="line">    <span class="keyword">if</span> (webView != _webView) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="built_in">NSURL</span> *url = navigationAction.request.URL;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"点开URL%@"</span>,url);</span><br><span class="line">    __<span class="keyword">strong</span> <span class="keyword">typeof</span>(_webViewDelegate) strongDelegate = _webViewDelegate;</span><br><span class="line">    <span class="comment">//如果是WebViewJavascriptBridge发送或者接受的消息，则特殊处理。否则按照正常流程处理。</span></span><br><span class="line">    <span class="keyword">if</span> ([_base isWebViewJavascriptBridgeURL:url]) &#123;</span><br><span class="line">        <span class="comment">//1第一次注入JS代码</span></span><br><span class="line">        <span class="keyword">if</span> ([_base isBridgeLoadedURL:url]) &#123;</span><br><span class="line">            [_base injectJavascriptFile];</span><br><span class="line">        <span class="comment">//处理WEB发过来的消息</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([_base isQueueMessageURL:url]) &#123;</span><br><span class="line">            [<span class="keyword">self</span> <span class="built_in">WKFlushMessageQueue</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [_base logUnkownMessage:url];</span><br><span class="line">        &#125;</span><br><span class="line">        decisionHandler(<span class="built_in">WKNavigationActionPolicyCancel</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面是webview的正常代理执行流程，不用管。</span></span><br><span class="line">    <span class="keyword">if</span> (strongDelegate &amp;&amp; [strongDelegate respondsToSelector:<span class="keyword">@selector</span>(webView:decidePolicyForNavigationAction:decisionHandler:)]) &#123;</span><br><span class="line">        [_webViewDelegate webView:webView decidePolicyForNavigationAction:navigationAction decisionHandler:decisionHandler];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        decisionHandler(<span class="built_in">WKNavigationActionPolicyAllow</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，我们首先通过<code>[_base isWebViewJavascriptBridgeURL:url]</code>来判断是否是普通的跳转还是<code>webViewjavascriptBridege</code>的跳转。如果是<code>__bridge_loaded__</code>表示是初始化javascript环境的消息，如果是<code>__wvjb_queue_message__</code>则表示是发送javascript消息。<code>https://__bridge_loaded__</code>显然是第一种消息。OC具体具体判断逻辑代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kOldProtocolScheme @<span class="meta-string">"wvjbscheme"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kNewProtocolScheme @<span class="meta-string">"https"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kQueueHasMessage   @<span class="meta-string">"__wvjb_queue_message__"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kBridgeLoaded      @<span class="meta-string">"__bridge_loaded__"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//是否是WebViewJavascriptBridge框架相关的链接</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isWebViewJavascriptBridgeURL:(<span class="built_in">NSURL</span>*)url &#123;</span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> isSchemeMatch:url]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BOOL</span> result =  [<span class="keyword">self</span> isBridgeLoadedURL:url] || [<span class="keyword">self</span> isQueueMessageURL:url];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    是否是WebViewJavascriptBridge发送或者接受的消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isSchemeMatch:(<span class="built_in">NSURL</span>*)url &#123;</span><br><span class="line">    <span class="built_in">NSString</span>* scheme = url.scheme.lowercaseString;</span><br><span class="line">    <span class="built_in">BOOL</span> result = [scheme isEqualToString:kNewProtocolScheme] || [scheme isEqualToString:kOldProtocolScheme];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是WebViewJavascriptBridge发送的消息还是WebViewJavascriptBridge的初始化消息。</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isQueueMessageURL:(<span class="built_in">NSURL</span>*)url &#123;</span><br><span class="line">    <span class="built_in">NSString</span>* host = url.host.lowercaseString;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> isSchemeMatch:url] &amp;&amp; [host isEqualToString:kQueueHasMessage];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否是https://__bridge_loaded__这种初始化加载消息</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isBridgeLoadedURL:(<span class="built_in">NSURL</span>*)url &#123;</span><br><span class="line">    <span class="built_in">NSString</span>* host = url.host.lowercaseString;</span><br><span class="line">    <span class="built_in">BOOL</span> result = [<span class="keyword">self</span> isSchemeMatch:url] &amp;&amp; [host isEqualToString:kBridgeLoaded];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来调用<code>[_base injectJavascriptFile]</code>方法，这个方法的作用就是把<code>WebViewJavascriptBridge_JS.js</code>中的方法注入到webview中并且执行，从而达到初始化javascript环境的brige的作用。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化的是否注入WebViewJavascriptBridge_JS.js</span></span><br><span class="line">- (<span class="keyword">void</span>)injectJavascriptFile &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *js;</span><br><span class="line">    <span class="comment">//WebViewJavascriptBridge_JS.js文件内容其实就是WebViewJavascriptBridge_JS.m对应的内容，我只是把它整理方便阅读。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        js = [<span class="built_in">NSString</span> stringWithContentsOfFile:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"WebViewJavascriptBridge_JS.js"</span> ofType:<span class="literal">nil</span>] encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        js = WebViewJavascriptBridge_js();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把javascript代码注入webview中执行,这里执行具体的注入操作。</span></span><br><span class="line">    [<span class="keyword">self</span> _evaluateJavascript:js];</span><br><span class="line">    <span class="comment">//如果javascript环境初始化完成以后，有startupMessageQueue消息。则立即发送消息。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.startupMessageQueue) &#123;</span><br><span class="line">        <span class="built_in">NSArray</span>* queue = <span class="keyword">self</span>.startupMessageQueue;</span><br><span class="line">        <span class="keyword">self</span>.startupMessageQueue = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> queuedMessage <span class="keyword">in</span> queue) &#123;</span><br><span class="line">            [<span class="keyword">self</span> _dispatchMessage:queuedMessage];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把javascript代码写入webview</span></span><br><span class="line">- (<span class="built_in">NSString</span>*) _evaluateJavascript:(<span class="built_in">NSString</span>*)javascriptCommand &#123;</span><br><span class="line">    [_webView evaluateJavaScript:javascriptCommand completionHandler:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、WebViewJavascriptBridge-JS-js解析"><a href="#3、WebViewJavascriptBridge-JS-js解析" class="headerlink" title="3、WebViewJavascriptBridge_JS.js解析"></a>3、WebViewJavascriptBridge_JS.js解析</h3><p>上面我们讲到了注入javascript方法到webview中。具体的代码就是<code>WebViewJavascriptBridge_JS.js</code>这个文件中的方法。我们通过分析这个文件的代码可以知道javascript环境的bridge是如何初始化的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果已经初始化了，则返回。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.onerror) &#123;</span><br><span class="line">        <span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">msg, url, line</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"WebViewJavascriptBridge: ERROR:"</span> + msg + <span class="string">"@"</span> + url + <span class="string">":"</span> + line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化一些属性。</span></span><br><span class="line">    <span class="keyword">var</span> messagingIframe;</span><br><span class="line">    <span class="comment">//用于存储消息列表</span></span><br><span class="line">    <span class="keyword">var</span> sendMessageQueue = [];</span><br><span class="line">    <span class="comment">//用于存储消息</span></span><br><span class="line">    <span class="keyword">var</span> messageHandlers = &#123;&#125;;</span><br><span class="line">    <span class="comment">//通过下面两个协议组合来确定是否是特定的消息，然后拦击。</span></span><br><span class="line">    <span class="keyword">var</span> CUSTOM_PROTOCOL_SCHEME = <span class="string">'https'</span>;</span><br><span class="line">    <span class="keyword">var</span> QUEUE_HAS_MESSAGE = <span class="string">'__wvjb_queue_message__'</span>;</span><br><span class="line">    <span class="comment">//oc调用js的回调</span></span><br><span class="line">    <span class="keyword">var</span> responseCallbacks = &#123;&#125;;</span><br><span class="line">    <span class="comment">//消息对应的id</span></span><br><span class="line">    <span class="keyword">var</span> uniqueId = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//是否设置消息超时</span></span><br><span class="line">    <span class="keyword">var</span> dispatchMessagesWithTimeoutSafety = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//web端注册一个消息方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">registerHandler</span>(<span class="params">handlerName, handler</span>) </span>&#123;</span><br><span class="line">        messageHandlers[handlerName] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//web端调用一个OC注册的消息</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callHandler</span>(<span class="params">handlerName, data, responseCallback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">2</span> &amp;&amp; <span class="keyword">typeof</span> data == <span class="string">'function'</span>) &#123;</span><br><span class="line">            responseCallback = data;</span><br><span class="line">            data = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _doSend(&#123; <span class="attr">handlerName</span>: handlerName, <span class="attr">data</span>: data &#125;, responseCallback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">disableJavscriptAlertBoxSafetyTimeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        dispatchMessagesWithTimeoutSafety = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//把消息转换成JSON字符串返回</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_fetchQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> messageQueueString = <span class="built_in">JSON</span>.stringify(sendMessageQueue);</span><br><span class="line">        sendMessageQueue = [];</span><br><span class="line">        <span class="keyword">return</span> messageQueueString;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//OC调用JS的入口方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_handleMessageFromObjC</span>(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">        _dispatchMessageFromObjC(messageJSON);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化桥接对象，OC可以通过WebViewJavascriptBridge来调用JS里面的各种方法。</span></span><br><span class="line">    <span class="built_in">window</span>.WebViewJavascriptBridge = &#123;</span><br><span class="line">        registerHandler: registerHandler,</span><br><span class="line">        callHandler: callHandler,</span><br><span class="line">        disableJavscriptAlertBoxSafetyTimeout: disableJavscriptAlertBoxSafetyTimeout,</span><br><span class="line">        _fetchQueue: _fetchQueue,</span><br><span class="line">        _handleMessageFromObjC: _handleMessageFromObjC</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理从OC返回的消息。</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_dispatchMessageFromObjC</span>(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dispatchMessagesWithTimeoutSafety) &#123;</span><br><span class="line">            setTimeout(_doDispatchMessageFromObjC);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _doDispatchMessageFromObjC();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">_doDispatchMessageFromObjC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(messageJSON);</span><br><span class="line">            <span class="keyword">var</span> messageHandler;</span><br><span class="line">            <span class="keyword">var</span> responseCallback;</span><br><span class="line">            <span class="comment">//回调</span></span><br><span class="line">            <span class="keyword">if</span> (message.responseId) &#123;</span><br><span class="line">                responseCallback = responseCallbacks[message.responseId];</span><br><span class="line">                <span class="keyword">if</span> (!responseCallback) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                responseCallback(message.responseData);</span><br><span class="line">                <span class="keyword">delete</span> responseCallbacks[message.responseId];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//主动调用</span></span><br><span class="line">                <span class="keyword">if</span> (message.callbackId) &#123;</span><br><span class="line">                    <span class="keyword">var</span> callbackResponseId = message.callbackId;</span><br><span class="line">                    responseCallback = <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">                        _doSend(&#123; <span class="attr">handlerName</span>: message.handlerName, <span class="attr">responseId</span>: callbackResponseId, <span class="attr">responseData</span>: responseData &#125;);</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取JS注册的函数</span></span><br><span class="line">                <span class="keyword">var</span> handler = messageHandlers[message.handlerName];</span><br><span class="line">                <span class="keyword">if</span> (!handler) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"WebViewJavascriptBridge: WARNING: no handler for message from ObjC:"</span>, message);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//调用JS中的对应函数处理</span></span><br><span class="line">                    handler(message.data, responseCallback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把消息从JS发送到OC，执行具体的发送操作。</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_doSend</span>(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">            <span class="keyword">var</span> callbackId = <span class="string">'cb_'</span> + (uniqueId++) + <span class="string">'_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">            <span class="comment">//存储消息的回调ID</span></span><br><span class="line">            responseCallbacks[callbackId] = responseCallback;</span><br><span class="line">            <span class="comment">//把消息对应的回调ID和消息一起发送，以供消息返回以后使用。</span></span><br><span class="line">            message[<span class="string">'callbackId'</span>] = callbackId;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把消息放入消息列表</span></span><br><span class="line">        sendMessageQueue.push(message);</span><br><span class="line">        <span class="comment">//下面这句话会出发JS对OC的调用</span></span><br><span class="line">        <span class="comment">//让webview执行跳转操作，从而可以在</span></span><br><span class="line">        <span class="comment">//webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler 中拦截到JS发给OC的消息</span></span><br><span class="line">        messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    messagingIframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">    messagingIframe.style.display = <span class="string">'none'</span>;</span><br><span class="line">    <span class="comment">//messagingIframe.body.style.backgroundColor="#0000ff";</span></span><br><span class="line">    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.appendChild(messagingIframe);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册_disableJavascriptAlertBoxSafetyTimeout方法，让OC可以关闭回调超时，默认是开启的。</span></span><br><span class="line">    registerHandler(<span class="string">"_disableJavascriptAlertBoxSafetyTimeout"</span>, disableJavscriptAlertBoxSafetyTimeout);</span><br><span class="line">    <span class="comment">//执行_callWVJBCallbacks方法</span></span><br><span class="line">    setTimeout(_callWVJBCallbacks, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化WEB中注册的方法。这个方法会把WEB中的hander注册到bridge中。</span></span><br><span class="line">    <span class="comment">//下面的代码其实就是执行WEB中的callback函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_callWVJBCallbacks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> callbacks = <span class="built_in">window</span>.WVJBCallbacks;</span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">window</span>.WVJBCallbacks;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; callbacks.length; i++) &#123;</span><br><span class="line">            callbacks[i](WebViewJavascriptBridge);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>其实我们发现整个js文件就是一个立即执行的javascript方法。</p><ul><li>首先我们发现会初始化一个WebViewJavascriptBridge对象。并且这个对象是赋值给window对象，这里window对象可以理解为webview。所以说我们后面在OC环境中如果要调用js方法，就可以通过<code>window.WebViewJavascriptBridge</code>在加上具体方法来调用。</li><li>WebViewJavascriptBridge对象中有javascript环境注入的提供给OC调用的方法registerHandler，javascript调用OC环境方法的callHandler。</li><li>_fetchQueue这个方法的作用就是把javascript环境的方法序列化成JSON字符串，然后传入OC环境再转换。</li><li>_handleMessageFromObjC就是处理OC发给javascript环境的方法。</li></ul><p>在这个文件中也初始化了一个iframe实现webview的url跳转功能，从而激发webview代理方法的调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">messagingIframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">messagingIframe.style.display = <span class="string">'none'</span>;</span><br><span class="line"><span class="comment">//messagingIframe.body.style.backgroundColor="#0000ff";</span></span><br><span class="line">messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line"><span class="built_in">document</span>.documentElement.appendChild(messagingIframe);</span><br></pre></td></tr></table></figure><p>上面的src就是<code>https://__wvjb_queue_message__/</code>。这个是javascript发送的OC的第一条消息，目的和上面OC环境的startupMessageQueue一样，就是在javascript环境初始化完成以后，把javascript要发送给OC的消息立即发送出去。</p><p>然后我们看文件的最后面有如下代码。这段代码的作用就是立即执行ExampleApp.html中的callback方法。callback中传入的bridge参数就是我们这里初始化的window.WebViewJavascriptBridge对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行_callWVJBCallbacks方法</span></span><br><span class="line">setTimeout(_callWVJBCallbacks, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化WEB中注册的方法。这个方法会把WEB中的hander注册到bridge中。</span></span><br><span class="line"><span class="comment">//下面的代码其实就是执行WEB中的callback函数。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_callWVJBCallbacks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> callbacks = <span class="built_in">window</span>.WVJBCallbacks;</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">window</span>.WVJBCallbacks;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; callbacks.length; i++) &#123;</span><br><span class="line">        callbacks[i](WebViewJavascriptBridge);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直到这里，OC环境和javascript环境的bridege都建立完毕。OC和javascript环境都有一个bridge对象，这个对象都保存着注册的每个方法和回调，并且维护着各自的消息队列、回调id、requestId等一系列信息。</p><h2 id="OC发消息给WEB"><a href="#OC发消息给WEB" class="headerlink" title="OC发消息给WEB"></a>OC发消息给WEB</h2><p>OC要调用javascript环境的方法，其实就是调用<code>ExampleApp.html</code>中的<code>bridge.registerHandler</code>注册的方法。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击按钮开始一个OC消息.ExampleWKWebViewController.m中一个方法开始。</span></span><br><span class="line">- (<span class="keyword">void</span>)callHandler:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="keyword">id</span> data = @&#123; <span class="string">@"OC调用JS方法"</span>: <span class="string">@"OC调用JS方法的参数"</span> &#125;;</span><br><span class="line">    [_bridge callHandler:<span class="string">@"OC调用JS提供的方法"</span> data:data responseCallback:^(<span class="keyword">id</span> response) &#123;</span><br><span class="line">       <span class="comment">// NSLog(@"testJavascriptHandler responded: %@", response);</span></span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    handerName:OC调用JS提供的方法</span></span><br><span class="line"><span class="comment">    data:&#123;@"OC调用JS方法的参数":@"OC调用JS方法"&#125;</span></span><br><span class="line"><span class="comment">    responseCallback:回调block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)callHandler:(<span class="built_in">NSString</span> *)handlerName data:(<span class="keyword">id</span>)data responseCallback:(WVJBResponseCallback)responseCallback &#123;</span><br><span class="line">    [_base sendData:data responseCallback:responseCallback handlerName:handlerName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把所有信息存入一个名字为message的字典中。里面拼装好参数<code>data</code>、回调ID<code>callbackId</code>、消息名字<code>handlerName</code>。具体如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)sendData:(<span class="keyword">id</span>)data responseCallback:(WVJBResponseCallback)responseCallback handlerName:(<span class="built_in">NSString</span>*)handlerName &#123;</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span>* message = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        message[<span class="string">@"data"</span>] = data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="built_in">NSString</span>* callbackId = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"objc_cb_%ld"</span>, ++_uniqueId];</span><br><span class="line">        <span class="keyword">self</span>.responseCallbacks[callbackId] = [responseCallback <span class="keyword">copy</span>];</span><br><span class="line">        message[<span class="string">@"callbackId"</span>] = callbackId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (handlerName) &#123;</span><br><span class="line">        message[<span class="string">@"handlerName"</span>] = handlerName;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> _queueMessage:message];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把OC消息序列化、并且转化为javascript环境的格式。然后在主线程中调用_evaluateJavascript。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把消息发送给WEB环境</span></span><br><span class="line">- (<span class="keyword">void</span>)_dispatchMessage:(WVJBMessage*)message &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *messageJSON = [<span class="keyword">self</span> _serializeMessage:message pretty:<span class="literal">NO</span>];</span><br><span class="line">    [<span class="keyword">self</span> _log:<span class="string">@"SEND"</span> json:messageJSON];</span><br><span class="line">    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:<span class="string">@"\\"</span> withString:<span class="string">@"\\\\"</span>];</span><br><span class="line">    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:<span class="string">@"\""</span> withString:<span class="string">@"\\\""</span>];</span><br><span class="line">    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:<span class="string">@"\'"</span> withString:<span class="string">@"\\\'"</span>];</span><br><span class="line">    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:<span class="string">@"\n"</span> withString:<span class="string">@"\\n"</span>];</span><br><span class="line">    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:<span class="string">@"\r"</span> withString:<span class="string">@"\\r"</span>];</span><br><span class="line">    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:<span class="string">@"\f"</span> withString:<span class="string">@"\\f"</span>];</span><br><span class="line">    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:<span class="string">@"\u2028"</span> withString:<span class="string">@"\\u2028"</span>];</span><br><span class="line">    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:<span class="string">@"\u2029"</span> withString:<span class="string">@"\\u2029"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span>* javascriptCommand = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"WebViewJavascriptBridge._handleMessageFromObjC('%@');"</span>, messageJSON];</span><br><span class="line">    <span class="keyword">if</span> ([[<span class="built_in">NSThread</span> currentThread] isMainThread]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> _evaluateJavascript:javascriptCommand];</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">dispatch_sync</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            [<span class="keyword">self</span> _evaluateJavascript:javascriptCommand];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体注入的javascript字符串如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebViewJavascriptBridge._handleMessageFromObjC(&#39;&#123;\&quot;callbackId\&quot;:\&quot;objc_cb_1\&quot;,\&quot;data\&quot;:&#123;\&quot;OC调用JS方法\&quot;:\&quot;OC调用JS方法的参数\&quot;&#125;,\&quot;handlerName\&quot;:\&quot;OC调用JS提供的方法\&quot;&#125;&#39;);</span><br></pre></td></tr></table></figure><p>其实就是通过javascript环境中的Bridge对象的<code>_handleMessageFromObjC</code>方法。下面我们去<code>WebViewJavascriptBridege_JS.js</code>中看<code>_handleMessageFromObjC</code>的处理过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理从OC返回的消息。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_dispatchMessageFromObjC</span>(<span class="params">messageJSON</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dispatchMessagesWithTimeoutSafety) &#123;</span><br><span class="line">        setTimeout(_doDispatchMessageFromObjC);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _doDispatchMessageFromObjC();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_doDispatchMessageFromObjC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> message = <span class="built_in">JSON</span>.parse(messageJSON);</span><br><span class="line">        <span class="keyword">var</span> messageHandler;</span><br><span class="line">        <span class="keyword">var</span> responseCallback;</span><br><span class="line">        <span class="comment">//回调</span></span><br><span class="line">        <span class="keyword">if</span> (message.responseId) &#123;</span><br><span class="line">            responseCallback = responseCallbacks[message.responseId];</span><br><span class="line">            <span class="keyword">if</span> (!responseCallback) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            responseCallback(message.responseData);</span><br><span class="line">            <span class="keyword">delete</span> responseCallbacks[message.responseId];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//主动调用</span></span><br><span class="line">            <span class="keyword">if</span> (message.callbackId) &#123;</span><br><span class="line">                <span class="keyword">var</span> callbackResponseId = message.callbackId;</span><br><span class="line">                responseCallback = <span class="function"><span class="keyword">function</span>(<span class="params">responseData</span>) </span>&#123;</span><br><span class="line">                    _doSend(&#123; <span class="attr">handlerName</span>: message.handlerName, <span class="attr">responseId</span>: callbackResponseId, <span class="attr">responseData</span>: responseData &#125;);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取JS注册的函数</span></span><br><span class="line">            <span class="keyword">var</span> handler = messageHandlers[message.handlerName];</span><br><span class="line">            <span class="keyword">if</span> (!handler) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"WebViewJavascriptBridge: WARNING: no handler for message from ObjC:"</span>, message);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//调用JS中的对应函数处理</span></span><br><span class="line">                handler(message.data, responseCallback);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码很容易理解，其实就是如果消息中有callbackId则表示是一个回调。直接调用_doSend方法把信息返回OC。否则就是Web环境主动调用OC的情况。此时把callbackID、handlerName、responseCallback封装进一个message对象中保存起来(其实你会发现和OC环境的bridge处理一样)。然后通过_doSend发消息发送到OC环境。下面我们看看_doSend的具体实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把消息从JS发送到OC，执行具体的发送操作。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_doSend</span>(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="keyword">var</span> callbackId = <span class="string">'cb_'</span> + (uniqueId++) + <span class="string">'_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="comment">//存储消息的回调ID</span></span><br><span class="line">        responseCallbacks[callbackId] = responseCallback;</span><br><span class="line">        <span class="comment">//把消息对应的回调ID和消息一起发送，以供消息返回以后使用。</span></span><br><span class="line">        message[<span class="string">'callbackId'</span>] = callbackId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把消息放入消息列表</span></span><br><span class="line">    sendMessageQueue.push(message);</span><br><span class="line">    <span class="comment">//下面这句话会出发JS对OC的调用</span></span><br><span class="line">    <span class="comment">//让webview执行跳转操作，从而可以在</span></span><br><span class="line">    <span class="comment">//webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler 中拦截到JS发给OC的消息</span></span><br><span class="line">    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中最重要还是最后面的通过改变iframe的<code>messagingIframe.src</code>。从而触发webview的代理方法<code>webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler</code>从而在OC中处理javascript环境触发过来的回调。具体如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([_base isWebViewJavascriptBridgeURL:url]) &#123;</span><br><span class="line">    <span class="comment">//第一次注入JS代码</span></span><br><span class="line">    <span class="keyword">if</span> ([_base isBridgeLoadedURL:url]) &#123;</span><br><span class="line">        [_base injectJavascriptFile];</span><br><span class="line">    <span class="comment">//处理WEB发过来的消息</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([_base isQueueMessageURL:url]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> <span class="built_in">WKFlushMessageQueue</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [_base logUnkownMessage:url];</span><br><span class="line">    &#125;</span><br><span class="line">    decisionHandler(<span class="built_in">WKNavigationActionPolicyCancel</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会走<code>[self WKFlushMessageQueue];</code>方法。然后通过调用<code>WebViewJavascriptBridge._fetchQueue()</code>来获取javascript给OC的回调信息。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取WEB消息的JSON字符串</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)webViewJavascriptFetchQueyCommand &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@"WebViewJavascriptBridge._fetchQueue();"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////把消息或者WEB回调从OC发送到OC</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="built_in">WKFlushMessageQueue</span> &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *js = [_base webViewJavascriptFetchQueyCommand];</span><br><span class="line">    [_webView evaluateJavaScript:js completionHandler:^(<span class="built_in">NSString</span>* result, <span class="built_in">NSError</span>* error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error != <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"WebViewJavascriptBridge: WARNING: Error when trying to fetch data from WKWebView: %@"</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把消息或者WEB回调从OC发送到OC</span></span><br><span class="line">        [_base flushMessageQueue:result];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到javascript给OC的回调消息以后，然后把javascript的bridge返回的信息加工处理成OC环境的bridge能识别的信息。从而找到具体的实现执行。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把从WEB发送的消息返回。然后在这里处理</span></span><br><span class="line">- (<span class="keyword">void</span>)flushMessageQueue:(<span class="built_in">NSString</span> *)messageQueueString&#123;</span><br><span class="line">    <span class="keyword">if</span> (messageQueueString == <span class="literal">nil</span> || messageQueueString.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"WebViewJavascriptBridge: WARNING: ObjC got nil while fetching the message queue JSON from webview. This can happen if the WebViewJavascriptBridge JS is not currently present in the webview, e.g if the webview just loaded a new page."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">id</span> messages = [<span class="keyword">self</span> _deserializeMessageJSON:messageQueueString];</span><br><span class="line">    <span class="keyword">for</span> (WVJBMessage* message <span class="keyword">in</span> messages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (![message isKindOfClass:[WVJBMessage <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"WebViewJavascriptBridge: WARNING: Invalid %@ received: %@"</span>, [message <span class="keyword">class</span>], message);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="keyword">self</span> _log:<span class="string">@"RCVD"</span> json:message];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSString</span>* responseId = message[<span class="string">@"responseId"</span>];</span><br><span class="line">        <span class="keyword">if</span> (responseId) &#123;</span><br><span class="line">            WVJBResponseCallback responseCallback = _responseCallbacks[responseId];</span><br><span class="line">            responseCallback(message[<span class="string">@"responseData"</span>]);</span><br><span class="line">            [<span class="keyword">self</span>.responseCallbacks removeObjectForKey:responseId];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            WVJBResponseCallback responseCallback = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="built_in">NSString</span>* callbackId = message[<span class="string">@"callbackId"</span>];</span><br><span class="line">            <span class="keyword">if</span> (callbackId) &#123;</span><br><span class="line">                responseCallback = ^(<span class="keyword">id</span> responseData) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (responseData == <span class="literal">nil</span>) &#123;</span><br><span class="line">                        responseData = [<span class="built_in">NSNull</span> null];</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    WVJBMessage* msg = @&#123; <span class="string">@"responseId"</span>:callbackId, <span class="string">@"responseData"</span>:responseData &#125;;</span><br><span class="line">                    [<span class="keyword">self</span> _queueMessage:msg];</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                responseCallback = ^(<span class="keyword">id</span> ignoreResponseData) &#123;</span><br><span class="line">                    <span class="comment">// Do nothing</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            WVJBHandler handler = <span class="keyword">self</span>.messageHandlers[message[<span class="string">@"handlerName"</span>]];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!handler) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"WVJBNoHandlerException, No handler for message from JS: %@"</span>, message);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            handler(message[<span class="string">@"data"</span>], responseCallback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会调用handler方法，通过javascript传过来的responseId获取对应的<code>WVJBResponseCallback</code>。然后执行这个block。到这里从OC发送消息到javascript并且javascript返回消息给OC的流程走完了。</p><h2 id="WEB发消息给OC"><a href="#WEB发消息给OC" class="headerlink" title="WEB发消息给OC"></a>WEB发消息给OC</h2><p>首先通过<code>ExampleAPP.html</code>中的<code>bridge.callHandler</code>方法，这里的bridge就是<code>window.WebViewJavascriptBridge</code>对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bridge.callHandler(<span class="string">'OC提供方法给JS调用'</span>,params, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">log(<span class="string">'JS调用OC的返回值'</span>, response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接下来调用<code>window.WebViewJavascriptBridge</code>中的callHander方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//web端调用一个OC注册的消息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callHandler</span>(<span class="params">handlerName, data, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">2</span> &amp;&amp; <span class="keyword">typeof</span> data == <span class="string">'function'</span>) &#123;</span><br><span class="line">        responseCallback = data;</span><br><span class="line">        data = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _doSend(&#123; <span class="attr">handlerName</span>: handlerName, <span class="attr">data</span>: data &#125;, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用<code>WebViewJavascriptBridge_JS.js</code>中的方法执行具体的操作。具体就和OC调用javascript过程一样了，就不解释了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把消息从JS发送到OC，执行具体的发送操作。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_doSend</span>(<span class="params">message, responseCallback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="keyword">var</span> callbackId = <span class="string">'cb_'</span> + (uniqueId++) + <span class="string">'_'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="comment">//存储消息的回调ID</span></span><br><span class="line">        responseCallbacks[callbackId] = responseCallback;</span><br><span class="line">        <span class="comment">//把消息对应的回调ID和消息一起发送，以供消息返回以后使用。</span></span><br><span class="line">        message[<span class="string">'callbackId'</span>] = callbackId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把消息放入消息列表</span></span><br><span class="line">    sendMessageQueue.push(message);</span><br><span class="line">    <span class="comment">//下面这句话会出发JS对OC的调用</span></span><br><span class="line">    <span class="comment">//让webview执行跳转操作，从而可以在</span></span><br><span class="line">    <span class="comment">//webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler 中拦截到JS发给OC的消息</span></span><br><span class="line">    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + <span class="string">'://'</span> + QUEUE_HAS_MESSAGE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实现在想想，原理很简单。</p><ul><li>分别在OC环境和javascript环境都保存一个bridge对象，里面维持着requestId,callbackId,以及每个id对应的具体实现。</li><li>OC通过javascript环境的<code>window.WebViewJavascriptBridge</code>对象来找到具体的方法，然后执行。</li><li>javascript通过改变iframe的src来出发webview的代理方法<code>webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler</code>从而实现把javascript消息发送给OC这个功能。</li></ul><p>其实这里只是解析了webview与OC交互的桥接问题，其他比如webview中的请求拦截、添加进度条、运营商劫持、如何组织交互规则等问题这里还没有涉及。这些在我们项目中运用，具体就不抽出来了。</p><p>最后，具体的源码在<a href="https://github.com/huang303513/iOSSourceCodeStudy">github地址</a>。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebViewJavascriptBridge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议详解(二)</title>
      <link href="/2017/01/05/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3(%E4%BA%8C)/"/>
      <url>/2017/01/05/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP结构"><a href="#HTTP结构" class="headerlink" title="HTTP结构"></a>HTTP结构</h1><h2 id="1-1-Web服务器"><a href="#1-1-Web服务器" class="headerlink" title="1.1 Web服务器"></a>1.1 Web服务器</h2><hr><p>Web服务器一般会执行以下几个操作：</p><ul><li>(1) 建立连接——接受一个客户端连接,或者如果不希望与这个客户端建立连接,就 将其关闭。</li><li>(2) 接收请求——从网络中读取一条 HTTP 请求报文。</li><li>(3) 处理请求——对请求报文进行解释,并采取行动。 </li><li>(4) 访问资源——访问报文中指定的资源。</li><li>(5) 构建响应——创建带有正确首部的 HTTP 响应报文。 </li><li>(6) 发送响应——将响应回送给客户端。</li><li>(7) 记录事务处理过程——将与已完成事务有关的内容记录在一个日志文件中。</li></ul><h2 id="1-2-代理"><a href="#1-2-代理" class="headerlink" title="1.2 代理"></a>1.2 代理</h2><hr><p>Web上的代理服务器是代表客户端完成事务处理的中间人。如果没有Web代理,HTTP客户端就要直接与HTTP服务器进行对话。有了Web代理,客户端就可以与代理进行对话,然后由代理代表客户端与服务器进行交流。代理与客户端和服务器之间使用 的都是 HTTP 协议。代理连接的是两个或多个使用相同协议的应用程序,而网关连接的则是两个或多个使用不同协议的端点。网关扮演的是“协议转换器”的角色,即使客户 端和服务器使用的是不同的协议,客户端也可以通过它完成与服务器之间的事务 处理。</p><h2 id="1-3-缓存"><a href="#1-3-缓存" class="headerlink" title="1.3 缓存"></a>1.3 缓存</h2><hr><p>Web 缓存是可以自动保存常见文档副本的HTTP设备。当Web请求抵达缓存时,如果本地有“已缓存的”副本,就可以从本地存储设备而不是原始服务器中提取这 个文档。使用缓存有下列优点：</p><ul><li>缓存减少了冗余的数据传输，节约宽带。</li><li>缓存缓解了网络瓶颈的问题。不需要更多的带宽就能够更快地加载页面。</li><li>缓存降低了对原始服务器的要求。服务器可以更快地响应,避免过载的出现。</li><li>缓存降低了距离时延,因为从较远的地方加载页面会更慢一些。</li></ul><p>可以用已有的副本为某些到达缓存的请求提供服务。这被称为缓存命中(cache hit)。其他一些到达缓存的请求可能会由于没有副本可用,而被转发 给原始服务器。这被称为缓存未命中(cache miss)。原始服务器的内容可能会发生变化,缓存要不时对其进行检测,看看它们保存的副本是否仍是服务器上最新的副本。这些“新鲜度检测”被称为 HTTP再验证(revalidation)。为了有效地进行再验证,HTTP定义了一些特殊的请求,不用从服务器上获取整个对象,就可以快速检测出内容是否是最新的。</p><p>缓存对缓存的副本进行再验证时,会向原始服务器发送一个小的再验证请求。如果 内容没有变化,服务器会以一个小的304 Not Modified进行响应。只要缓存知道副本仍然有效,就会再次将副本标识为暂时新鲜的,并将副本提供给客户端这被称作再验证命中。HTTP 为我们提供了几个用来对已缓存对象进行再验证的工具,但最常用的是 If- Modified-Since 首部。将这个首部添加到 GET 请求中去,就可以告诉服务器,只 有在缓存了对象的副本之后,又对其进行了修改的情况下,才发送此对象。服务器收到 GET If-Modified-Since 请求时会发生的情况:</p><ul><li>再验证命中：如果服务器对象未被修改,服务器会向客户端发送一个小的HTTP 304 Not Modified 响应。</li><li>再验证未命中：如果服务器对象与已缓存副本不同,服务器向客户端发送一条普通的、带有完整 内容的 HTTP 200 OK 响应。</li><li>对象被删除：如果服务器对象已经被删除了,服务器就回送一个404 Not Found响应,缓存也 会将其副本删除。</li></ul><p>私有缓存是个人的缓存,包含了单个用户最常用的页面。共享的缓存被称为公有缓存(public cache)。公有缓存中包含了某个用户团体的常用页面。Web浏览器中有内建的私有缓存——大多数浏览器都会将常用文档缓存在你个人电脑的磁盘 和内存中,并且允许用户去配置缓存的大小和各种设置。还可以去看看浏览器的缓存中 有些什么内容。我们可以通过<code>about:cache</code>来查看缓存。</p><p>缓存服务器收到一个GET报文的处理的过程分为七个步骤：</p><ul><li>(1) 接收——缓存从网络中读取抵达的请求报文。</li><li>(2) 解析——缓存对报文进行解析,提取出 URL 和各种首部。</li><li>(3) 查询——缓存查看是否有本地副本可用,如果没有,就获取一份副本(并将其保<br>存在本地)。</li><li>(4) 新鲜度检测——缓存查看已缓存副本是否足够新鲜,如果不是,就询问服务器是<br>否有任何更新。</li><li>(5) 创建响应——缓存会用新的首部和已缓存的主体来构建一条响应报文。</li><li>(6) 发送——缓存通过网络将响应发回给客户端。</li><li>(7) 日志——缓存可选地创建一个日志文件条目来描述这个事务。</li></ul><p>已缓存对象中包含了服务器响应主体和原始服务器响应首部,这样就会在缓存命中时返回正确的服务器首部。已缓存对象中还包含了一些元数据(metadata),用来记 录对象在缓存中停留了多长时间,以及它被用过多少次等。在这段时间里,都认为文档是 “新鲜的”,缓存可以在不联系服务器的情况下,直接提供该文档。但一旦已缓存副 本停留的时间太长,超过了文档的新鲜度限值(freshness limit),就认为对象“过 时”了,在提供该文档之前,缓存要再次与服务器进行确认,以查看文档是否发生 了变化。</p><p>我们希望缓存的响应看起来就像来自原始服务器的一样,缓存将已缓存的服务器响应首部作为响应首部的起点。然后缓存对这些基础首部进行了修改和扩充。缓存服务器负责对这些首部进行改造,以便与客户端的要求相匹配。比如,服务器返回 的可能是一条 HTTP/1.0 响应(甚至是 HTTP/0.9 响应),而客户端期待的是一条HTTP/1.1响应,在这种情况下,缓存服务器必须对首部进行相应的转换。缓存服务器还会向其中插入新鲜度信息(Cache-Control、Age 以及 Expires 首部),而且通常会包含一 个 Via 首部来说明请求是由一个代理缓存提供的。</p><h3 id="1-3-1-缓存过期判断"><a href="#1-3-1-缓存过期判断" class="headerlink" title="1.3.1 缓存过期判断"></a>1.3.1 缓存过期判断</h3><p>HTTP 有一些简单的机制可以在不要求服务器记住有哪些缓存拥有其文档副本的情况下,保持已缓存数据与服务器数据之间充分一致。HTTP 将这些简单的机制称为 文档过期(document expiration)和服务器再验证(server revalidation)。</p><p>通过特殊的HTTP响应头<code>Cache-Control</code>首部和<code>Expires</code>首部,HTTP让原始服务器向每个文档附加了一个“过期日期”。除非客户端请求中包含有阻止提供已缓存或未验证资源的首部，否则在缓存文档过期之前,缓存可以以任意频率使用这些副本,而无需与服务器联系。一旦已缓存文档过期,缓存就必须与服务器进行核对,询问文档是否被修改过,如果 被修改过,就要获取一份新鲜(带有新的过期日期)的副本。</p><p>服务器用HTTP/1.0+的Expires首部或HTTP/1.1的<code>Cache-Control:max-age</code>响应首部来指定过期日期,同时还会带有响应主体。Expires 首部和<code>Cache-Control: max-age</code>首部所做的事情本质上是一样的,但由于Cache-Control首部使用的是相对时间而不是绝对日期,所以我们更倾向于使用比较新的<code>Cache-Control</code>首部。 </p><ul><li>Cache-Control:max-age : max-age 值定义了文档的最大使用期——从第一次生成文档到文档不再新 鲜、无法使用为止,最大的合法生存时间(以秒为单位)。如Cache-Control: max-age=484200。</li><li>Expires : 指定一个绝对的过期日期。如果过期日期已经过了,就说明文档不再新鲜了,如Expires: Fri, 05 Jul 2002, 05:00:00 GMT.</li></ul><h3 id="1-3-2-缓存再验证"><a href="#1-3-2-缓存再验证" class="headerlink" title="1.3.2 缓存再验证"></a>1.3.2 缓存再验证</h3><p>仅仅是已缓存文档过期了并不意味着它和原始服务器上目前处于活跃状态的文档有实际的区别。这只是意味着到了要进行核对的时间了。这种情况被称为“服务器再 验证”,说明缓存需要询问原始服务器文档是否发生了变化。</p><ul><li>如果再验证显示内容发生了变化,缓存会获取一份新的文档副本,并将其存储在 旧文档的位置上,然后将文档发送给客户端。</li><li>如果再验证显示内容没有发生变化,缓存只需要获取新的首部,包括一个新的过 期日期,并对缓存中的首部进行更新就行了。</li></ul><p>HTTP 的条件方法可以高效地实现再验证。HTTP 允许缓存向原始服务器发送一个 “条件 GET”,请求服务器只有在文档与缓存中现有的副本不同时,才回送对象主体。通过这种方式,将新鲜度检测和对象获取结合成了单个条件GET。向GET请求报文中添加一些特殊的条件首部,就可以发起条件 GET。只有条件为真时,Web服务器才会返回对象。</p><p>HTTP 定义了 5 个条件请求首部。对缓存再验证来说最有用的 2 个首部是 If- Modified-Since 和 If-None-Match。15 所有的条件首部都以前缀“If-”开头。</p><ul><li>If-Modified-Since:<date> : 如果从指定日期之后文档被修改过了,就执行请求的方法。可以与 Last-Modified 服务器响应首部配合使用,只有在内容被修改后与已缓存版本有所不同的时候才去获取内容。</li><li>If-None-Match:<tags> : 服务器可以为文档提供特殊的标签(参见 ETag),而不是将其与最近修改日期相匹配,这些标签就像序列号一样。如果已缓存标签与服务器文档中的标签有所不同,If-None-Match 首部就会执行所请求的方法。</li></ul><h4 id="1-3-2-1-If-Modified-Since-Date再验证"><a href="#1-3-2-1-If-Modified-Since-Date再验证" class="headerlink" title="1.3.2.1 If-Modified-Since:Date再验证"></a>1.3.2.1 If-Modified-Since:Date再验证</h4><p>最常见的缓存再验证首部是 If-Modified-Since。If-Modified-Since 再验证请 求通常被称为 IMS 请求。只有自某个日期之后资源发生了变化的时候,IMS 请求才 会指示服务器执行请求:</p><ul><li>如果自指定日期后,文档被修改了,If-Modified-Since条件就为真,通常 GET 就会成功执行。携带新首部的新文档会被返回给缓存,新首部除了其他信 息之外,还包含了一个新的过期日期。</li><li>如果自指定日期后,文档没被修改过,条件就为假,会向客户端返回一个小 的 304 Not Modified 响应报文,为了提高有效性,不会返回文档的主体。这 些首部是放在响应中返回的,但只会返回那些需要在源端更新的首部。比如, Content-Type 首部通常不会被修改,所以通常不需要发送。一般会发送一个 新的过期日期。</li></ul><p>If-Modified-Since 首部可以与 Last-Modified 服务器响应首部配合工作。原始 服务器会将最后的修改日期附加到所提供的文档上去。当缓存要对已缓存文档进行 再验证时,就会包含一个 If-Modified-Since 首部,其中携带有最后修改已缓存副 本的日期:<br><code>If-Modified-Since: &lt;cached last-modified date&gt;</code>。<br>如果在此期间内容被修改了,最后的修改日期就会有所不同,原始服务器就会回送新的文档。否则,服务器会注意到缓存的最后修改日期与服务器文档当前的最后修 改日期相符,会返回一个 304 Not Modified 响应。</p><h4 id="1-3-2-2-If-None-Match-实体标签再验证"><a href="#1-3-2-2-If-None-Match-实体标签再验证" class="headerlink" title="1.3.2.2 If-None-Match:实体标签再验证"></a>1.3.2.2 If-None-Match:实体标签再验证</h4><p>有些情况下仅使用最后修改日期进行再验证是不够的。比如下面几种情况：</p><ul><li>有些文档可能会被周期性地重写(比如,从一个后台进程中写入),但实际包含 的数据常常是一样的。尽管内容没有变化,但修改日期会发生变化。</li><li>有些文档可能被修改了,但所做修改并不重要,不需要让世界范围内的缓存都重 装数据(比如对拼写或注释的修改)。</li><li>有些服务器无法准确地判定其页面的最后修改日期。</li><li>有些服务器提供的文档会在亚秒间隙发生变化,对这些服务器来说,以一秒为粒度的修改日期可能就不够用了。</li></ul><p>为了解决这些问题,HTTP 允许用户对被称为实体标签(ETag)的“版本标识符” 进行比较。实体标签是附加到文档上的任意标签(引用字符串)。它们可能包含了文 档的序列号或版本名,或者是文档内容的校验和及其他指纹信息。<br>当发布者对文档进行修改时,可以修改文档的实体标签来说明这个新的版本。这样, 如果实体标签被修改了,缓存就可以用 If-None-Match 条件首部来GET文档的新副本了。如下图：</p><p><img src="/assets/postImages/2017011201.png" alt="img"></p><p><code>如果服务器回送了一个实体标签,HTTP/1.1 客户端就必须使用实体标签验证器。如 果服务器只回送了一个 Last-Modified 值,客户端就可以使用 If-Modified-Since 验证。如果实体标签和最后修改日期都提供了,客户端就应该使用这两种再验证方 案,这样 HTTP/1.0 和 HTTP/1.1 缓存就都可以正确响应了。如果 HTTP/1.1 缓存或服务器收到的请求既带有 If-Modified-Since,又带有实体 标签条件首部,那么只有这两个条件都满足时,才能返回 304 Not Modified 响应。</code></p><h3 id="1-3-3-控制缓存的能力"><a href="#1-3-3-控制缓存的能力" class="headerlink" title="1.3.3 控制缓存的能力"></a>1.3.3 控制缓存的能力</h3><p>服务器可以通过 HTTP 定义的几种方式来指定在文档过期之前可以将其缓存多长时<br>间。按照优先级递减的顺序,服务器可以:</p><ul><li>附加一个Cache-Control:no-store首部到响应中去;</li><li>附加一个Cache-Control:no-cache首部到响应中去;</li><li>附加一个Cache-Control:must-revalidate首部到响应中去; • 附加一个Cache-Control:max-age首部到响应中去;</li><li>附加一个Expires日期首部到响应中去;</li><li>不附加过期信息,让缓存确定自己的过期日期。</li></ul><h4 id="1-3-3-1-no-Store与no-Cache响应首部"><a href="#1-3-3-1-no-Store与no-Cache响应首部" class="headerlink" title="1.3.3.1 no-Store与no-Cache响应首部"></a>1.3.3.1 no-Store与no-Cache响应首部</h4><p>HTTP/1.1 提供了几种限制对象缓存,或限制提供已缓存对象的方式,以维持对象的新鲜度。no-store 首部和 no-cache 首部可以防止缓存提供未经证实的已缓存对象:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pragma: no-cache Cache-Control: no-store Cache-Control: no-cache</span><br></pre></td></tr></table></figure><p>标识为 no-store 的响应会禁止缓存对响应进行复制。缓存通常会像非缓存代理服 务器一样,向客户端转发一条 no-store 响应,然后删除对象。标识为 no-cache 的响应实际上是可以存储在本地缓存区中的。只是在与原始服务器进行新鲜度再验证之前,缓存不能将其提供给客户端使用。这个首部使用do-not-serve-from-cache-without-revalidation这个名字会更恰当一些。HTTP/1.1 中提供 Pragma: no-cache 首部 17 是为了兼容于 HTTP/1.0+。除了与只 理解Pragma: no-cache的HTTP/1.0应用程序进行交互时,HTTP 1.1应用程序都 应该使用 Cache-Control: no-cache。</p><h4 id="1-3-3-2-max-age响应首部-Expires响应首部"><a href="#1-3-3-2-max-age响应首部-Expires响应首部" class="headerlink" title="1.3.3.2 max-age响应首部,Expires响应首部"></a>1.3.3.2 max-age响应首部,Expires响应首部</h4><p>Cache-Control: max-age首部表示的是从服务器将文档传来之时起,可以认为此 文档处于新鲜状态的秒数。还有一个 s-maxage 首部(注意 maxage 的中间没有连 字符),其行为与 max-age 类似,但仅适用于共享(公有)缓存:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age&#x3D;3600 Cache-Control: s-maxage&#x3D;3600</span><br></pre></td></tr></table></figure><p>服务器可以请求缓存不要缓存文档,或者将最大使用期设置为零,从而在每次访问 的时候都进行刷新:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age&#x3D;0 Cache-Control: s-maxage&#x3D;0</span><br></pre></td></tr></table></figure><p>不推荐使用 Expires 首部,它指定的是实际的过期日期而不是秒数。HTTP 设计者 后来认为,由于很多服务器的时钟都不同步,或者不正确,所以最好还是用剩余秒 数,而不是绝对时间来表示过期时间。可以通过计算过期值和日期值之间的秒数差 来计算类似的新鲜生存期:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires: Fri, 05 Jul 2002, 05:00:00 GMT</span><br></pre></td></tr></table></figure><p>有些服务器还会回送一个 Expires:0 响应首部,试图将文档置于永远过期的状态, 但这种语法是非法的,可能给某些软件带来问题。应该试着支持这种结构的输入, 但不应该产生这种结构的输出。</p><p>可以配置缓存,使其提供一些陈旧(过期)的对象,以提高性能。如果原始服务器 希望缓存严格遵守过期信息,可以在原始响应中附加一个Cache-Control: must- revalidate 首部。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: must-revalidate</span><br></pre></td></tr></table></figure><p>Cache-Control: must-revalidate响应首部告诉缓存,在事先没有跟原始服务 器进行再验证的情况下,不能提供这个对象的陈旧副本。缓存仍然可以随意提供新 鲜的副本。如果在缓存进行 must-revalidate 新鲜度检查时,原始服务器不可 用,缓存就必须返回一条 504 Gateway Timeout 错误。</p><h4 id="1-3-3-3-客户端的新鲜度限制"><a href="#1-3-3-3-客户端的新鲜度限制" class="headerlink" title="1.3.3.3 客户端的新鲜度限制"></a>1.3.3.3 客户端的新鲜度限制</h4><p>Web 浏览器都有 Refresh(刷新)或 Reload(重载)按钮,可以强制对浏览器或 代理缓存中可能过期的内容进行刷新。Refresh 按钮会发布一个附加了 Cache- Control 请求首部的 GET 请求,这个请求会强制进行再验证,或者无条件地从服 务器获取文档。Refresh 的确切行为取决于特定的浏览器、文档以及拦截缓存的配置。<br>客户端可以用 Cache-Control 请求首部来强化或放松对过期时间的限制。有些应 用程序对文档的新鲜度要求很高(比如人工刷新按钮),对这些应用程序来说,客 户端可以用 Cache-Control 首部使过期时间更严格。另一方面,作为提高性能、 可靠性或开支的一种折衷方式,客户端可能会放松新鲜度要求。下图对 Cache- Control请求指令进行了总结：</p><p><img src="/assets/postImages/2017011202.png" alt="img"></p><h3 id="1-3-4-设置缓存控制"><a href="#1-3-4-设置缓存控制" class="headerlink" title="1.3.4 设置缓存控制"></a>1.3.4 设置缓存控制</h3><p>为了让作者在无需与 Web 服务器的配置文件进行交互的情况下,能够更容易地为所 提供的 HTML 文档分配 HTTP 首部信息,HTML 2.0 定义了 <META HTTP-EQUIV> 标签。这个可选的标签位于 HTML 文档的顶部,定义了应该与文档有所关联的 HTTP 首部。这里有一个 <META HTTP-EQUIV> 标签设置的例子,它将 HTML 文档 标记为非缓冲的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;HTML&gt; &lt;HEAD&gt;</span><br><span class="line">&lt;TITLE&gt;My Document&lt;&#x2F;TITLE&gt;</span><br><span class="line">&lt;META HTTP-EQUIV&#x3D;&quot;Cache-control&quot; CONTENT&#x3D;&quot;no-cache&quot;&gt; &lt;&#x2F;HEAD&gt;</span><br></pre></td></tr></table></figure><p>有些浏览器确实会解析并在HTML内容中使用HTTP-EQUIV标签,像对待真的HTTP首部那样来处理嵌入式首部。这样的效果并不好,因为支 持 HTTP-EQUIV 标签的 HTML浏览器使用的Cache-control规则可能会与拦截代理缓存所用的规则有所不同。这样会使缓存的过期处理行为发生混乱。总之,<META HTTP-EQUIV>标签并不是控制文档缓存特性的好方法。通过配置正确的服务器发出 HTTP 首部,是传送文档缓存控制请求的唯一可靠的方法。</p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议详解(一)</title>
      <link href="/2017/01/03/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3(%E4%B8%80)/"/>
      <url>/2017/01/03/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP：Web的基础"><a href="#HTTP：Web的基础" class="headerlink" title="HTTP：Web的基础"></a>HTTP：Web的基础</h1><h2 id="1-1-HTTP概述"><a href="#1-1-HTTP概述" class="headerlink" title="1.1 HTTP概述"></a>1.1 HTTP概述</h2><hr><h3 id="1-1-1-概述"><a href="#1-1-1-概述" class="headerlink" title="1.1.1 概述"></a>1.1.1 概述</h3><p>http仔细给每种要通过Web传输的对象打上名为MIME类型的数据格式标签，当web浏览器从服务器取回一个对象时，通过MIME来决定如何处理对象。常见的MIME格式如下：</p><ul><li>HTML 格式的文本文档由 text/html 类型来标记。</li><li>普通的 ASCII 文本文档由 text/plain 类型来标记。</li><li>JPEG 格式的图片为 image/jpeg 类型。</li><li>GIF 格式的图片为 image/gif 类型。</li><li>Apple 的 QuickTime 电影为 video/quicktime 类型。</li><li>微软的 PowerPoint 演示文件为 application/vnd.ms-powerpoint类型。</li></ul><p>每个http请求都有一个方法，这个方法告诉服务器执行什么动作。有如下五种：</p><ul><li>GET 从服务器向客户端发送命名资源。</li><li>PUT 将来自客户端的数据存储到一个命名的服务器资源中。</li><li>DELETE 删除服务器中的命名资源。</li><li>POST 将客户端的数据发送到一个服务器中提交数据。</li><li>HEAD 服务器返回资源的HTTP首部。</li></ul><p>通过终端连接web服务器的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">192:github huangchengdu$ telnet www.joes-hardware.com 80</span><br><span class="line">Trying 128.121.66.211...</span><br><span class="line">Connected to joes-hardware.com.</span><br><span class="line">Escape character is &#39;^]&#39;.</span><br><span class="line">GET &#x2F;tools.html HTTP&#x2F;1.1</span><br><span class="line">HOST:www.joes-hardware.com</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Sat, 08 Oct 2016 22:09:46 GMT</span><br><span class="line">Server: Apache&#x2F;2.2.22 (Unix) DAV&#x2F;2 FrontPage&#x2F;5.0.2.2635 mod_ssl&#x2F;2.2.22 OpenSSL&#x2F;1.0.1h</span><br><span class="line">Last-Modified: Fri, 12 Jul 2002 07:50:17 GMT</span><br><span class="line">ETag: &quot;146deb7-1b1-3a58f649c4040&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 433</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line"></span><br><span class="line">&lt;HTML&gt;</span><br><span class="line">&lt;HEAD&gt;&lt;TITLE&gt;Joe&#39;s Tools&lt;&#x2F;TITLE&gt;&lt;&#x2F;HEAD&gt;</span><br><span class="line">&lt;BODY&gt;</span><br><span class="line">&lt;H1&gt;Tools Page&lt;&#x2F;H1&gt;</span><br><span class="line">&lt;H2&gt;Hammers&lt;&#x2F;H2&gt;</span><br><span class="line">&lt;P&gt;Joe&#39;s Hardware Online has the largest selection of </span><br><span class="line">&lt;A HREF&#x3D;&quot;.&#x2F;hammers.html&quot;&gt;hammers&lt;&#x2F;A&gt; on the earth.&lt;&#x2F;P&gt;</span><br><span class="line">&lt;H2&gt;&lt;A NAME&#x3D;drills&gt;&lt;&#x2F;A&gt;Drills&lt;&#x2F;H2&gt;</span><br><span class="line">&lt;P&gt;Joe&#39;s Hardware has a complete line of cordless and corded drills,</span><br><span class="line">as well as the latest in plutonium-powered atomic drills, for those</span><br><span class="line">big around the house jobs.&lt;&#x2F;P&gt; ...</span><br><span class="line">&lt;&#x2F;BODY&gt;</span><br><span class="line">&lt;&#x2F;HTML&gt;</span><br></pre></td></tr></table></figure><h2 id="1-2-URL与资源"><a href="#1-2-URL与资源" class="headerlink" title="1.2 URL与资源"></a>1.2 URL与资源</h2><hr><p>大多数 URL 方案的 URL 语法都建立在这个由 9 部分构成的通用格式上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scheme&gt;:&#x2F;&#x2F;&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;&#x2F;&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</span><br></pre></td></tr></table></figure><p>几乎没有哪个 URL 中包含了所有这些组件。URL 最重要的 3 个部分是方案(scheme)、 主机(host)和路径(path)。表 2-1 对各种组件进行了总结。</p><p><img src="/assets/postImages/2017010401.png" alt="img"></p><p>URL的设计者们认识到有时人们可能会希望URL包含除通用的安全字母表之外的二进制数据或字符。因此,需要 有一种转义机制,能够将不安全的字符编码为安全字符,再进行传输。为了避开安全字符集表示法带来的限制,人们设计了一种编码机制,用来在URL中表示各种不安全的字符。这种编码机制就是通过一种“转义”表示法来表示不安全字符的,这种转义表示法包含一个百分号(%),后面跟着两个表示字符ASCII码的十六进制数。</p><h2 id="1-3-HTTP报文"><a href="#1-3-HTTP报文" class="headerlink" title="1.3 HTTP报文"></a>1.3 HTTP报文</h2><hr><p>HTTP报文是简单的格式化数据块。每条报文都包含一条来自客户端的请求,或者一条来自服务器的响应。它们由三个部分组成:对报文 进行描述的起始行(start line)、包含属性的首部(header)块,以及可选的、包含 数据的主体(body)部分。</p><p>起始行和首部就是由行分隔的ASCII文本。每行都以一个由两个字符组成的行终止序列作为结束,其中包括一个回车符(ASCII 码 13)和一个换行符(ASCII 码 10)。 这个行终止序列可以写做 CRLF。需要指出的是,尽管HTTP规范中说明应该用CRLF来表示行终止,但稳健的应用程序也应该接受单个换行符作为行的终止。有些老的,或不完整的HTTP应用程序并不总是既发送回车符,又发送换行符。实体的主体或报文的主体(或者就称为主体)是一个可选的数据块。与起始行和首部不同的是,主体中可以包含文本或二进制数据,也可以为空。</p><h3 id="1-3-1-状态码"><a href="#1-3-1-状态码" class="headerlink" title="1.3.1 状态码"></a>1.3.1 状态码</h3><p>100~199信息状态码,200~299成功状态吗,300~399重定向状态吗,400~499客户端错误状态码,500~599服务器错误状态码。</p><p>如果客户端在向服务器发送一个实体,并且愿意在发送实体之前等待100 Continue响应,那么,客户端就要发送一个携带了值为100Continue的Expect请求首部。如果客户端没有发送实体,就不应该发送100 Continue Expect首部,因为这样会使服务器误以为客户端要发送一个实体。从很多方面来看,100Continue都是一种优化。客户端应用程序只有在避免向服务器发送一个服务器无法处理或使用的大实体时,才应该使用 100 Continue。</p><p>200-299之间的状态码，表示客户端发起的请求是成功的。</p><p><img src="/assets/postImages/2017010402.png" alt="img"></p><p>300-399之间的状态码表示重定向，重定向状态码要么告知客户端使用替代位置来访问他们所感兴趣的资源,要么就提 供一个替代的响应而不是资源的内容。如果资源已被移动,可发送一个重定向状态 码和一个可选的 Location 首部来告知客户端资源已被移走,以及现在可以在哪里 找到它。</p><p><img src="/assets/postImages/2017010403.png" alt="img"><br><img src="/assets/postImages/2017010404.png" alt="img"></p><p>400-499表示客户端发送了一个服务器无法处理的请求。</p><p><img src="/assets/postImages/2017010405.png" alt="img"><br><img src="/assets/postImages/2017010406.png" alt="img"></p><p>500-599状态码表示发送了一个有效的请求，但是服务器发生错误。</p><p><img src="/assets/postImages/2017010407.png" alt="img"></p><h3 id="1-3-2-首部"><a href="#1-3-2-首部" class="headerlink" title="1.3.2 首部"></a>1.3.2 首部</h3><p>首部分为五种类型，通用首部，客户端和服务端都使用的首部，提供与报文相关的最基本的信息，如Date。请求首部是请求报文特有的，如Accept。响应首部，比如Server。实体首部，用于表明实体相关的信息，Content-Type表示实体主体的类型。扩展首部，开发者自己创建。</p><p>通用首部提供与豹纹相关的最基本信息，常用通用首部如下：</p><ul><li>connection : 允许客户端和服务器指定与请求/响应链接有关的选项。</li><li>Date : 提供日期和时间标志，说明豹纹是什么时候创建的。</li><li>MIME-Version : 给出了发送端使用的MIME版本。</li><li>Transfer-Encoding : 告知接收端为了保证报文的可靠传输，对报文采用了什么编码方式。</li><li>Update : 给出了发送端可能想要”升级”使用的新版本或者协议。</li><li>Via : 显示了报文经过的中间节点。</li><li>Cache-Control : 用于随报文传送缓存指使。</li><li>Pragma : 另一种随报文传送指示的方式，但并不专用于缓存。</li></ul><p>请求首部是只在请求报文中有意义的首部。常用请求首部如下：</p><ul><li>Host : 该出了接收请求的服务器的主机名和端口号。</li><li>Referer : 提供了包含当前请求URI的文档的URL。</li><li>User-Agent : 发起请求的应用程序名称告知服务器。</li><li>Accept : 告诉服务器能够发送那些媒体类型。</li><li>Accept-Charset : 告诉服务器能够发送那些字符集。</li><li>Accept-Encoding : 告诉服务器能够发送那些编码方式。</li><li>Accept-Language : 告诉服务器能够发送那些语言。</li><li>Expect : 允许客户端列出某请求所要求的服务器行为。</li><li>If-Match : 如果实体标记与文档当前的实体标记相匹配，就获取这份文档。</li><li>If-Modified-Since : 除非在某个指定的日期之后资源被修改过，否则就限制这个请求。</li><li>If-None-Match : 如果提供的实体标记与当前文档的实体标记不符合，就获取文档。</li><li>If-Range : 运行对文档的某个范围进行条件请求。</li><li>If-Unmodified-Since : 除非某个指定日期之后资源没有被修改过，否则就限制这个请求。</li><li>Range : 如果服务器支持范围请求，就请求资源的指定范围。</li><li>Authorization : 包含了客户端提供给服务器，以便对齐进行身份认证的数据。</li><li>Cookie : 客户端用它向服务器传送一个令牌，它并不是真正的安全首部，但确实隐含了安全功能。</li><li>Proxy-Authorization : 与Authorization首部相同,但这个首部是在与代理进行认证时使用的。</li><li>Proxy-Connection : 与Connection首部相同,但这个首部是在与代理建立连接时使用的。</li></ul><p>响应报文有自己的响应首部集。响应首部为客户端提供了一些额外信息,比如谁在发送响应、响应者的功能,甚至与响应相关的一些特殊指令。这些首部有助于客户 端处理响应,并在将来发起更好的请求。</p><ul><li>Age : 响应持续时间。</li><li>Public : 服务器为其资源支持的请求方法列表。</li><li>Server : 服务器应用程序软件的名称和版本。</li><li>Accept-Ranges :对此资源来说，服务器可接受的范围类型。</li><li>Proxy-Authenticate : 来自代理的对客户端的质询列表。</li><li>Set-Cookie : 不是真正的安全首部,但隐含有安全功能;可以在客户端设置一个令牌,以便服务器对客户端进行标识。</li><li>WWW-Authenticate : 来自服务器的对客户端的质询列表。</li></ul><p>实体首部可以用来描述HTTP报文的负荷。由于请求和响应报文中都可能包含实体部分,所以在这两种类型的报文中都可能出现这些首部。实体首部提供了有关实体及其内容的大量信息,从有关对象类型的信息,到能够对资源使用的各种有效的请求方法。总之,实体首部可以告知报文的接收者它在对什 么进行处理。</p><ul><li>Location : 告知客户端实体实际上位于何处，用于将接收端定向到资源的位置上去。</li><li>Content-Base : 解析响应体中的相对URL时使用的基础URL。</li><li>Content-Encoding : 响应体的编码方式。</li><li>Content-Language : 理解响应体时最适宜使用的自然语言。</li><li>Content-Length : 响应体的长度或者尺寸。</li><li>Content-Location : 资源实际所处的位置。</li><li>Content-MD5 : 响应体的MD5校验和。</li><li>Content-Range : 在整个资源中此响应体表示的字节范围。</li><li>Content-Type : 响应体的对象类型。</li><li>Etag : 与此响应体相关的实体标记。</li><li>Expires : 响应体不再有效，要从原始的资源端再次获取此实体的日期和时间。</li><li>Last-Modified : 这个响应体最后一次呗修改的日期和时间。</li></ul><h2 id="1-4-链接管理"><a href="#1-4-链接管理" class="headerlink" title="1.4 链接管理"></a>1.4 链接管理</h2><hr><p>TCP连接是通过4个值来识别的,这4个值一起唯一地定义了一条连接。两条不同的TCP连接不能拥有4个完全相同<br>的地址组件值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt; 源IP地址、源端口号、目的IP地址、目的端口号 &gt;</span><br></pre></td></tr></table></figure><p>HTTP紧挨着TCP,位于其上层,所以HTTP事务的性能在很大程度上取决于底层TCP通道的性能。与建立TCP连接,以及传输请求和响应报文的时间相比,事务处理时间可能是很短的。除非客户端或服务器超载,或正在处理复杂的动态资源,否则HTTP时延就是由TCP网络时延构成的。HTTP 事务的时延有以下几种主要原因：</p><ul><li>1客户端首先需要根据 URI 确定 Web 服务器的 IP 地址和端口号。如果最近没有对 URI 中的主机名进行访问,通过 DNS 解析系统将 URI 中的主机名转换成一个 IP 地址可能要花费数十秒的时间。</li><li>2接下来,客户端会向服务器发送一条 TCP 连接请求,并等待服务器回送一个请求接受应答。每条新的TCP连接都会有连接建立时延。这个值通常最多只有一两秒钟,但如果有数百个 HTTP 事务的话,这个值会快速地叠加上去。</li><li>3一旦连接建立起来了,客户端就会通过新建立的TCP管道来发送HTTP请求。数据到达时,Web服务器会从TCP连接中读取请求报文,并对请求进行处理。因特网传输请求报文,以及服务器处理请求报文都需要时间。</li><li>4 然后,Web 服务器会回送 HTTP 响应,这也需要花费时间。</li></ul><h3 id="1-4-1-TCP链接性能"><a href="#1-4-1-TCP链接性能" class="headerlink" title="1.4.1 TCP链接性能"></a>1.4.1 TCP链接性能</h3><p>下面列出了一些会对 HTTP 程序员产生影响的、最常见的 TCP 相关时延,其中包括:</p><ul><li>TCP 连接建立握手;</li><li>TCP慢启动拥塞控制;数据聚集的Nagle算法;</li><li>用于捎带确认的TCP延迟确认算法; </li><li>TIME_WAIT时延和端口耗尽。</li></ul><p>TCP连接握手需要经过以下几个步骤：</p><ul><li>(1) 请求新的 TCP 连接时,客户端要向服务器发送一个小的 TCP 分组(通常是 40 ~ 60 个字节)。这个分组中设置了一个特殊的 SYN 标记,说明这是一个连接请求。</li><li>(2) 如果服务器接受了连接,就会对一些连接参数进行计算,并向客户端回送一个 TCP 分组,这个分组中的 SYN 和 ACK 标记都被置位,说明连接请求已被接受。</li><li>(3) 最后,客户端向服务器回送一条确认信息,通知它连接已成功建立(参见图 4-8c)。<br>现代的 TCP 栈都允许客户端在这个确认分组中发送数据。</li></ul><p>由于因特网自身无法确保可靠的分组传输(因特网路由器超负荷的话,可以随意丢弃分组),所以TCP实现了自己的确认机制来确保数据的成功传输。每个 TCP 段都有一个序列号和数据完整性校验和。每个段的接收者收到完好的段 时,都会向发送者回送小的确认分组。如果发送者没有在指定的窗口时间内收到确 认信息,发送者就认为分组已被破坏或损毁,并重发数据。</p><p>TCP 数据传输的性能还取决于 TCP 连接的使用期(age)。TCP 连接会随着时间进行 自我“调谐”,起初会限制连接的最大速度,如果数据成功传输,会随着时间的推移 提高传输的速度。这种调谐被称为TCP慢启动(slow start),用于防止因特网的突 然过载和拥塞。</p><h3 id="1-4-2-HTTP链接的处理"><a href="#1-4-2-HTTP链接的处理" class="headerlink" title="1.4.2 HTTP链接的处理"></a>1.4.2 HTTP链接的处理</h3><p>有几种现存和新兴的方法可以提高HTTP的连接性能。</p><ul><li>并行连接：通过多条TCP链接发起并发的HTTP请求。</li><li>持久连接：重用TCP链接，以消除连接以及关闭延迟。</li><li>管道化连接：通过共享的TCP连接发起并发的HTTP请求。</li></ul><p>HTTP允许客户端打开多条连接,并行地执行多个HTTP事务。即使并行连接的速度可能会更快,但并不一定总是更快。客户端的网络带宽不足 (比如,浏览器是通过一个 28.8kbps 的 Modem 连接到因特网上去的)时,大部分的时间可能都是用来传送数据的。在这种情况下,一个连接到速度较快服务器上的HTTP事务就会很容易地耗尽所有可用的 Modem 带宽。如果并行加载多个对象,每 个对象都会去竞争这有限的带宽,每个对象都会以较慢的速度按比例加载,这样带来的性能提升就很小,甚至没什么提升。</p><p>Web客户端经常会打开到同一个站点的连接。比如,一个 Web 页面上的大部分内 嵌图片通常都来自同一个 Web 站点,而且相当一部分指向其他对象的超链通常都指 向同一个站点。允许 HTTP 设备在事务处理结束 之后将 TCP 连接保持在打开状态,以便为未来的 HTTP 请求重用现存的连接。在事 务处理结束之后仍然保持在打开状态的 TCP 连接被称为持久连接。重用已对目标服务器打开的空闲持久连接,就可以避开缓慢的连接建立阶段。而且, 已经打开的连接还可以避免慢启动的拥塞适应阶段,以便更快速地进行数据的传输。</p><p>持久连接与并行连接配合使用可能是最高效的方式。现在,很多Web应用程序都会打开少量的并行连接,其中的每一个都是持久连接。实现持久链接有HTTP/1.0+“keep-alive”连接,以及现代的 HTTP/1.1“persistent”连接。实现HTTP/1.0keep-alive连接的客户端可以通过包含Connection:Keep-Alive首部请求将一条连接保持在打开状态。如果响应中没有 Connection: Keep-Alive首部,客户端就认为服务器不支持keep-alive,会在发回响应报文之后关闭连接。</p><p>Keep-Alive连接的限制和规则：</p><ul><li>在 HTTP/1.0 中,keep-alive 并不是默认使用的。客户端必须发送一个 Connection: Keep-Alive 请求首部来激活 keep-alive 连接。</li><li>Connection: Keep-Alive 首部必须随所有希望保持持久连接的报文一起发送。 如果客户端没有发送 Connection: Keep-Alive 首部,服务器就会在那条请求 之后关闭连接。</li><li>通过检测响应中是否包含Connection:Keep-Alive响应首部,客户端可以判 断服务器是否会在发出响应之后关闭连接。</li><li>只有在无需检测到连接的关闭即可确定报文实体主体部分长度的情况下,才能 将连接保持在打开状态——也就是说实体的主体部分必须有正确的 Content- Length,有多部件媒体类型,或者用分块传输编码的方式进行了编码。在一条 keep-alive 信道中回送错误的 Content-Length 是很糟糕的事,这样的话,事务 处理的另一端就无法精确地检测出一条报文的结束和另一条报文的开始了。</li><li>代理和网关必须执行Connection首部的规则。代理或网关必须在将报文转发出 去或将其高速缓存之前,删除在 Connection 首部中命名的所有首部字段以及 Connection 首部自身。</li><li>严格来说,不应该与无法确定是否支持Connection首部的代理服务器建立 keep-alive 连接,以防止出现下面要介绍的哑代理问题。在实际应用中不是总能 做到这一点的。</li><li>从技术上来讲,应该忽略所有来自HTTP/1.0设备的Connection首部字段(包 括Connection: Keep-Alive),因为它们可能是由比较老的代理服务器误转发 的。但实际上,尽管可能会有在老代理上挂起的危险,有些客户端和服务器还是 会违反这条规则。</li><li>除非重复发送请求会产生其他一些副作用,否则如果在客户端收到完整的响应之 前连接就关闭了,客户端就一定要做好重试请求的准备。</li></ul><p>HTTP/1.1 允许在持久连接上可选地使用请求管道。这是相对于 keep-alive 连接的又 一性能优化。在响应到达之前,可以将多条请求放入队列。当第一条请求通过网络 流向地球另一端的服务器时,第二条和第三条请求也可以开始发送了。在高时延网 络条件下,这样做可以降低网络的环回时间,提高性能。对管道化连接有几条限制：</p><ul><li>如果HTTP客户端无法确认连接是持久的,就不应该使用管道。</li><li>必须按照与请求相同的顺序回送HTTP响应。HTTP报文中没有序列号标签,因此如果收到的响应失序了,就没办法将其与请求匹配起来了。</li><li>HTTP 客户端必须做好连接会在任意时刻关闭的准备,还要准备好重发所有未完成的管道化请求。如果客户端打开了一条持久连接,并立即发出了 10 条请求, 服务器可能在只处理了,比方说,5 条请求之后关闭连接。剩下的 5 条请求会失败, 客户端必须能够应对这些过早关闭连接的情况,重新发出这些请求。</li><li>HTTP 客户端不应该用管道化的方式发送会产生副作用的请求(比如 POST)。总之,出错的时候,管道化方式会阻碍客户端了解服务器执行的是一系列管道化请 求中的哪一些。由于无法安全地重试 POST 这样的非幂等请求,所以出错时,就 存在某些方法永远不会被执行的风险。</li></ul><p>总之,实现正常关闭的应用程序首先应该关闭它们的输出信道,然后等待连接另一端的对等实体关闭它的输出信道。当两端都告诉对方它们不会再发送任何数据(比 如关闭输出信道)之后,连接就会被完全关闭,而不会有重置的危险。</p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript的数据结构与算法(四)</title>
      <link href="/2016/12/19/Javascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E5%9B%9B)/"/>
      <url>/2016/12/19/Javascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h1 id="1-排序和搜索算法"><a href="#1-排序和搜索算法" class="headerlink" title="1 排序和搜索算法"></a>1 排序和搜索算法</h1><hr><h2 id="1-1-排序算法"><a href="#1-1-排序算法" class="headerlink" title="1.1 排序算法"></a>1.1 排序算法</h2><h3 id="1-1-1-冒泡排序"><a href="#1-1-1-冒泡排序" class="headerlink" title="1.1.1 冒泡排序"></a>1.1.1 冒泡排序</h3><p>冒泡排序比较任何两个相邻的项,如果第一个比第二个大,则交换它们。元素项向上移动至正确的顺序,就好像气泡升至表面一样,冒泡排序因此得名。冒泡排序的时间复杂度为O(n2)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line">bubbleSort: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">index1, index2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> aux = self.array[index2];</span><br><span class="line">        self.array[index2] = self.array[index1];</span><br><span class="line">        self.array[index1] = aux;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> length = <span class="keyword">this</span>.array.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.array[j] &gt; <span class="keyword">this</span>.array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                swap(j, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-选择排序"><a href="#1-1-2-选择排序" class="headerlink" title="1.1.2 选择排序"></a>1.1.2 选择排序</h3><p>选择排序算法是一种原址比较排序算法。选择排序大致的思路是找到数据结构中的最小值并将其放置在第一位,接着找到第二小的值并将其放在第二位,以此类推。选择排序的时间复杂度为O(n2)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序</span></span><br><span class="line">selectionSort:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = <span class="keyword">this</span>.array.length;</span><br><span class="line">    <span class="keyword">var</span> indexMin;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        indexMin = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = i; j &lt; length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.array[indexMin] &gt; <span class="keyword">this</span>.array[j]) &#123;</span><br><span class="line">                indexMin = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (indexMin !== i) &#123;</span><br><span class="line">            <span class="keyword">this</span>.swap(indexMin,i);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-3-插入排序"><a href="#1-1-3-插入排序" class="headerlink" title="1.1.3 插入排序"></a>1.1.3 插入排序</h3><p>有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法,插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入排序的基本思想是：每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">insertionSort:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = <span class="keyword">this</span>.array.length;</span><br><span class="line">    <span class="keyword">var</span> j;</span><br><span class="line">    <span class="keyword">var</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; length; i++)&#123;</span><br><span class="line">        temp = <span class="keyword">this</span>.array[i];</span><br><span class="line">        j = i;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.array[j - <span class="number">1</span>] &gt; temp)&#123;</span><br><span class="line">            <span class="keyword">this</span>.array[j] = <span class="keyword">this</span>.array[j - <span class="number">1</span>];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-4-归并排序"><a href="#1-1-4-归并排序" class="headerlink" title="1.1.4 归并排序"></a>1.1.4 归并排序</h3><p>归并排序是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。时间复杂度为O(nlogn)，空间复杂度为O(n)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line">mergeSort:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mergeSortRec</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = array.length;</span><br><span class="line">        <span class="keyword">if</span> (length === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor(length/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> left = array.slice(<span class="number">0</span>,mid);</span><br><span class="line">        <span class="keyword">var</span> right = array.slice(mid,length);</span><br><span class="line">        <span class="keyword">return</span> merge(mergeSortRec(left),mergeSortRec(right));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left,right</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = [];</span><br><span class="line">        <span class="keyword">var</span> il = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> ir = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(il &lt; left.length &amp;&amp; ir &lt; right.length)&#123;</span><br><span class="line">            <span class="keyword">if</span> (left[il] &lt; right[ir]) &#123;</span><br><span class="line">                result.push(left[il++]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result.push(right[ir++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(il &lt; left.length)&#123;</span><br><span class="line">            result.push(left[il++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(ir &lt; right.length)&#123;</span><br><span class="line">            result.push(right[ir++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.array = mergeSortRec(<span class="keyword">this</span>.array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-5-快速排序"><a href="#1-1-5-快速排序" class="headerlink" title="1.1.5 快速排序"></a>1.1.5 快速排序</h3><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。时间负责度为O(n^2)，并且比其他负责度为O(n^2)的排序算法要好。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速排序，参考http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html</span></span><br><span class="line">quickSort:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(array.length/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> pivot = array.splice(pivotIndex,<span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> left = [];</span><br><span class="line">        <span class="keyword">var</span> right = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] &lt; pivot) &#123;</span><br><span class="line">                left.push(array[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right.push(array[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sort(left).concat([pivot],sort(right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.array = sort(<span class="keyword">this</span>.array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-排序算法的完整实现"><a href="#1-2-排序算法的完整实现" class="headerlink" title="1.2 排序算法的完整实现"></a>1.2 排序算法的完整实现</h2><p>各种排序算法的完整实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.array = [];</span><br><span class="line">&#125;</span><br><span class="line">ArrayList.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: ArrayList,</span><br><span class="line">    insert: function(item) &#123;</span><br><span class="line">        <span class="keyword">this</span>.array.push(item);</span><br><span class="line">    &#125;,</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.array.join();</span><br><span class="line">    &#125;,</span><br><span class="line">    swap: <span class="function"><span class="keyword">function</span>(<span class="params">index1, index2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> aux = <span class="keyword">this</span>.array[index2];</span><br><span class="line">        <span class="keyword">this</span>.array[index2] = <span class="keyword">this</span>.array[index1];</span><br><span class="line">        <span class="keyword">this</span>.array[index1] = aux;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//冒泡排序</span></span><br><span class="line">    bubbleSort: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = <span class="keyword">this</span>.array.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.array[j] &gt; <span class="keyword">this</span>.array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.swap(j, j + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//选择排序</span></span><br><span class="line">    selectionSort: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = <span class="keyword">this</span>.array.length;</span><br><span class="line">        <span class="keyword">var</span> indexMin;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            indexMin = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt; length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.array[indexMin] &gt; <span class="keyword">this</span>.array[j]) &#123;</span><br><span class="line">                    indexMin = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (indexMin !== i) &#123;</span><br><span class="line">                <span class="keyword">this</span>.swap(indexMin, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//插入排序</span></span><br><span class="line">    insertionSort: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = <span class="keyword">this</span>.array.length;</span><br><span class="line">        <span class="keyword">var</span> j;</span><br><span class="line">        <span class="keyword">var</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            temp = <span class="keyword">this</span>.array[i];</span><br><span class="line">            j = i;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.array[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">                <span class="keyword">this</span>.array[j] = <span class="keyword">this</span>.array[j - <span class="number">1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.array[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//归并排序</span></span><br><span class="line">    mergeSort: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">mergeSortRec</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> length = array.length;</span><br><span class="line">            <span class="keyword">if</span> (length === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> array;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">var</span> left = array.slice(<span class="number">0</span>, mid);</span><br><span class="line">            <span class="keyword">var</span> right = array.slice(mid, length);</span><br><span class="line">            <span class="keyword">return</span> merge(mergeSortRec(left), mergeSortRec(right));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = [];</span><br><span class="line">            <span class="keyword">var</span> il = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> ir = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (il &lt; left.length &amp;&amp; ir &lt; right.length) &#123;</span><br><span class="line">                <span class="keyword">if</span> (left[il] &lt; right[ir]) &#123;</span><br><span class="line">                    result.push(left[il++]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.push(right[ir++]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (il &lt; left.length) &#123;</span><br><span class="line">                result.push(left[il++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (ir &lt; right.length) &#123;</span><br><span class="line">                result.push(right[ir++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.array = mergeSortRec(<span class="keyword">this</span>.array);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//快速排序，参考http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html</span></span><br><span class="line">    quickSort:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> array;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(array.length/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">var</span> pivot = array.splice(pivotIndex,<span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> left = [];</span><br><span class="line">            <span class="keyword">var</span> right = [];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i] &lt; pivot) &#123;</span><br><span class="line">                    left.push(array[i]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    right.push(array[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sort(left).concat([pivot],sort(right));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.array = sort(<span class="keyword">this</span>.array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>排序方法验证：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNonSortedArray</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = size; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">//(function(i) &#123;</span></span><br><span class="line">        array.insert(i);</span><br><span class="line">        <span class="comment">//&#125;)(i);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">var</span> array = createNonSortedArray(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line">array.bubbleSort();</span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line">array.selectionSort();</span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line">array.insertionSort();</span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line">array.mergeSort();</span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br><span class="line">array.quickSort();</span><br><span class="line"><span class="built_in">console</span>.log(array.toString());</span><br></pre></td></tr></table></figure><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/huang303513/HTTP-OperationSystem-DataStructer/tree/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95Javascript">Javascript的数据结构与算法(三)源码</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript的数据结构与算法(三)</title>
      <link href="/2016/12/16/Javascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E4%B8%89)/"/>
      <url>/2016/12/16/Javascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h1 id="1-树"><a href="#1-树" class="headerlink" title="1 树"></a>1 树</h1><hr><p>一个树结构包含一系列存在父子关系的节点。每个节点都有一个父节点(除了顶部的第一个节点)以及零个或多个子节点。位于树顶部的节点叫作根节点(11)。它没有父节点。树中的每个元素都叫作节点,节点分 为内部节点和外部节点。至少有一个子节点的节点称为内部节点。没有子元素的节点称为外部节点或叶节点。节点的一个属性是深度,节点的深度取决于它的祖先节点的数量。树的高度取决于所有节点深度的最大值。一棵树也可以被分解成层级。根节点在第0层,它 的子节点在第1层,以此类推。</p><h2 id="1-1-二叉树和二叉搜索树"><a href="#1-1-二叉树和二叉搜索树" class="headerlink" title="1.1 二叉树和二叉搜索树"></a>1.1 二叉树和二叉搜索树</h2><p>二叉树中的节点最多只能有两个子节点:一个是左侧子节点,另一个是右侧子节点。这些定义有助于我们写出更高效的向树中插入、查找和删除节点的算法。</p><p>对于二叉搜索树，我们一般需要实现如下方法：</p><ul><li>insert(key): 向书中插入一个新的键。</li><li>search(key): 在树中查找一个键，如果节点存在，则返回true，否则返回false。</li><li>inOrderTraverse: 通过中序遍历方式遍历所有节点。</li><li>preOrderTraverse: 通过先序遍历方式遍历所有节点。</li><li>postOrderTraverse: 通过后序遍历方式遍历所有节点。</li><li>min: 返回树中最小的键/值。</li><li>max: 返回树中最大的健/值。</li><li>remove(key): 从树中移除某个键。</li></ul><h3 id="1-1-1-二叉搜索树的遍历"><a href="#1-1-1-二叉搜索树的遍历" class="headerlink" title="1.1.1 二叉搜索树的遍历"></a>1.1.1 二叉搜索树的遍历</h3><p>二叉搜索树(BST)是二叉树的一种,但是它只允许你在左侧节点存储(比父节点)小的值, 在右侧节点存储(比父节点)大(或者等于)的值。</p><p>中序遍历是一种以上行顺序访问BST所有节点的遍历方式,也就是以从最小到最大的顺序访问所有节点。中序遍历的一种应用就是对树进行排序操作。</p><p>先序遍历是以优先于后代节点的顺序访问每个节点的。先序遍历的一种应用是打印一个结构化的文档。先序遍历和中序遍历的不同点是,先序遍历会先访问节点本身,然后再访问它的左侧子节点，最后是右侧子节点。</p><p>后序遍历则是先访问节点的后代节点,再访问节点本身。后序遍历的一种应用是计算一个目录和它的子目录中所有文件所占空间的大小。</p><p>树中有三种经常执行的搜索类型，最小值，最大值，搜索特定的值。</p><h3 id="1-1-2-二叉搜索树的实现与基本使用"><a href="#1-1-2-二叉搜索树的实现与基本使用" class="headerlink" title="1.1.2 二叉搜索树的实现与基本使用"></a>1.1.2 二叉搜索树的实现与基本使用</h3><p>下面的minNode方法允许我们从树中任意一个节点开始寻找最小的键。我们可以使用它来找到一棵 树或它的子树中最小的键。因此,我们在调用minNode方法的时候传入树的根节点(行{1}), 因为我们想要找到整棵树的最小键。</p><p>可以把代码中的几个内部方法也写成二叉树结构的属性，这样可以灵活引用。这里我们就不具体修改了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinarySearchTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> <span class="keyword">this</span>.insert !== <span class="string">'function'</span>) &amp;&amp; (<span class="keyword">typeof</span> <span class="keyword">this</span>.insert !== <span class="string">'string'</span>)) &#123;</span><br><span class="line">        <span class="comment">//内部私有方法，用于插入节点</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">insertNode</span>(<span class="params">node, newNode</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (node.key &gt; newNode.key) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">                    node.left = newNode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    insertNode(node.left, newNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">                    node.right = newNode;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    insertNode(node.right, newNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        BinarySearchTree.prototype.insert = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(key);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.root === <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.root = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                insertNode(<span class="keyword">this</span>.root, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        BinarySearchTree.prototype.inOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//中序遍历的私有方法,从小到大遍历</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">inOrderTraverseNode</span>(<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    inOrderTraverseNode(node.left, callback);</span><br><span class="line">                    callback(node.key);</span><br><span class="line">                    inOrderTraverseNode(node.right, callback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            inOrderTraverseNode(<span class="keyword">this</span>.root, printNode);</span><br><span class="line">        &#125;;</span><br><span class="line">        BinarySearchTree.prototype.preOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">preOrderTraverseNode</span>(<span class="params">node,callback</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    callback(node.key);</span><br><span class="line">                    preOrderTraverseNode(node.left,callback);</span><br><span class="line">                    preOrderTraverseNode(node.right,callback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            preOrderTraverseNode(<span class="keyword">this</span>.root,callback);</span><br><span class="line">        &#125;;</span><br><span class="line">        BinarySearchTree.prototype.postOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">postOrderTraverseNode</span>(<span class="params">node,callback</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    postOrderTraverseNode(node.left,callback);</span><br><span class="line">                    postOrderTraverseNode(node.right,callback);</span><br><span class="line">                    callback(node.key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            postOrderTraverseNode(<span class="keyword">this</span>.root,callback);</span><br><span class="line">        &#125;;</span><br><span class="line">        BinarySearchTree.prototype.min = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">minNode</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (node) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(node &amp;&amp; node.left !== <span class="literal">null</span>)&#123;</span><br><span class="line">                        node = node.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> node.key;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//调用内部方法</span></span><br><span class="line">            <span class="keyword">return</span> minNode(<span class="keyword">this</span>.root);</span><br><span class="line">        &#125;;</span><br><span class="line">        BinarySearchTree.prototype.max = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">maxNode</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (node) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(node &amp;&amp; node.right !== <span class="literal">null</span>)&#123;</span><br><span class="line">                        node = node.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> node.key;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//调用内部方法</span></span><br><span class="line">            <span class="keyword">return</span> maxNode(<span class="keyword">this</span>.root);</span><br><span class="line">        &#125;;</span><br><span class="line">        BinarySearchTree.prototype.search = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">searchNode</span>(<span class="params">node,key</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">                    <span class="keyword">return</span> searchNode(node.right,key);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(node.key &gt; key)&#123;</span><br><span class="line">                    <span class="keyword">return</span> searchNode(node.left,key);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> searchNode(<span class="keyword">this</span>.root,key);</span><br><span class="line">        &#125;;</span><br><span class="line">        BinarySearchTree.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">findMinNode</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (node) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(node &amp;&amp; node.left !== <span class="literal">null</span>)&#123;</span><br><span class="line">                        node = node.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> node;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">removeNode</span>(<span class="params">node,key</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">                    node.left = removeNode(node.left,key);</span><br><span class="line">                    <span class="keyword">return</span> node;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &gt; node.key)&#123;</span><br><span class="line">                    node.right = removeNode(node.right,key);</span><br><span class="line">                    <span class="keyword">return</span> node;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//键等于node.key</span></span><br><span class="line">                    <span class="comment">//第一种情况，一个叶节点</span></span><br><span class="line">                    <span class="keyword">if</span> (node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">                        node = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">return</span> node;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//第二种情况 一个只有一个子节点的节点</span></span><br><span class="line">                    <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">                        node = node.right;</span><br><span class="line">                        <span class="keyword">return</span> node;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (node.right === <span class="literal">null</span>)&#123;</span><br><span class="line">                        node = node.left;</span><br><span class="line">                        <span class="keyword">return</span> node;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//第三种情况 一个有两个子节点的节点</span></span><br><span class="line">                    <span class="keyword">var</span> aux = findMinNode(node.right);</span><br><span class="line">                    node.key = aux.key;</span><br><span class="line">                    node.right = removeNode(node.right,aux.key);</span><br><span class="line">                    <span class="keyword">return</span> node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.root = removeNode(<span class="keyword">this</span>.root,key);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉树基本使用：<br><br><img src="/assets/postImages/2016121601.png" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历节点操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printNode</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> tree = <span class="keyword">new</span> BinarySearchTree();</span><br><span class="line">tree.insert(<span class="number">11</span>);</span><br><span class="line">tree.insert(<span class="number">7</span>);</span><br><span class="line">tree.insert(<span class="number">15</span>);</span><br><span class="line">tree.insert(<span class="number">5</span>);</span><br><span class="line">tree.insert(<span class="number">3</span>);</span><br><span class="line">tree.insert(<span class="number">9</span>);</span><br><span class="line">tree.insert(<span class="number">8</span>);</span><br><span class="line">tree.insert(<span class="number">10</span>);</span><br><span class="line">tree.insert(<span class="number">13</span>);</span><br><span class="line">tree.insert(<span class="number">12</span>);</span><br><span class="line">tree.insert(<span class="number">14</span>);</span><br><span class="line">tree.insert(<span class="number">20</span>);</span><br><span class="line">tree.insert(<span class="number">18</span>);</span><br><span class="line">tree.insert(<span class="number">25</span>);</span><br><span class="line">tree.insert(<span class="number">6</span>);</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line">tree.inOrderTraverse(printNode);<span class="comment">//3 5 6 7 8 9 10 11 12 13 14 15 18 20 25</span></span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line">tree.preOrderTraverse(printNode);<span class="comment">//11 7 5 3 6 9 8 10 15 13 12 14 20 18 25</span></span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line">tree.postOrderTraverse(printNode);<span class="comment">//3 6 5 8 10 9 7 12 14 13 18 25 20 15 11</span></span><br><span class="line"><span class="built_in">console</span>.log(tree.min());</span><br><span class="line"><span class="built_in">console</span>.log(tree.max());</span><br><span class="line"><span class="comment">//搜索</span></span><br><span class="line"><span class="built_in">console</span>.log(tree.search(<span class="number">1</span>) ? <span class="string">'Key 1 found.'</span> : <span class="string">'Key 1 not found.'</span>);<span class="comment">//Key 1 not found.</span></span><br><span class="line"><span class="built_in">console</span>.log(tree.search(<span class="number">8</span>) ? <span class="string">'Key 8 found.'</span> : <span class="string">'Key 8 not found.'</span>);<span class="comment">//Key 8 found.</span></span><br><span class="line"><span class="comment">//移除节点</span></span><br><span class="line">tree.remove(<span class="number">15</span>);</span><br><span class="line">tree.inOrderTraverse(printNode);<span class="comment">////3 5 6 7 8 9 10 11 12 13 14 15 18 20 25</span></span><br><span class="line"><span class="comment">//console.log(tree.remove(100));</span></span><br></pre></td></tr></table></figure><h1 id="2-图"><a href="#2-图" class="headerlink" title="2 图"></a>2 图</h1><hr><h2 id="2-1-图的相关概念"><a href="#2-1-图的相关概念" class="headerlink" title="2.1 图的相关概念"></a>2.1 图的相关概念</h2><p>由一条边连接在一起的顶点称为相邻顶点。一个顶点的度是其相邻顶点的数量。如果图中不存在环,则称该图是无环的。</p><p>如果图中每两个顶点间都存在路径,则该图是连通的。</p><p>图可以是无向的(边没有方向)或是有向的(有向图)。</p><p>图还可以是未加权的或是加权的。</p><p>图最常见的实现是邻接矩阵。每个节点都和一个整数相关联,该整数将作为数组的索引。我 们用一个二维数组来表示顶点之间的连接。如果索引为i的节点和索引为j的节点相邻,则array[i][j] === 1,否则array[i][j] === 0,邻接矩阵如下图所示:<br><br><img src="/assets/postImages/2016121602.png" alt="img"></p><p>我们也可以使用一种叫作邻接表的动态数据结构来表示图。邻接表由图中每个顶点的相邻顶点列表所组成。存在好几种方式来表示这种数据结构。我们可以用列表(数组)、链表,甚至是 散列表或是字典来表示相邻顶点列表。下面的示意图展示了邻接表数据结构。<br><br><img src="/assets/postImages/2016121603.png" alt="img"></p><p>我们还可以用关联矩阵来表示图。在关联矩阵中,矩阵的行表示顶点,列表示边。如下图所示,我们使用二维数组来表示两者之间的连通性,如果顶点v是边e的入射点,则array[v][e] === 1; 否则,array[v][e]===0。关联矩阵通常用于边的数量比顶点多的情况下,以节省空间和内存。<br><br><img src="/assets/postImages/2016121604.png" alt="img"></p><p>尽管邻接表可能对大多数问题来说都是更好的选择,但以上两种表示法都很有用,且它们有 着不同的性质(例如,要找出顶点v和w是否相邻,使用邻接矩阵会比较快)。在后面示例中, 我们将会使用邻接表表示法。</p><h2 id="2-2-图的遍历"><a href="#2-2-图的遍历" class="headerlink" title="2.2 图的遍历"></a>2.2 图的遍历</h2><p>和树数据结构类似,我们可以访问图的所有节点。有两种算法可以对图进行遍历:广度优先 搜索(Breadth-First Search,BFS)和深度优先搜索(Depth-First Search,DFS)。图遍历可以用来寻找特定的顶点或寻找两个顶点之间的路径,检查图是否连通,检查图是否含有环等。</p><p>图遍历算法的思想是必须追踪每个第一次访问的节点,并且追踪有哪些节点还没有被完全探索。对于两种图遍历算法,都需要明确指出第一个被访问的顶点。</p><p>完全探索一个顶点要求我们查看该顶点的每一条边。对于每一条边所连接的没有被访问过的顶点,将其标注为被发现的,并将其加进待访问顶点列表中。</p><p>为了保证算法的效率,务必访问每个顶点至多两次。连通图中每条边和顶点都会被访问到。广度优先搜索算法和深度优先搜索算法基本上是相同的,只有一点不同,那就是待访问顶点 列表的数据结构。</p><p><img src="/assets/postImages/2016121605.png" alt="img"></p><h2 id="2-3-广度优先搜索"><a href="#2-3-广度优先搜索" class="headerlink" title="2.3 广度优先搜索"></a>2.3 广度优先搜索</h2><p>广度优先搜索算法会从指定的第一个顶点开始遍历图,先访问其所有的相邻点,就像一次访问图的一层。换句话说,就是先宽后深地访问顶点。</p><p>广度优先搜索和深度优先搜索都需要标注被访问过的顶点。为此,我们将使用一个辅助数组color。由于当算法开始执行时,所有的顶点颜色都是白色(行{1}),所以我们可以创建一个辅 助函数initializeColor,为这两个算法执行此初始化操作。</p><p>我们会用到一个队列结构。<a href="http://huang303513.github.io/2016/12/08/Javascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E4%B8%80" target="_blank" rel="noopener">队列的实现</a>.html)。</p><h3 id="2-3-1广度优先搜索的基本实现"><a href="#2-3-1广度优先搜索的基本实现" class="headerlink" title="2.3.1广度优先搜索的基本实现"></a>2.3.1广度优先搜索的基本实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//广度优先搜索算法 v表示初始节点，callback表示回调。</span></span><br><span class="line">Graph.prototype.bfs = <span class="function"><span class="keyword">function</span>(<span class="params">v, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = initializeColor(<span class="keyword">this</span>.vertices);</span><br><span class="line">    <span class="keyword">var</span> queue = <span class="keyword">new</span> Queue();<span class="comment">//存储待访问和待探索的节点</span></span><br><span class="line">    queue.enqueue(v);</span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">var</span> u = queue.dequeue();</span><br><span class="line">        <span class="comment">//获取u的相邻节点列表</span></span><br><span class="line">        <span class="keyword">var</span> neighbors = <span class="keyword">this</span>.adjList.get(u);</span><br><span class="line">        color[u] = <span class="string">'grey'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; neighbors.length; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">            <span class="comment">//如果从没有标记过，则标记为grey，加入队列</span></span><br><span class="line">            <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">                color[w] = <span class="string">'grey'</span>;</span><br><span class="line">                queue.enqueue(w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//所有相邻节点都被标记了，所以改为黑色</span></span><br><span class="line">        color[u] = <span class="string">'black'</span>;</span><br><span class="line">        <span class="comment">//如果对于标记过得节点有操作，通过callback操作</span></span><br><span class="line">        <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">            callback(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-广度优先实现最短路径查找"><a href="#2-3-2-广度优先实现最短路径查找" class="headerlink" title="2.3.2 广度优先实现最短路径查找"></a>2.3.2 广度优先实现最短路径查找</h3><p>给定一个图G和源顶点v,找出对每个顶点u,u和v之间最短路径的距离。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用BFS实现最短路径</span></span><br><span class="line">Graph.prototype.BFS = <span class="function"><span class="keyword">function</span>(<span class="params">v, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = initializeColor(<span class="keyword">this</span>.vertices);</span><br><span class="line">    <span class="keyword">var</span> queue = <span class="keyword">new</span> Queue(); <span class="comment">//存储待访问和待探索的节点</span></span><br><span class="line">    <span class="keyword">var</span> d = [];</span><br><span class="line">    <span class="keyword">var</span> pred = [];</span><br><span class="line">    queue.enqueue(v);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices.length; i++) &#123;</span><br><span class="line">        d[<span class="keyword">this</span>.vertices[i]] = <span class="number">0</span>;</span><br><span class="line">        pred[<span class="keyword">this</span>.vertices[i]] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">var</span> u = queue.dequeue();</span><br><span class="line">        <span class="comment">//获取u的相邻节点列表</span></span><br><span class="line">        <span class="keyword">var</span> neighbors = <span class="keyword">this</span>.adjList.get(u);</span><br><span class="line">        color[u] = <span class="string">'grey'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">            <span class="comment">//如果从没有标记过，则标记为grey，加入队列</span></span><br><span class="line">            <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">                color[w] = <span class="string">'grey'</span>;</span><br><span class="line">                d[w] = d[u] + <span class="number">1</span>;</span><br><span class="line">                pred[w] = u;</span><br><span class="line">                queue.enqueue(w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//所有相邻节点都被标记了，所以改为黑色</span></span><br><span class="line">        color[u] = <span class="string">'black'</span>;</span><br><span class="line">        <span class="comment">//如果对于标记过得节点有操作，通过callback操作</span></span><br><span class="line">        <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">            callback(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        distances: d,</span><br><span class="line">        predecessors: pred</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-深度优先搜索基本实现"><a href="#2-3-3-深度优先搜索基本实现" class="headerlink" title="2.3.3 深度优先搜索基本实现"></a>2.3.3 深度优先搜索基本实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深度优先基本实现</span></span><br><span class="line">Graph.prototype.dfs = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfsVisit</span>(<span class="params">u, color, callback</span>) </span>&#123;</span><br><span class="line">        color[u] = <span class="string">'grey'</span>;</span><br><span class="line">        <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">            callback(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> neighbors = self.adjList.get(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">            <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">                dfsVisit(w, color, callback);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        color[u] = <span class="string">'black'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> color = initializeColor(<span class="keyword">this</span>.vertices);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (color[<span class="keyword">this</span>.vertices[i]] === <span class="string">'white'</span>) &#123;</span><br><span class="line">            dfsVisit(<span class="keyword">this</span>.vertices[i], color, callback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-深度优先搜索实现拓扑排序"><a href="#2-3-4-深度优先搜索实现拓扑排序" class="headerlink" title="2.3.4 深度优先搜索实现拓扑排序"></a>2.3.4 深度优先搜索实现拓扑排序</h3><p>当我们需要编排一些任务或步骤的执行顺序时,这称为拓扑排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DFS可以实现输出被访问顶点的顺序，可以用于拓扑排序实现。</span></span><br><span class="line">Graph.prototype.DFS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">DFSVisit</span>(<span class="params">u,color,d,f,p</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//console.log('discovered ' + u);</span></span><br><span class="line">        color[u] = <span class="string">'grey'</span>;</span><br><span class="line">        d[u] = ++time;</span><br><span class="line">        <span class="keyword">var</span> neighbors = self.adjList.get(u);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; neighbors.length; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">            <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">                p[w] = u;</span><br><span class="line">                DFSVisit(w,color,d,f,p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        color[u] = <span class="string">'black'</span>;</span><br><span class="line">        f[u] = ++time;</span><br><span class="line">        <span class="comment">//console.log('explored ' + u);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> color = initializeColor(<span class="keyword">this</span>.vertices);</span><br><span class="line">    <span class="keyword">var</span> d = [];</span><br><span class="line">    <span class="keyword">var</span> f = [];</span><br><span class="line">    <span class="keyword">var</span> p = [];</span><br><span class="line">    <span class="keyword">var</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices.length; i++)&#123;</span><br><span class="line">        f[<span class="keyword">this</span>.vertices[i]] = <span class="number">0</span>;</span><br><span class="line">        d[<span class="keyword">this</span>.vertices[i]] = <span class="number">0</span>;</span><br><span class="line">        p[<span class="keyword">this</span>.vertices[i]] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="keyword">this</span>.vertices.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (color[<span class="keyword">this</span>.vertices[i]] === <span class="string">'white'</span>) &#123;</span><br><span class="line">            DFSVisit(<span class="keyword">this</span>.vertices[i], color, d, f, p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        discovery:d,</span><br><span class="line">        finished:f,</span><br><span class="line">        predecessors:p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-4-图的实现"><a href="#2-4-图的实现" class="headerlink" title="2.4 图的实现"></a>2.4 图的实现</h2><p>我们会实现一个邻接表的图结构。我们使用一个数组来存储图中所有顶点的名字,以及一个字典 <a href="http://huang303513.github.io/2016/12/14/Javascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E4%BA%8C" target="_blank" rel="noopener">字典实现</a>.html)来存储邻接表字典将会使用顶点的名字作为键,邻接顶点列表作为值。vertices数组和adjList字典两者都是我们Graph类的私有属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Graph</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.vertices = []; <span class="comment">//点数组</span></span><br><span class="line">    <span class="keyword">this</span>.adjList = <span class="keyword">new</span> Dictionary();</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> <span class="keyword">this</span>.addVertex !== <span class="string">'function'</span>) &amp;&amp; (<span class="keyword">typeof</span> <span class="keyword">this</span>.addVertex !== <span class="string">'string'</span>)) &#123;</span><br><span class="line">        <span class="comment">//私有方法，标记节点颜色 未被访问过是white 被发现是grey 已被探索black。</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">initializeColor</span>(<span class="params">vertices</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> color = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vertices.length; i++) &#123;</span><br><span class="line">                color[vertices[i]] = <span class="string">'white'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> color;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加节点</span></span><br><span class="line">        Graph.prototype.addVertex = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.vertices.push(v);</span><br><span class="line">            <span class="keyword">this</span>.adjList.set(v, []); <span class="comment">//给节点v设置一个空数组作为值。</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//添加边</span></span><br><span class="line">        Graph.prototype.addEdge = <span class="function"><span class="keyword">function</span>(<span class="params">v, w</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.adjList.get(v).push(w); <span class="comment">//先获取v节点对应的数组，然后把w推入数组中，这样就表示一条v到w的线</span></span><br><span class="line">            <span class="keyword">this</span>.adjList.get(w).push(v);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//广度优先d</span></span><br><span class="line">        <span class="comment">//搜索算法 v表示初始节点，callback表示回调。</span></span><br><span class="line">        Graph.prototype.bfs = <span class="function"><span class="keyword">function</span>(<span class="params">v, callback</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> color = initializeColor(<span class="keyword">this</span>.vertices);</span><br><span class="line">            <span class="keyword">var</span> queue = <span class="keyword">new</span> Queue(); <span class="comment">//存储待访问和待探索的节点</span></span><br><span class="line">            queue.enqueue(v);</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">var</span> u = queue.dequeue();</span><br><span class="line">                <span class="comment">//获取u的相邻节点列表</span></span><br><span class="line">                <span class="keyword">var</span> neighbors = <span class="keyword">this</span>.adjList.get(u);</span><br><span class="line">                color[u] = <span class="string">'grey'</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">                    <span class="comment">//如果从没有标记过，则标记为grey，加入队列</span></span><br><span class="line">                    <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">                        color[w] = <span class="string">'grey'</span>;</span><br><span class="line">                        queue.enqueue(w);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//所有相邻节点都被标记了，所以改为黑色</span></span><br><span class="line">                color[u] = <span class="string">'black'</span>;</span><br><span class="line">                <span class="comment">//如果对于标记过得节点有操作，通过callback操作</span></span><br><span class="line">                <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">                    callback(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//用BFS实现最短路径</span></span><br><span class="line">        Graph.prototype.BFS = <span class="function"><span class="keyword">function</span>(<span class="params">v, callback</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> color = initializeColor(<span class="keyword">this</span>.vertices);</span><br><span class="line">            <span class="keyword">var</span> queue = <span class="keyword">new</span> Queue(); <span class="comment">//存储待访问和待探索的节点</span></span><br><span class="line">            <span class="keyword">var</span> d = [];</span><br><span class="line">            <span class="keyword">var</span> pred = [];</span><br><span class="line">            queue.enqueue(v);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices.length; i++) &#123;</span><br><span class="line">                d[<span class="keyword">this</span>.vertices[i]] = <span class="number">0</span>;</span><br><span class="line">                pred[<span class="keyword">this</span>.vertices[i]] = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">var</span> u = queue.dequeue();</span><br><span class="line">                <span class="comment">//获取u的相邻节点列表</span></span><br><span class="line">                <span class="keyword">var</span> neighbors = <span class="keyword">this</span>.adjList.get(u);</span><br><span class="line">                color[u] = <span class="string">'grey'</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">                    <span class="comment">//如果从没有标记过，则标记为grey，加入队列</span></span><br><span class="line">                    <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">                        color[w] = <span class="string">'grey'</span>;</span><br><span class="line">                        d[w] = d[u] + <span class="number">1</span>;</span><br><span class="line">                        pred[w] = u;</span><br><span class="line">                        queue.enqueue(w);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//所有相邻节点都被标记了，所以改为黑色</span></span><br><span class="line">                color[u] = <span class="string">'black'</span>;</span><br><span class="line">                <span class="comment">//如果对于标记过得节点有操作，通过callback操作</span></span><br><span class="line">                <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">                    callback(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                distances: d,</span><br><span class="line">                predecessors: pred</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//深度优先基本实现</span></span><br><span class="line">        Graph.prototype.dfs = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">dfsVisit</span>(<span class="params">u, color, callback</span>) </span>&#123;</span><br><span class="line">                color[u] = <span class="string">'grey'</span>;</span><br><span class="line">                <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">                    callback(u);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> neighbors = self.adjList.get(u);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; neighbors.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">                    <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">                        dfsVisit(w, color, callback);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                color[u] = <span class="string">'black'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> color = initializeColor(<span class="keyword">this</span>.vertices);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (color[<span class="keyword">this</span>.vertices[i]] === <span class="string">'white'</span>) &#123;</span><br><span class="line">                    dfsVisit(<span class="keyword">this</span>.vertices[i], color, callback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//DFS可以实现输出被访问顶点的顺序</span></span><br><span class="line">        Graph.prototype.DFS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> time = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">DFSVisit</span>(<span class="params">u,color,d,f,p</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//console.log('discovered ' + u);</span></span><br><span class="line">                color[u] = <span class="string">'grey'</span>;</span><br><span class="line">                d[u] = ++time;</span><br><span class="line">                <span class="keyword">var</span> neighbors = self.adjList.get(u);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; neighbors.length; i++)&#123;</span><br><span class="line">                    <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">                    <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>) &#123;</span><br><span class="line">                        p[w] = u;</span><br><span class="line">                        DFSVisit(w,color,d,f,p);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                color[u] = <span class="string">'black'</span>;</span><br><span class="line">                f[u] = ++time;</span><br><span class="line">                <span class="comment">//console.log('explored ' + u);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> color = initializeColor(<span class="keyword">this</span>.vertices);</span><br><span class="line">            <span class="keyword">var</span> d = [];</span><br><span class="line">            <span class="keyword">var</span> f = [];</span><br><span class="line">            <span class="keyword">var</span> p = [];</span><br><span class="line">            <span class="keyword">var</span> time = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices.length; i++)&#123;</span><br><span class="line">                f[<span class="keyword">this</span>.vertices[i]] = <span class="number">0</span>;</span><br><span class="line">                d[<span class="keyword">this</span>.vertices[i]] = <span class="number">0</span>;</span><br><span class="line">                p[<span class="keyword">this</span>.vertices[i]] = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="keyword">this</span>.vertices.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (color[<span class="keyword">this</span>.vertices[i]] === <span class="string">'white'</span>) &#123;</span><br><span class="line">                    DFSVisit(<span class="keyword">this</span>.vertices[i], color, d, f, p);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                discovery:d,</span><br><span class="line">                finished:f,</span><br><span class="line">                predecessors:p</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Graph.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> s = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices.length; i++) &#123;</span><br><span class="line">                s += <span class="keyword">this</span>.vertices[i] + <span class="string">' -&gt; '</span>;</span><br><span class="line">                <span class="keyword">var</span> neighbors = <span class="keyword">this</span>.adjList.get(<span class="keyword">this</span>.vertices[i]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; neighbors.length; j++) &#123;</span><br><span class="line">                    s += neighbors[j] + <span class="string">' '</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                s += <span class="string">','</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-图的基本使用"><a href="#2-5-图的基本使用" class="headerlink" title="2.5 图的基本使用"></a>2.5 图的基本使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> graph = <span class="keyword">new</span> Graph();</span><br><span class="line"><span class="keyword">var</span> myVertices = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>];</span><br><span class="line"><span class="comment">//添加点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myVertices.length; i++) &#123;</span><br><span class="line">    graph.addVertex(myVertices[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加点之间的关系</span></span><br><span class="line">graph.addEdge(<span class="string">'A'</span>, <span class="string">'B'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'A'</span>, <span class="string">'C'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'A'</span>, <span class="string">'D'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'C'</span>, <span class="string">'D'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'C'</span>, <span class="string">'G'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'D'</span>, <span class="string">'G'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'D'</span>, <span class="string">'H'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'B'</span>, <span class="string">'E'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'B'</span>, <span class="string">'F'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'E'</span>, <span class="string">'I'</span>);</span><br><span class="line"><span class="comment">//console.log(graph.toString());//A -&gt; B C D ,B -&gt; A E F ,C -&gt; A D G ,D -&gt; A C G H ,E -&gt; B I ,F -&gt; B ,G -&gt; C D ,H -&gt; D ,I -&gt; E </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printNode</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Visited vertex: '</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//广度搜索算法</span></span><br><span class="line"><span class="comment">//graph.bfs(myVertices[0],printNode);</span></span><br><span class="line"><span class="comment">//上行输出结果，节点的访问顺序</span></span><br><span class="line"><span class="comment">// Visited vertex: A</span></span><br><span class="line"><span class="comment">// Visited vertex: B</span></span><br><span class="line"><span class="comment">// Visited vertex: C</span></span><br><span class="line"><span class="comment">// Visited vertex: D</span></span><br><span class="line"><span class="comment">// Visited vertex: E</span></span><br><span class="line"><span class="comment">// Visited vertex: F</span></span><br><span class="line"><span class="comment">// Visited vertex: G</span></span><br><span class="line"><span class="comment">// Visited vertex: H</span></span><br><span class="line"><span class="comment">// Visited vertex: I</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//广度优先搜索的使用:最短路径算法</span></span><br><span class="line"><span class="keyword">var</span> shortestPathA = graph.BFS(myVertices[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//console.log(shortestPathA);</span></span><br><span class="line"><span class="comment">//上行输出结果：</span></span><br><span class="line"><span class="comment">// &#123; distances: [ A: 0, B: 1, C: 1, D: 1, E: 2, F: 2, G: 2, H: 2, I: 3 ],</span></span><br><span class="line"><span class="comment">//   predecessors: </span></span><br><span class="line"><span class="comment">//    [ A: null,</span></span><br><span class="line"><span class="comment">//      B: 'A',</span></span><br><span class="line"><span class="comment">//      C: 'A',</span></span><br><span class="line"><span class="comment">//      D: 'A',</span></span><br><span class="line"><span class="comment">//      E: 'B',</span></span><br><span class="line"><span class="comment">//      F: 'B',</span></span><br><span class="line"><span class="comment">//      G: 'C',</span></span><br><span class="line"><span class="comment">//      H: 'D',</span></span><br><span class="line"><span class="comment">//      I: 'E' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//深入优先搜索算法</span></span><br><span class="line"><span class="comment">//graph.dfs(printNode);</span></span><br><span class="line"><span class="comment">//上一行运行结果，节点的访问顺序</span></span><br><span class="line"><span class="comment">// Visited vertex: A</span></span><br><span class="line"><span class="comment">// Visited vertex: B</span></span><br><span class="line"><span class="comment">// Visited vertex: E</span></span><br><span class="line"><span class="comment">// Visited vertex: I</span></span><br><span class="line"><span class="comment">// Visited vertex: F</span></span><br><span class="line"><span class="comment">// Visited vertex: C</span></span><br><span class="line"><span class="comment">// Visited vertex: D</span></span><br><span class="line"><span class="comment">// Visited vertex: G</span></span><br><span class="line"><span class="comment">// Visited vertex: H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先搜索查找访问过程：</span></span><br><span class="line">graph = <span class="keyword">new</span> Graph();</span><br><span class="line">myVertices = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;myVertices.length; i++)&#123;</span><br><span class="line">    graph.addVertex(myVertices[i]);</span><br><span class="line">&#125;</span><br><span class="line">graph.addEdge(<span class="string">'A'</span>, <span class="string">'C'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'A'</span>, <span class="string">'D'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'B'</span>, <span class="string">'D'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'B'</span>, <span class="string">'E'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'C'</span>, <span class="string">'F'</span>);</span><br><span class="line">graph.addEdge(<span class="string">'F'</span>, <span class="string">'E'</span>);</span><br><span class="line"><span class="keyword">var</span> result = graph.DFS();</span><br><span class="line"><span class="comment">// 上面运行输出：</span></span><br><span class="line"><span class="comment">// discovered A</span></span><br><span class="line"><span class="comment">// discovered C</span></span><br><span class="line"><span class="comment">// discovered F</span></span><br><span class="line"><span class="comment">// discovered E</span></span><br><span class="line"><span class="comment">// discovered B</span></span><br><span class="line"><span class="comment">// discovered D</span></span><br><span class="line"><span class="comment">// explored D</span></span><br><span class="line"><span class="comment">// explored B</span></span><br><span class="line"><span class="comment">// explored E</span></span><br><span class="line"><span class="comment">// explored F</span></span><br><span class="line"><span class="comment">// explored C</span></span><br><span class="line"><span class="comment">// explored A</span></span><br></pre></td></tr></table></figure><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/huang303513/HTTP-OperationSystem-DataStructer/tree/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95Javascript">Javascript的数据结构与算法(三)源码</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript的数据结构与算法(二)</title>
      <link href="/2016/12/14/Javascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E4%BA%8C)/"/>
      <url>/2016/12/14/Javascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="1集合"><a href="#1集合" class="headerlink" title="1集合"></a>1集合</h1><hr><h2 id="1-1集合的实现"><a href="#1-1集合的实现" class="headerlink" title="1.1集合的实现"></a>1.1集合的实现</h2><p>集合是由一组无序且唯一(即不能重复)的项组成的。这个数据结构使用了与有限集合相同 的数学概念,但应用在计算机科学的数据结构中。</p><p>集合中常用方法列表：</p><ul><li>add(value):向集合中添加一个新的项。</li><li>remove(value):从集合中移除一个值。</li><li>has(value):如果在集合中，返回true，否则返回false。</li><li>clear():清除集合中的所有项。</li><li>size():返回集合所包含元素的数量。</li><li>values():返回一个包含集合中所有值得数组。</li><li>union(otherSet):并集操作，返回一个包含两个集合中所有元素的新集合。</li><li>intersection(otherSet):交集操作，返回一个包含两个集合中共有元素的新集合。</li><li>difference(otherSet):差集操作，返回一个包含左右存在于第一个集合并且不存在于第二个集合的元素的新集合。</li><li>subset(otherSet):子集操作，验证一个给定集合是否是另一个集合的子集，返回true和false。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Set</span>.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Set,</span><br><span class="line">    has: function(value) &#123;</span><br><span class="line">        <span class="keyword">return</span> value <span class="keyword">in</span> <span class="keyword">this</span>.items;</span><br><span class="line">    &#125;,</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.has(value)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.items[value] = value;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.has(value)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>.items[value];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    clear: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    size: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.items).length;</span><br><span class="line">    &#125;,</span><br><span class="line">    values: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.items);</span><br><span class="line">    &#125;,</span><br><span class="line">    union: <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">        <span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            unionSet.add(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        values = otherSet.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            unionSet.add(values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> unionSet;</span><br><span class="line">    &#125;,</span><br><span class="line">    intersection: <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">        <span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (otherSet.has(values[i])) &#123;</span><br><span class="line">                intersectionSet.add(values[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intersectionSet;</span><br><span class="line">    &#125;,</span><br><span class="line">    difference: <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">        <span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!otherSet.has(values[i])) &#123;</span><br><span class="line">                differenceSet.add(values[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> differenceSet;</span><br><span class="line">    &#125;,</span><br><span class="line">    subset: <span class="function"><span class="keyword">function</span>(<span class="params">otherSet</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.size() &gt; otherSet.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!otherSet.has(values[i])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-2集合的使用"><a href="#1-2集合的使用" class="headerlink" title="1.2集合的使用"></a>1.2集合的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = new Set();</span><br><span class="line"><span class="keyword">set</span>.add(1);</span><br><span class="line">console.log(<span class="keyword">set</span>.values());//["1"]</span><br><span class="line">console.log(<span class="keyword">set</span>.has(1));//true</span><br><span class="line">console.log(<span class="keyword">set</span>.size());//1</span><br><span class="line"><span class="keyword">set</span>.add(2);</span><br><span class="line">console.log(<span class="keyword">set</span>.values());//["1","2"]</span><br><span class="line">console.log(<span class="keyword">set</span>.has(2));//true</span><br><span class="line">console.log(<span class="keyword">set</span>.size());//2</span><br><span class="line"><span class="keyword">set</span>.remove(2);</span><br><span class="line">console.log(<span class="keyword">set</span>.values());//["1"]</span><br></pre></td></tr></table></figure><p>交集、并集、子集、差集的使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//并集测试</span></span><br><span class="line"><span class="keyword">var</span> setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br><span class="line">setB.add(<span class="number">5</span>);</span><br><span class="line">setB.add(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">var</span> setAB = setA.union(setB);</span><br><span class="line"><span class="built_in">console</span>.log(setAB.values()); <span class="comment">// ["1", "2", "3", "4", "5", "6"]</span></span><br><span class="line"><span class="comment">//交集测试</span></span><br><span class="line">setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line">setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> intersectionAB = setA.intersection(setB);</span><br><span class="line"><span class="built_in">console</span>.log(intersectionAB.values()); <span class="comment">// ["2", "3"]</span></span><br><span class="line"><span class="comment">//差集侧事故</span></span><br><span class="line">setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line">setA.add(<span class="number">3</span>);</span><br><span class="line">setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setB.add(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> differenceAB = setA.difference(setB);</span><br><span class="line"><span class="built_in">console</span>.log(differenceAB.values()); <span class="comment">//["1"]</span></span><br><span class="line"><span class="comment">//子集测试</span></span><br><span class="line">setA = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setA.add(<span class="number">1</span>);</span><br><span class="line">setA.add(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> setB = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setB.add(<span class="number">1</span>);</span><br><span class="line">setB.add(<span class="number">2</span>);</span><br><span class="line">setB.add(<span class="number">3</span>);</span><br><span class="line">setC = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">setC.add(<span class="number">2</span>);</span><br><span class="line">setC.add(<span class="number">3</span>);</span><br><span class="line">setC.add(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(setA.subset(setB)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(setA.subset(setC)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h1 id="2字典和散列表"><a href="#2字典和散列表" class="headerlink" title="2字典和散列表"></a>2字典和散列表</h1><hr><p>集合、字典和散列表可以存储不重复的值。在集合中,我们感兴趣的是每个值本身,并把它 当作主要元素。在字典中,我们用[键,值]的形式来存储数据。在散列表中也是一样(也是以[键, 值]对的形式来存储数据)。</p><h2 id="2-1字典"><a href="#2-1字典" class="headerlink" title="2.1字典"></a>2.1字典</h2><p>集合表示一组互不相同的元素(不重复的元素)。在字典中,存储的是[键,值] 对,其中键名是用来查询特定元素的。字典和集合很相似,集合以[值,值]的形式存储元素,字 典则是以[键,值]的形式来存储元素。字典也称作映射。下面是字典需要实现的方法：</p><ul><li>set(key,value): 向字典中添加新元素。</li><li>remove(key): 通过使用键值来从字典中语出键值对应的数据值。</li><li>has(key): 如果某个键值存在于这个字典中，否则返回true，反之则返回false。</li><li>get(key): 通过键值查询特定的数值并且返回。</li><li>clear(): 将这个字典中的所有元素全部删除。</li><li>size(): 返回字典中包含元素的数量。</li><li>keys(): 将字典所包含的所有键名以数组的形式返回。</li><li>values(): 将字典所包含的所有数值以数组的形式返回。</li><li>getItems(): 返回字典。</li></ul><h3 id="2-1-1字典的实现"><a href="#2-1-1字典的实现" class="headerlink" title="2.1.1字典的实现"></a>2.1.1字典的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dictionary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">Dictionary.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Dictionary,</span><br><span class="line">    has: function(key) &#123;</span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> <span class="keyword">this</span>.items;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(key, value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.items[key] = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.has(key)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>.items[key];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>: function(key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.has(key) ? <span class="keyword">this</span>.items[key] : <span class="literal">undefined</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    values: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> values = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">this</span>.items) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.has(key)) &#123;</span><br><span class="line">                values.push(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;,</span><br><span class="line">    clear: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    size: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.items).length;</span><br><span class="line">    &#125;,</span><br><span class="line">    keys: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.items);</span><br><span class="line">    &#125;,</span><br><span class="line">    getItems: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-1-2字典的基本使用"><a href="#2-1-2字典的基本使用" class="headerlink" title="2.1.2字典的基本使用"></a>2.1.2字典的基本使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dictionary = <span class="keyword">new</span> Dictionary();</span><br><span class="line"><span class="built_in">console</span>.log(dictionary.size()); <span class="comment">//0</span></span><br><span class="line">dictionary.set(<span class="string">'first'</span>, <span class="string">'huang'</span>);</span><br><span class="line">dictionary.set(<span class="string">'second'</span>, <span class="string">'cheng'</span>);</span><br><span class="line">dictionary.set(<span class="string">'third'</span>, <span class="string">'du'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dictionary.has(<span class="string">'first'</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(dictionary.get(<span class="string">'second'</span>)); <span class="comment">//cheng</span></span><br><span class="line"><span class="built_in">console</span>.log(dictionary.values()); <span class="comment">// ["first", "second", "third"]</span></span><br><span class="line">dictionary.remove(<span class="string">'second'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dictionary.keys()); <span class="comment">//["first", "third"]</span></span><br><span class="line"><span class="built_in">console</span>.log(dictionary.getItems()); <span class="comment">//&#123; first="huang",  third="du"&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-2散列表"><a href="#2-2散列表" class="headerlink" title="2.2散列表"></a>2.2散列表</h2><p>HashTable类,也叫HashMap类,是Dictionary类的一种散列表实现方式。散列算法的作用是尽可能快地在数据结构中找到一个值。在之前的章节中,你已经知道如果 要在数据结构中获得一个值(使用get方法),需要遍历整个数据结构来找到它。如果使用散列 函数,就知道值的具体位置,因此能够快速检索到该值。散列函数的作用是给定一个键值,然后 返回值在表中的地址。</p><h3 id="2-2-1基本版的散列表实现"><a href="#2-2-1基本版的散列表实现" class="headerlink" title="2.2.1基本版的散列表实现"></a>2.2.1基本版的散列表实现</h3><p>在散列表中我们通过散列函数来确定键值对的关系。基本方法如下：</p><ul><li>put(key,value): 向散列表增加一个新的选项(也可能是更新散列表)。</li><li>remove(key): 根据键值从散列表中移除值。</li><li>get(key): 返回根据键值检索到的特定值。</li></ul><p>对于HashTable类来说,我们不需要像ArrayList类一样从table数组中将位置也移除。由 于元素分布于整个数组范围内,一些位置会没有任何元素占据,并默认为undefined值。我们也 不能将位置本身从数组中移除(这会改变其他元素的位置),否则,当下次需要获得或移除一个 元素的时候,这个元素会不在我们用散列函数求出的位置上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lose-los散列函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loseloseHashCode</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">        hash += key.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.table = [];</span><br><span class="line">&#125;</span><br><span class="line">HashTable.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: HashTable,</span><br><span class="line">    put: function(key, value) &#123;</span><br><span class="line">        <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">        <span class="built_in">console</span>.log(position + <span class="string">'- '</span> + key);</span><br><span class="line">        <span class="keyword">this</span>.table[position] = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>: function(key) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.table[loseloseHashCode(key)];</span><br><span class="line">    &#125;,</span><br><span class="line">    remove: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.table[loseloseHashCode(key)] = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hash = <span class="keyword">new</span> HashTable();</span><br><span class="line">hash.put(<span class="string">'Gandalf'</span>, <span class="string">'gandalf@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'John'</span>, <span class="string">'johnsnow@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Tyrion'</span>, <span class="string">'tyrion@email.com'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Gandalf'</span>)); <span class="comment">//gandalf@email.com</span></span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Loiane'</span>)); <span class="comment">//undefined</span></span><br><span class="line">hash.remove(<span class="string">'Gandalf'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Gandalf'</span>)); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>有时候,一些键会有相同的散列值。不同的值在散列表中对应相同位置的时候,我们称其为冲突。当这种情况发生的时候就要去解决它。处理冲突有几种方法:分离链接、线性探查和双散列法,我们会介绍前两种方法。对于分离链接和线性探查来说,只需要重写三个方法:put、get和remove。这三个方法在 每种技术实现中都是不同的。</p><h3 id="2-2-2分离链接版散列表"><a href="#2-2-2分离链接版散列表" class="headerlink" title="2.2.2分离链接版散列表"></a>2.2.2分离链接版散列表</h3><p>为了实现一个使用了分离链接的HashTable实例,我们需要一个新的辅助类来表示将要加入LinkedList实例的元素。我们管它叫ValuePair类。LinkedList的实现具体看<a href="http://huang303513.github.io/2016/12/08/Javascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E4%B8%80" target="_blank" rel="noopener">javascript的数据结构与算法(一)</a>.html)。</p><ul><li>分离链接：分离链接法包括为散列表的每一个位置创建一个链表并将元素存储在里面。它是解决冲突的最简单的方法,但是它在HashTable实例之外还需要额外的存储空间。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.table = []; </span><br><span class="line">    <span class="comment">//lose-los散列函数 </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loseloseHashCode</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">            hash += key.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//console.log(key + " - " + (hash % 37));</span></span><br><span class="line">        <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ValuePair</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'['</span> + <span class="keyword">this</span>.key + <span class="string">' - '</span> + <span class="keyword">this</span>.value + <span class="string">']'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> <span class="keyword">this</span>.put !== <span class="string">'function'</span>) &amp;&amp; (<span class="keyword">typeof</span> <span class="keyword">this</span>.put !== <span class="string">'string'</span>)) &#123;</span><br><span class="line">        HashTable.prototype.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.table[position] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.table[position] = <span class="keyword">new</span> LinkedList();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.table[position].append(<span class="keyword">new</span> ValuePair(key, value));</span><br><span class="line">        &#125;;</span><br><span class="line">        HashTable.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.table[position] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> current = <span class="keyword">this</span>.table[position].getHead();</span><br><span class="line">                <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (current.element.key === key) &#123;</span><br><span class="line">                        <span class="keyword">return</span> current.element.value;</span><br><span class="line">                    &#125;</span><br><span class="line">                    current = current.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第一个元素或者最后一个元素</span></span><br><span class="line">                <span class="keyword">if</span> (current.element.key === key) &#123;</span><br><span class="line">                    <span class="keyword">return</span> current.element.value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        HashTable.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.table[position] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> current = <span class="keyword">this</span>.table[position].getHead();</span><br><span class="line">                <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (current.element.key === key) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.table[position].remove(current.element);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">this</span>.table[position].isEmpty()) &#123;</span><br><span class="line">                            <span class="keyword">this</span>.table[position] = <span class="literal">undefined</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    current = current.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//检查是否是第一个或者最后一个</span></span><br><span class="line">                <span class="keyword">if</span> (current.element.key === key) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.table[position].remove(current.element);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.table[position].isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.table[position] = <span class="literal">undefined</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hash = <span class="keyword">new</span> HashTable();</span><br><span class="line">hash.put(<span class="string">'Gandalf'</span>, <span class="string">'gandalf@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'John'</span>, <span class="string">'johnsnow@email.com'</span>);</span><br><span class="line"><span class="comment">//下面两个hash值相同</span></span><br><span class="line">hash.put(<span class="string">'Aaron'</span>, <span class="string">'huang@gmail.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Tyrion'</span>, <span class="string">'tyrion@email.com'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Gandalf'</span>)); <span class="comment">//gandalf@email.com</span></span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Loiane'</span>)); <span class="comment">//undefined</span></span><br><span class="line">hash.remove(<span class="string">'Gandalf'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Gandalf'</span>)); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3线性探查版散列表"><a href="#2-2-3线性探查版散列表" class="headerlink" title="2.2.3线性探查版散列表"></a>2.2.3线性探查版散列表</h3><ul><li>另一种解决冲突的方法是线性探查。当想向表中某个位置加入一个新元素的时候,如果索引为index的位置已经被占据了,就尝试index+1的位置。如果index+1的位置也被占据了,就尝试 index+2的位置,以此类推。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.table = []; <span class="comment">//lose-los散列函数 </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loseloseHashCode</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">            hash += key.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//console.log(key + " - " + (hash % 37));</span></span><br><span class="line">        <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ValuePair</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'['</span> + <span class="keyword">this</span>.key + <span class="string">' - '</span> + <span class="keyword">this</span>.value + <span class="string">']'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> <span class="keyword">this</span>.put !== <span class="string">'function'</span>) &amp;&amp; (<span class="keyword">typeof</span> <span class="keyword">this</span>.put !== <span class="string">'string'</span>)) &#123;</span><br><span class="line">        HashTable.prototype.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.table[position] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.table[position] = <span class="keyword">new</span> ValuePair(key, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> index = position + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">this</span>.table[index] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.table[index] = <span class="keyword">new</span> ValuePair(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        HashTable.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.table[position] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.table[position].key === key) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.table[position].value;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> index = position + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//index不超过数组的长度</span></span><br><span class="line">                    <span class="keyword">while</span> (((<span class="keyword">this</span>.table[index] === <span class="literal">undefined</span>) || (<span class="keyword">this</span>.table[index].key !== key)) &amp;&amp; (index &lt; <span class="keyword">this</span>.table.length)) &#123;</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.table[index] &amp;&amp; (<span class="keyword">this</span>.table[index].key === key)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.table[index].value;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        HashTable.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> position = loseloseHashCode(key);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.table[position] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.table[position].key === key) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.table[position] = <span class="literal">undefined</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> index = position + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((<span class="keyword">this</span>.table[index] === <span class="literal">undefined</span>) || (<span class="keyword">this</span>.table[index].key !== key)) &#123;</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.table[index].key === key) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.table[index] = <span class="literal">undefined</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hash = <span class="keyword">new</span> HashTable();</span><br><span class="line">hash.put(<span class="string">'Gandalf'</span>, <span class="string">'gandalf@email.com'</span>);</span><br><span class="line">hash.put(<span class="string">'John'</span>, <span class="string">'johnsnow@email.com'</span>);</span><br><span class="line"><span class="comment">//下面两个hash值相同</span></span><br><span class="line">hash.put(<span class="string">'Aaron'</span>, <span class="string">'huang@gmail.com'</span>);</span><br><span class="line">hash.put(<span class="string">'Tyrion'</span>, <span class="string">'tyrion@email.com'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Gandalf'</span>)); <span class="comment">//gandalf@email.com</span></span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Loiane'</span>)); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(hash.remove(<span class="string">'Gandalf'</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(hash.get(<span class="string">'Gandalf'</span>)); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/huang303513/HTTP-OperationSystem-DataStructer/tree/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95Javascript">Javascript的数据结构与算法(二)源码</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript的数据结构与算法(一)</title>
      <link href="/2016/12/08/Javascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E4%B8%80)/"/>
      <url>/2016/12/08/Javascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="1数组"><a href="#1数组" class="headerlink" title="1数组"></a>1数组</h1><hr><h2 id="1-1方法列表"><a href="#1-1方法列表" class="headerlink" title="1.1方法列表"></a>1.1方法列表</h2><p>数组的常用方法如下:</p><ul><li>concat: 链接两个或者更多数据，并返回结果。</li><li>every: 对数组中的每一项运行给定的函数，如果该函数对每一项都返回true，则返回true。</li><li>filter: 对数组中的每一项运行给定函数，返回改函数会返回true的项组成的数组。</li><li>forEach: 对数组中的每一项运行给定函数，这个方法没有返回值。</li><li>join: 将所有的数组元素链接成一个字符串。</li><li>indexOf: 返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1。</li><li>lastIndexOf: 返回在数组中搜索到的与给定参数相等的元素的索引里最大的值。</li><li>map: 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li><li>reverse: 颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成现在的第一个。</li><li>slice: 传入索引值，将数组中对应索引范围内的元素作为新元素返回。</li><li>some: 对数组中的每一项运行给定函数，如果任一项返回true，则返回true。</li><li>sort: 按照字母顺序对数组排序，支持传入指定排序方法的函数作为参数。</li><li>toString: 将数组作为字符串返回。</li><li>valueOf: 和toString相似，将数组作为字符串返回。<!-- ![img](/assets/postImages/2016120801.png) --></li></ul><h2 id="1-2数组合并"><a href="#1-2数组合并" class="headerlink" title="1.2数组合并"></a>1.2数组合并</h2><p> concat方法可以向一个数组传递数组、对象或是元素。数组会按照该方法传入的参数顺序 连接指定数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> zero = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> positiveNumbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> negativeNumbers = [<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>];</span><br><span class="line"><span class="keyword">var</span> numbers = negativeNumbers.concat(zero,positiveNumbers);</span><br><span class="line"><span class="built_in">console</span>.log(numbers);<span class="comment">//输出结果： [-1, -2, -3, 0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="1-3迭代器函数"><a href="#1-3迭代器函数" class="headerlink" title="1.3迭代器函数"></a>1.3迭代器函数</h2><p>reduce方法接收一个函数作为参数,这个函数有四个参数:previousValue、currentValue、index和array。这个函数会返回一个将被叠加到累加器的 值,reduce方法停止执行后会返回这个累加器。如果要对一个数组中的所有元素求和,这就很有用了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isEven = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (x%<span class="number">2</span> == <span class="number">0</span>)?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>];</span><br><span class="line"><span class="comment">//every方法会迭代数组中的每个元素,直到返回false。</span></span><br><span class="line"><span class="keyword">var</span> result = numbers.every(isEven);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//false</span></span><br><span class="line"><span class="comment">//some方法会迭代数组的每个元 素,直到函数返回true.</span></span><br><span class="line">result = numbers.some(isEven);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//forEach对每一项运行给定的函数，没有返回值</span></span><br><span class="line">numbers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item%<span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//map会迭代数组中的每个值，并且返回迭代结果</span></span><br><span class="line"><span class="keyword">var</span> myMap = numbers.map(isEven);</span><br><span class="line"><span class="built_in">console</span>.log(myMap);<span class="comment">// [false, true, false, true, false, true, false, true, false, true, false, true, false, true, false]</span></span><br><span class="line"><span class="comment">//filter方法返回的新数组由使函数返回true的元素组成</span></span><br><span class="line"><span class="keyword">var</span> myFilter = numbers.filter(isEven);</span><br><span class="line"><span class="built_in">console</span>.log(myFilter);<span class="comment">// [2, 4, 6, 8, 10, 12, 14]</span></span><br><span class="line"><span class="comment">//reduct函数</span></span><br><span class="line"><span class="keyword">var</span> myReduce = numbers.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previous,current,index</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> previous + <span class="string">""</span> + current;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(myReduce);<span class="comment">//123456789101112131415</span></span><br></pre></td></tr></table></figure><h2 id="1-4排序"><a href="#1-4排序" class="headerlink" title="1.4排序"></a>1.4排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>];</span><br><span class="line">numbers.reverse();<span class="comment">//[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sort函数使用</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>].sort(compare);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> friends = [&#123;</span><br><span class="line">  name:<span class="string">'huang'</span>,</span><br><span class="line">  age:<span class="number">30</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">  name:<span class="string">'chengdu'</span>,</span><br><span class="line">  age:<span class="number">27</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">  name:<span class="string">'du'</span>,</span><br><span class="line">  age:<span class="number">31</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">comparePerson</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a.age &gt; b.age)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(a.age &lt; b.age)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(friends.sort(comparePerson));<span class="comment">// [Object &#123; name="chengdu",  age=27&#125;, Object &#123; name="huang",  age=30&#125;, Object &#123; name="du",  age=31&#125;]</span></span><br><span class="line"><span class="comment">//搜索</span></span><br><span class="line">numbers.push(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(numbers.indexOf(<span class="number">10</span>));<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers.lastIndexOf(<span class="number">10</span>));<span class="comment">//15</span></span><br><span class="line"><span class="keyword">var</span> numbersString = numbers.join(<span class="string">'-'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(numbersString);<span class="comment">//15-14-13-12-11-10-9-8-7-6-5-4-3-2-1-10</span></span><br></pre></td></tr></table></figure><h1 id="2栈"><a href="#2栈" class="headerlink" title="2栈"></a>2栈</h1><hr><h2 id="2-1栈的创建"><a href="#2-1栈的创建" class="headerlink" title="2.1栈的创建"></a>2.1栈的创建</h2><p>对于一个栈，我们需要实现添加、删除元素、获取栈顶元素、已经是否为空，栈的长度、清除元素等几个基本操作。下面是基本定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items = [];</span><br><span class="line">&#125;</span><br><span class="line">Stack.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>:Stack,</span><br><span class="line">  push:function(element)&#123;</span><br><span class="line">    <span class="keyword">this</span>.items.push(element);</span><br><span class="line">  &#125;,</span><br><span class="line">  pop:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.pop();</span><br><span class="line">  &#125;,</span><br><span class="line">  peek:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">  isEmpty:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length == <span class="number">0</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  clear:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.items = [];</span><br><span class="line">  &#125;,</span><br><span class="line">  size:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length;</span><br><span class="line">  &#125;,</span><br><span class="line">  print:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.items.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2栈的基本使用"><a href="#2-2栈的基本使用" class="headerlink" title="2.2栈的基本使用"></a>2.2栈的基本使用</h2><p>栈的基本操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"><span class="built_in">console</span>.log(stack.isEmpty());<span class="comment">//true</span></span><br><span class="line">stack.push(<span class="number">5</span>);</span><br><span class="line">stack.push(<span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stack.peek());<span class="comment">//8</span></span><br><span class="line">stack.push(<span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stack.size());<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.isEmpty());</span><br><span class="line">stack.push(<span class="number">15</span>);</span><br><span class="line">stack.pop();</span><br><span class="line">stack.pop();</span><br><span class="line"><span class="built_in">console</span>.log(stack.size());<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.print());<span class="comment">//5,8</span></span><br></pre></td></tr></table></figure><p>通过栈实现对正整数的二进制转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divideBy2</span>(<span class="params">decNumber</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> decStack = <span class="keyword">new</span> Stack();</span><br><span class="line">  <span class="keyword">var</span> rem;</span><br><span class="line">  <span class="keyword">var</span> decString = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">while</span>(decNumber &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    rem = decNumber%<span class="number">2</span>;</span><br><span class="line">    decStack.push(rem);</span><br><span class="line">    decNumber = <span class="built_in">Math</span>.floor(decNumber/<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!decStack.isEmpty())&#123;</span><br><span class="line">    decString += decStack.pop().toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> decString;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(divideBy2(<span class="number">10</span>));<span class="comment">//1010</span></span><br></pre></td></tr></table></figure><h1 id="3队列"><a href="#3队列" class="headerlink" title="3队列"></a>3队列</h1><hr><h2 id="3-1队列的创建"><a href="#3-1队列的创建" class="headerlink" title="3.1队列的创建"></a>3.1队列的创建</h2><p>队列是遵循FIFO(First In First Out,先进先出,也称为先来先服务)原则的一组有序的项。队列在尾部添加新元素,并从顶部移除元素。最新添加的元素必须排在队列的末尾。队列要实现的操作基本和栈一样，只不过栈是FILO(先进后出)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items = [];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>:Queue,</span><br><span class="line">  enqueue:function(elements)&#123;</span><br><span class="line">    <span class="keyword">this</span>.items.push(elements);</span><br><span class="line">  &#125;,</span><br><span class="line">  dequeue:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.shift();</span><br><span class="line">  &#125;,</span><br><span class="line">  front:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="number">0</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">  isEmpty:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length == <span class="number">0</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  size:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length;</span><br><span class="line">  &#125;,</span><br><span class="line">  clear:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.items = [];</span><br><span class="line">  &#125;,</span><br><span class="line">  print:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.items.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>队列的基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty());<span class="comment">//true</span></span><br><span class="line">queue.enqueue(<span class="string">'huang'</span>);</span><br><span class="line">queue.enqueue(<span class="string">'cheng'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(queue.print());<span class="comment">//huang,cheng</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.size());<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty());<span class="comment">//false</span></span><br><span class="line">queue.enqueue(<span class="string">'du'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(queue.dequeue());<span class="comment">//huang</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.print());<span class="comment">//cheng,du</span></span><br></pre></td></tr></table></figure><h2 id="3-2-优先队列"><a href="#3-2-优先队列" class="headerlink" title="3.2 优先队列"></a>3.2 优先队列</h2><p>元素的添加和移除是基于优先级的。实现一个优先队列,有两种选项:设置优先级,然后在正确的位置添加元素;或者用入列操 作添加元素,然后按照优先级移除它们。<br>我们在这里实现的优先队列称为最小优先队列,因为优先级的值较小的元素被放置在队列最 前面(1代表更高的优先级)。最大优先队列则与之相反,把优先级的值较大的元素放置在队列最 前面。</p><h3 id="3-2-1-优先队列的定义"><a href="#3-2-1-优先队列的定义" class="headerlink" title="3.2.1 优先队列的定义"></a>3.2.1 优先队列的定义</h3><p>我们在这里使用组合继承的方式继承自Queue队列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Queue.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line">PriorityQueue.prototype = <span class="keyword">new</span> Queue();</span><br><span class="line">PriorityQueue.prototype.constructer = PriorityQueue;</span><br><span class="line">PriorityQueue.prototype.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element,priority</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">QueueElement</span>(<span class="params">tempelement,temppriority</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.element = tempelement;</span><br><span class="line">    <span class="keyword">this</span>.priority = temppriority;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> queueElement = <span class="keyword">new</span> QueueElement(element,priority);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty())&#123;</span><br><span class="line">    <span class="keyword">this</span>.items.push(queueElement);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> added = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.items.length;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.items[i].priority &gt; queueElement.priority)&#123;</span><br><span class="line">        <span class="keyword">this</span>.items.splice(i,<span class="number">0</span>,queueElement);</span><br><span class="line">        added = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!added)&#123;</span><br><span class="line">        <span class="keyword">this</span>.items.push(queueElement);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个方法可以用Queue的默认实现</span></span><br><span class="line">PriorityQueue.prototype.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result =<span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.items.length;i++)&#123;</span><br><span class="line">    result += <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.items[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-1-优先队列的基本使用"><a href="#3-2-1-优先队列的基本使用" class="headerlink" title="3.2.1 优先队列的基本使用"></a>3.2.1 优先队列的基本使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line">priorityQueue.enqueue(<span class="string">"cheng"</span>, <span class="number">2</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"du"</span>, <span class="number">3</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"huang"</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.print());<span class="comment">//&#123;"element":"huang","priority":1&#125;&#123;"element":"cheng","priority":2&#125;&#123;"element":"du","priority":3&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.size());<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.dequeue());<span class="comment">//&#123; element="huang",  priority=1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.size());<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h1 id="3链表"><a href="#3链表" class="headerlink" title="3链表"></a>3链表</h1><hr><p>数组的大小是固定的,从数组的起点或中间插入 或移除项的成本很高,因为需要移动元素(尽管我们已经学过的JavaScript的Array类方法可以帮 我们做这些事,但背后的情况同样是这样)。链表存储有序的元素集合,但不同于数组,链表中的元素在内存中并不是连续放置的。每个 元素由一个存储元素本身的节点和一个指向下一个元素的引用(也称指针或链接)组成。</p><p>相对于传统的数组,链表的一个好处在于,添加或移除元素的时候不需要移动其他元素。然 而,链表需要使用指针,因此实现链表时需要额外注意。数组的另一个细节是可以直接访问任何 位置的任何元素,而要想访问链表中间的一个元素,需要从起点(表头)开始迭代列表直到找到 所需的元素</p><h2 id="3-1-1链表的创建"><a href="#3-1-1链表的创建" class="headerlink" title="3.1.1链表的创建"></a>3.1.1链表的创建</h2><p>我们使用动态原型模式来创建一个链表。列表最后一个节点的下一个元素始终是null。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//通过对一个方法append判断就可以知道是否设置了prototype</span></span><br><span class="line">  <span class="keyword">if</span>((<span class="keyword">typeof</span> <span class="keyword">this</span>.append !== <span class="string">'function'</span>)&amp;&amp;(<span class="keyword">typeof</span> <span class="keyword">this</span>.append !== <span class="string">'string'</span>))&#123;</span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    LinkedList.prototype.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">      <span class="keyword">var</span> current;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.head === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.head = node;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(current.next !== <span class="literal">null</span>)&#123;</span><br><span class="line">          current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.next = node;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.length++;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//插入元素，成功true，失败false</span></span><br><span class="line">    LinkedList.prototype.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position,element</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(position &gt; <span class="number">-1</span> &amp;&amp; position &lt; <span class="keyword">this</span>.length)&#123;</span><br><span class="line">        <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">var</span> previous;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">        <span class="keyword">if</span>(position == <span class="number">0</span>)&#123;</span><br><span class="line">          node.next = current;</span><br><span class="line">          <span class="keyword">this</span>.head = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">            previous = current;</span><br><span class="line">            current = current.next;</span><br><span class="line">          &#125;</span><br><span class="line">          node.next = current;</span><br><span class="line">          previous.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//根据位置删除指定元素，成功 返回元素， 失败 返回null</span></span><br><span class="line">    LinkedList.prototype.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(position &gt; <span class="number">-1</span> &amp;&amp; position &lt; <span class="keyword">this</span>.length)&#123;</span><br><span class="line">        <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">var</span> previous = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(position == <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">this</span>.head = current.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">while</span>(index++ &lt; position)&#123;</span><br><span class="line">            previous = current;</span><br><span class="line">            current = current.next;</span><br><span class="line">          &#125;</span><br><span class="line">          previous.next = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length--;</span><br><span class="line">        <span class="keyword">return</span> current.element;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//根据元素删除指定元素，成功 返回元素， 失败 返回null</span></span><br><span class="line">    LinkedList.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> index = <span class="keyword">this</span>.indexOf(element);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.removeAt(index);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回给定元素的索引，如果没有则返回-1</span></span><br><span class="line">    LinkedList.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">      <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(current)&#123;</span><br><span class="line">        <span class="keyword">if</span>(current.element === element)&#123;</span><br><span class="line">          <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    LinkedList.prototype.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.length === <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    LinkedList.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">    &#125;;</span><br><span class="line">    LinkedList.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> string = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(current)&#123;</span><br><span class="line">          string += current.element;</span><br><span class="line">          current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;;</span><br><span class="line">    LinkedList.prototype.getHead = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.head;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-1-2链表的基本使用"><a href="#3-1-2链表的基本使用" class="headerlink" title="3.1.2链表的基本使用"></a>3.1.2链表的基本使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.isEmpty());<span class="comment">//true;</span></span><br><span class="line">linkedList.append(<span class="string">'huang'</span>);</span><br><span class="line">linkedList.append(<span class="string">'du'</span>)</span><br><span class="line">linkedList.insert(<span class="number">1</span>,<span class="string">'cheng'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString());<span class="comment">//huangchengdu</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.indexOf(<span class="string">'du'</span>));<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.size());<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.removeAt(<span class="number">2</span>));<span class="comment">//du</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString());<span class="comment">//huangcheng</span></span><br></pre></td></tr></table></figure><h2 id="3-2-1双向链表的创建"><a href="#3-2-1双向链表的创建" class="headerlink" title="3.2.1双向链表的创建"></a>3.2.1双向链表的创建</h2><p>链表有多种不同的类型,这一节介绍双向链表。双向链表和普通链表的区别在于,在链表中, 一个节点只有链向下一个节点的链接,而在双向链表中,链接是双向的:一个链向下一个元素, 另一个链向前一个元素。</p><p>双向链表和链表的区别就是有一个tail属性，所以必须重写insert、append、removeAt方法。每个节点对应的Node也多了一个prev属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寄生组合式继承实现，详见javascript高级程序设计第七章</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        F.prototype = o;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> prototype = object(superType.prototype);</span><br><span class="line">    prototype.constructor = subType;</span><br><span class="line">    subType.prototype = prototype;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">    LinkedList.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//与LinkedList不同的方法自己实现。</span></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position, element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt; <span class="number">-1</span> &amp;&amp; position &lt;= <span class="keyword">this</span>.length) &#123;</span><br><span class="line">            <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">            <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">var</span> previous;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.head) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.head = node;</span><br><span class="line">                    <span class="keyword">this</span>.tail = node;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node.next = current;</span><br><span class="line">                    current.prev = node;</span><br><span class="line">                    <span class="keyword">this</span>.head = node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="keyword">this</span>.length) &#123;</span><br><span class="line">                current = <span class="keyword">this</span>.tail;</span><br><span class="line">                current.next = node;</span><br><span class="line">                node.prev = current;</span><br><span class="line">                <span class="keyword">this</span>.tail = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">                    previous = current;</span><br><span class="line">                    current = current.next;</span><br><span class="line">                &#125;</span><br><span class="line">                previous.next = node;</span><br><span class="line">                node.next = current;</span><br><span class="line">                current.prev = node;</span><br><span class="line">                node.prev = previous;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.length++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">        <span class="keyword">var</span> current;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.head = node;</span><br><span class="line">            <span class="keyword">this</span>.tail = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">while</span> (current.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current.next = node;</span><br><span class="line">            node.prev = current;</span><br><span class="line">            <span class="keyword">this</span>.tail = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length++;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt; <span class="number">-1</span> &amp;&amp; position &lt; <span class="keyword">this</span>.length) &#123;</span><br><span class="line">            <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">var</span> previous;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.head = current.next;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.head.prev = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === (<span class="keyword">this</span>.length - <span class="number">1</span>)) &#123;</span><br><span class="line">                current = <span class="keyword">this</span>.tail;</span><br><span class="line">                <span class="keyword">this</span>.tail = current.prev;</span><br><span class="line">                <span class="keyword">this</span>.tail.next = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">                    previous = current;</span><br><span class="line">                    current = current.next;</span><br><span class="line">                &#125;</span><br><span class="line">                previous.next = current.next;</span><br><span class="line">                current.next.prev = previous;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.length--;</span><br><span class="line">            <span class="keyword">return</span> current.element;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(DoublyLinkedList, LinkedList);</span><br></pre></td></tr></table></figure><h2 id="3-2-2双向链表的基本使用"><a href="#3-2-2双向链表的基本使用" class="headerlink" title="3.2.2双向链表的基本使用"></a>3.2.2双向链表的基本使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> doublyList = <span class="keyword">new</span> DoublyLinkedList();</span><br><span class="line"><span class="built_in">console</span>.log(doublyList.isEmpty()); <span class="comment">//true;</span></span><br><span class="line">doublyList.append(<span class="string">'huang'</span>);</span><br><span class="line">doublyList.append(<span class="string">'du'</span>)</span><br><span class="line">doublyList.insert(<span class="number">1</span>, <span class="string">'cheng'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyList.toString()); <span class="comment">//huangchengdu</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyList.indexOf(<span class="string">'du'</span>)); <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyList.size()); <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyList.removeAt(<span class="number">2</span>)); <span class="comment">//du</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyList.toString()); <span class="comment">//huangcheng</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-循环链表"><a href="#3-2-3-循环链表" class="headerlink" title="3.2.3 循环链表"></a>3.2.3 循环链表</h3><p>循环链表可以像链表一样只有单向引用,也可以像双向链表一样有双向引用。循环链表和链 表之间唯一的区别在于,最后一个元素指向下一个元素的指针(tail.next)不是引用null, 而是指向第一个元素(head)。双向循环链表有指向head元素的tail.next,和指向tail元素的head.prev。</p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/huang303513/HTTP-OperationSystem-DataStructer/tree/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95Javascript">Javascript的数据结构与算法(一)源码</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6新特性总结之let和const理解</title>
      <link href="/2016/06/30/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93%E4%B9%8Blet%E5%92%8Cconst%E7%90%86%E8%A7%A3/"/>
      <url>/2016/06/30/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93%E4%B9%8Blet%E5%92%8Cconst%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>let的作用基本与var相同，区别是let声明的变量只在所在代码块里面有用。</p><pre><code>{    let a = 10;    var b = 1;}//alert(a);//检测不到aalert(b);</code></pre>let在for循环里面的使用,下面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。[这里是关于for循环let块级作用域的实现原理](http://www.spotty.com.cn/archives/9/)<pre><code>var a = [];for (let i = 0; i < 10; i++) {    a[i] = function() {        console.log(i);    };}a[6](); //6</code></pre>let不像var那样变量提升。let实际上为javascript新增了块级作用域。<pre><code>function f1() {    let n = 5;    if (true) {        let n = 10;    }    console.log(n); //5}f1();</code></pre>块级作用域用于取代立即执行的匿名函数<pre><code>(function() {    var tmp = 1;}()); {    let tmp = 1;}</code></pre>在块级作用域中声明的函数相当于let变量、在作用域外不能访问。<pre><code>function f() {    console.log('I am outside!');}(function() {    if (false) {        // 重复声明一次函数f        function f() {            console.log('I am inside!');        }    }    f(); //es6中访问外面那个f函数，es5访问内部声明的函数。}());</code></pre><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>const声明一个只读的常量、一旦声明、常量的值就不能改变。声明的时候必须初始化，只声明不初始化会报错。const和let一样，只在声明的作用域可用。块级作用域也不能提升作用域。const常量不能重复申明</p><pre><code>const PI = 3.1415;PI = 3; //出错const foo; //报错if (true) {    const MAX = 5;}MAX; //错误if (true) {    console.log(MAX); //出错    const MAX = 5;}var message = "hello";let age = 25;//下面两行都报错const message = "goodbye!";const age = 30;</code></pre>对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。const命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心。如果真的想将对象冻结，应该使用Object.freeze方法。<pre><code>const foo = Object.freeze({    name: "huang",    age: 123});console.log(foo.name);foo.name = "cheng"; //严格报错、常规模式不起作用</code></pre>在浏览器环境中、全局对象是window对象，在node.js环境下全局对象是global。但是在node.js的模块环境中，全局变量必须显式声明为global对象的属性。为了保持兼容性，var命令和function命令声明的全局变量，依旧是全局对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于全局对象的属性。也就是说，从ES6开始，全局变量将逐步与全局对象的属性脱钩。<pre><code>var a = 1;console.log(window.a);let b = 1;console.log(window.b); //报错</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6新特性总结之迭代器和for-of循环</title>
      <link href="/2016/06/30/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8Cfor-of%E5%BE%AA%E7%8E%AF/"/>
      <url>/2016/06/30/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8Cfor-of%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h2><p>我们将 要探究一下 for-of 循环的外表下隐藏着哪些强大的功能。现在,只需记住:</p><ol><li>这是最简洁、最直接的遍历数组元素的语法</li><li>这个方法避开了 for-in 循环的所有缺陷</li><li>与forEach()不同的是,它可以正确响应 break、continue 和 return 语句</li><li>for-in 循环用来遍历对象属性。</li><li>for-of 循环用来遍历数据—例如数组中的值。</li></ol><p>基本用法：</p><pre><code>var myArray = ['huang','cheng','du'];for(var value of myArray){    console.log(value);}</code></pre>遍历集合：<pre><code>for (var chr of "huangchengdu") {    console.log(chr);}//新建一个mapvar map = new Map();var key1 = {    toString: function() {        return 2    }};var key2 = 2;map.set(key1, "huang");map.set(key2, "chengdu");for (var [key, value] of map) {    console.log(key + " " + value);}//遍历对象的属性object1 = {    name: "huang",    age: 27};for (var key of Object.keys(object1)) {    console.log(key + ":" + object1[key]);}</code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>正如其它语言中的 for/foreach 语句一样,for-of 循环语句通过方法调用来遍历各种 集合。数组、Maps 对象、Sets 对象以及其它在我们讨论的对象有一个共同点,它们都有一个迭代器方法。你可以给任意类型的对象添加迭代器方法。当你为对象添加 myObject.toString()方法后,就可以将对象转化为字符串,同样地,<br>当你向任意对象添加 myObject<a href="">Symbol.iterator</a>方法,就可以遍历这个对象了。</p><p>所有拥有<a href="">Symbol.iterator</a>的对象被称为可迭代的。</p><pre><code>//因为jQuery对象与数组想死，为jQuery对象添加数组的迭代器方法jQuery.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
